<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/add-alarm.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/add-alarm.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { View, Text, TextInput, StyleSheet, TouchableOpacity, Platform } from 'react-native';&#10;import DateTimePicker from '@react-native-community/datetimepicker';&#10;import { useRouter } from 'expo-router';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import CustomSwitch from '../components/CustomSwitch';&#10;&#10;export default function AddAlarmScreen() {&#10;  const [medicine, setMedicine] = useState('');&#10;  const [time, setTime] = useState(new Date());&#10;  const [showPicker, setShowPicker] = useState(false);&#10;  const [repeat, setRepeat] = useState('안 함');&#10;  const [sound, setSound] = useState('종소리');&#10;  const [snooze, setSnooze] = useState(true);&#10;  const router = useRouter();&#10;&#10;  const onChange = (event: any, selectedDate?: Date) =&gt; {&#10;    setShowPicker(Platform.OS === 'ios');&#10;    if (selectedDate) setTime(selectedDate);&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* 상단 바 */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;MaterialCommunityIcons name=&quot;chevron-left&quot; size={32} color=&quot;#1877F2&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;알림 추가&lt;/Text&gt;&#10;        &lt;View style={{ width: 32 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 약 이름 입력 */}&#10;      &lt;Text style={styles.label}&gt;약 이름&lt;/Text&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder=&quot;약 이름을 입력하세요&quot;&#10;        value={medicine}&#10;        onChangeText={setMedicine}&#10;      /&gt;&#10;      {/* 알림 시간 설정 */}&#10;      &lt;Text style={styles.label}&gt;알림 시간&lt;/Text&gt;&#10;      &lt;TouchableOpacity style={styles.timeInput} onPress={() =&gt; setShowPicker(true)}&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;clock-outline&quot; size={24} color=&quot;#1877F2&quot; /&gt;&#10;        &lt;Text style={styles.timeText}&gt;{time.getHours().toString().padStart(2, '0')}:{time.getMinutes().toString().padStart(2, '0')}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      {showPicker &amp;&amp; (&#10;        &lt;DateTimePicker&#10;          value={time}&#10;          mode=&quot;time&quot;&#10;          is24Hour={true}&#10;          display=&quot;spinner&quot;&#10;          onChange={onChange}&#10;        /&gt;&#10;      )}&#10;      {/* group 974 스타일의 알림 옵션 */}&#10;      &lt;View style={styles.optionGroupBoxImproved}&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;반복&lt;/Text&gt;&#10;          &lt;Text style={styles.optionValueDisabledImproved}&gt;{repeat}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.dividerImproved} /&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;사운드&lt;/Text&gt;&#10;          &lt;Text style={styles.optionValueImproved}&gt;{sound}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.dividerImproved} /&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;다시 알림&lt;/Text&gt;&#10;          &lt;CustomSwitch&#10;            value={snooze}&#10;            onValueChange={setSnooze}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;      {/* 저장 버튼 */}&#10;      &lt;TouchableOpacity style={styles.saveButton}&gt;&#10;        &lt;Text style={styles.saveButtonText}&gt;저장&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 24,&#10;    paddingTop: 48,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 32,&#10;  },&#10;  headerTitle: {&#10;    flex: 1,&#10;    textAlign: 'center',&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#1877F2',&#10;  },&#10;  label: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    marginBottom: 8,&#10;    marginTop: 16,&#10;    color: '#222',&#10;  },&#10;  input: {&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    borderRadius: 12,&#10;    padding: 14,&#10;    fontSize: 16,&#10;    backgroundColor: '#F7F7F7',&#10;    marginBottom: 8,&#10;  },&#10;  timeInput: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    borderRadius: 12,&#10;    padding: 14,&#10;    backgroundColor: '#F7F7F7',&#10;    marginBottom: 8,&#10;    width: 140,&#10;  },&#10;  timeText: {&#10;    fontSize: 18,&#10;    marginLeft: 10,&#10;    color: '#1877F2',&#10;    fontWeight: '600',&#10;  },&#10;  optionGroupBoxImproved: {&#10;    marginTop: 24,&#10;    borderRadius: 12,&#10;    overflow: 'hidden',&#10;    backgroundColor: '#fff',&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.04,&#10;    shadowRadius: 4,&#10;    elevation: 1,&#10;  },&#10;  optionRowImproved: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingVertical: 14,&#10;    paddingHorizontal: 18,&#10;    backgroundColor: '#fff',&#10;  },&#10;  optionLabelImproved: {&#10;    fontSize: 16,&#10;    color: '#222',&#10;    fontWeight: '400',&#10;  },&#10;  optionValueImproved: {&#10;    fontSize: 16,&#10;    color: '#1877F2',&#10;    fontWeight: '500',&#10;  },&#10;  optionValueDisabledImproved: {&#10;    fontSize: 16,&#10;    color: '#B0B0B0',&#10;    fontWeight: '400',&#10;  },&#10;  dividerImproved: {&#10;    height: 1,&#10;    backgroundColor: '#F0F1F3',&#10;    marginLeft: 18,&#10;    marginRight: 18,&#10;  },&#10;  saveButton: {&#10;    marginTop: 32,&#10;    backgroundColor: '#1877F2',&#10;    borderRadius: 12,&#10;    paddingVertical: 14,&#10;    alignItems: 'center',&#10;  },&#10;  saveButtonText: {&#10;    color: '#fff',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, TextInput, StyleSheet, TouchableOpacity, Platform } from 'react-native';&#10;import DateTimePicker from '@react-native-community/datetimepicker';&#10;import { useRouter } from 'expo-router';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import CustomSwitch from '../components/CustomSwitch';&#10;&#10;export default function AddAlarmScreen() {&#10;  const [medicine, setMedicine] = useState('');&#10;  const [time, setTime] = useState(new Date());&#10;  const [showPicker, setShowPicker] = useState(false);&#10;  const [repeat, setRepeat] = useState('안 함');&#10;  const [sound, setSound] = useState('종소리');&#10;  const [snooze, setSnooze] = useState(true);&#10;  const router = useRouter();&#10;&#10;  const onChange = (event: any, selectedDate?: Date) =&gt; {&#10;    setShowPicker(Platform.OS === 'ios');&#10;    if (selectedDate) setTime(selectedDate);&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* 상단 바 */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()} hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}&gt;&#10;          &lt;MaterialCommunityIcons name=&quot;chevron-left&quot; size={32} color=&quot;#1877F2&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;알림 추가&lt;/Text&gt;&#10;        &lt;View style={{ width: 32 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 약 이름 입력 */}&#10;      &lt;Text style={styles.label}&gt;약 이름&lt;/Text&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder=&quot;약 이름을 입력하세요&quot;&#10;        value={medicine}&#10;        onChangeText={setMedicine}&#10;      /&gt;&#10;      {/* 알림 시간 설정 */}&#10;      &lt;Text style={styles.label}&gt;알림 시간&lt;/Text&gt;&#10;      &lt;TouchableOpacity style={styles.timeInput} onPress={() =&gt; setShowPicker(true)}&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;clock-outline&quot; size={24} color=&quot;#1877F2&quot; /&gt;&#10;        &lt;Text style={styles.timeText}&gt;{time.getHours().toString().padStart(2, '0')}:{time.getMinutes().toString().padStart(2, '0')}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      {showPicker &amp;&amp; (&#10;        &lt;DateTimePicker&#10;          value={time}&#10;          mode=&quot;time&quot;&#10;          is24Hour={true}&#10;          display=&quot;spinner&quot;&#10;          onChange={onChange}&#10;        /&gt;&#10;      )}&#10;      {/* group 974 스타일의 알림 옵션 */}&#10;      &lt;View style={styles.optionGroupBoxImproved}&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;반복&lt;/Text&gt;&#10;          &lt;Text style={styles.optionValueDisabledImproved}&gt;{repeat}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.dividerImproved} /&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;사운드&lt;/Text&gt;&#10;          &lt;Text style={styles.optionValueImproved}&gt;{sound}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.dividerImproved} /&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;다시 알림&lt;/Text&gt;&#10;          &lt;CustomSwitch&#10;            value={snooze}&#10;            onValueChange={setSnooze}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;      {/* 저장 버튼 */}&#10;      &lt;TouchableOpacity style={styles.saveButton}&gt;&#10;        &lt;Text style={styles.saveButtonText}&gt;저장&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 24,&#10;    paddingTop: 48,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 32,&#10;  },&#10;  headerTitle: {&#10;    flex: 1,&#10;    textAlign: 'center',&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#1877F2',&#10;  },&#10;  label: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    marginBottom: 8,&#10;    marginTop: 16,&#10;    color: '#222',&#10;  },&#10;  input: {&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    borderRadius: 12,&#10;    padding: 14,&#10;    fontSize: 16,&#10;    backgroundColor: '#F7F7F7',&#10;    marginBottom: 8,&#10;  },&#10;  timeInput: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    borderRadius: 12,&#10;    padding: 14,&#10;    backgroundColor: '#F7F7F7',&#10;    marginBottom: 8,&#10;    width: 140,&#10;  },&#10;  timeText: {&#10;    fontSize: 18,&#10;    marginLeft: 10,&#10;    color: '#1877F2',&#10;    fontWeight: '600',&#10;  },&#10;  optionGroupBoxImproved: {&#10;    marginTop: 24,&#10;    borderRadius: 12,&#10;    overflow: 'hidden',&#10;    backgroundColor: '#fff',&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.04,&#10;    shadowRadius: 4,&#10;    elevation: 1,&#10;  },&#10;  optionRowImproved: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingVertical: 14,&#10;    paddingHorizontal: 18,&#10;    backgroundColor: '#fff',&#10;  },&#10;  optionLabelImproved: {&#10;    fontSize: 16,&#10;    color: '#222',&#10;    fontWeight: '400',&#10;  },&#10;  optionValueImproved: {&#10;    fontSize: 16,&#10;    color: '#1877F2',&#10;    fontWeight: '500',&#10;  },&#10;  optionValueDisabledImproved: {&#10;    fontSize: 16,&#10;    color: '#B0B0B0',&#10;    fontWeight: '400',&#10;  },&#10;  dividerImproved: {&#10;    height: 1,&#10;    backgroundColor: '#F0F1F3',&#10;    marginLeft: 18,&#10;    marginRight: 18,&#10;  },&#10;  saveButton: {&#10;    marginTop: 32,&#10;    backgroundColor: '#1877F2',&#10;    borderRadius: 12,&#10;    paddingVertical: 14,&#10;    alignItems: 'center',&#10;  },&#10;  saveButtonText: {&#10;    color: '#fff',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/interaction.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/interaction.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, ScrollView } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import InteractionWarning from '../components/InteractionWarning';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;import { INTERACTION_DATA } from '@/constants/InteractionData';&#10;&#10;  const handleGroupPress = (groupType: 'risk' | 'safe') =&gt; {&#10;    setSelectedGroup(newSelection);&#10;&#10;  // 각 그룹별 데이터&#10;  const groupData = {&#10;    risk: [&#10;      { name: '메트포르민 + 알코올', description: '저혈당 위험 증가', type: '위험' },&#10;    ],&#10;    safe: [&#10;      { name: '비타민 D + 칼슘', description: '뼈 건강 증진 효과', type: '안전' },&#10;    ],&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Search Bar - 최상단으로 이동 */}&#10;        &lt;SearchBar placeholder=&quot;약물명을 검색하세요&quot; /&gt;&#10;&#10;        &lt;SearchBar placeholder=&quot;약물명을 검색하세요&quot; /&gt;&#10;        &lt;View style={styles.header}&gt;&#10;        &lt;SearchBar placeholder=&quot;약물명을 검색하세요&quot; /&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;복용 중인 약물들의 상호작용을 확인하세요&lt;/Text&gt;&#10;        &lt;SearchBar placeholder=&quot;약물명을 검색하세요&quot; /&gt;&#10;&#10;        {/* 상호작용 안전도 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.gaugeSection}&gt;&#10;            &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={180} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;            &lt;InteractionRiskGroups&#10;              interactable={true}&#10;              onGroupPress={handleGroupPress}&#10;              selectedGroup={selectedGroup}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 경고 문구 */}&#10;        &lt;InteractionWarning /&gt;&#10;&#10;        {/* 선택된 그룹의 상세 정보 표시 */}&#10;        {selectedGroup &amp;&amp; (&#10;          &lt;View style={styles.detailContainer}&gt;&#10;            &lt;Text style={styles.detailTitle}&gt;&#10;              {selectedGroup === 'risk' &amp;&amp; '위험 상호작용'}&#10;              {selectedGroup === 'safe' &amp;&amp; '안전 상호작용'}&#10;            &lt;/Text&gt;&#10;            {groupData[selectedGroup].map((item, index) =&gt; (&#10;              &lt;View key={index} style={styles.detailItem}&gt;&#10;                &lt;Text style={styles.detailItemName}&gt;{item.name}&lt;/Text&gt;&#10;                &lt;Text style={styles.detailItemDescription}&gt;{item.description}&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            ))}&#10;          &lt;/View&gt;&#10;        )}&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar activeIndex={1} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    paddingTop: 20,&#10;  },&#10;  header: {&#10;    marginBottom: 20,&#10;    marginTop: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 16,&#10;    color: Colors.mediumGray,&#10;  },&#10;  sectionContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  gaugeSection: {&#10;    alignItems: 'center',&#10;    marginBottom: 20,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    marginTop: 10,&#10;  },&#10;  detailContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  detailTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 16,&#10;  },&#10;  detailItem: {&#10;    marginBottom: 12,&#10;    paddingBottom: 12,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.border,&#10;  },&#10;  detailItemName: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  detailItemDescription: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, ScrollView } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import InteractionWarning from '../components/InteractionWarning';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;import { INTERACTION_DATA } from '@/constants/InteractionData';&#10;import { useRouter } from 'expo-router';&#10;&#10;export default function InteractionScreen() {&#10;  const [selectedGroup, setSelectedGroup] = useState&lt;'risk' | 'safe' | null&gt;(null);&#10;  const router = useRouter();&#10;&#10;  // 그룹 버튼 클릭 핸들러&#10;  const handleGroupPress = (groupType: 'risk' | 'safe') =&gt; {&#10;    const newSelection = selectedGroup === groupType ? null : groupType;&#10;    setSelectedGroup(newSelection);&#10;  };&#10;&#10;  // 각 그룹별 데이터&#10;  const groupData = {&#10;    risk: [&#10;      { name: '메트포르민 + 알코올', description: '저혈당 위험 증가', type: '위험' },&#10;    ],&#10;    safe: [&#10;      { name: '비타민 D + 칼슘', description: '뼈 건강 증진 효과', type: '안전' },&#10;    ],&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Search Bar - 최상단으로 이동 */}&#10;        &lt;SearchBar placeholder=&quot;약물명을 검색하세요&quot; onPressPlus={() =&gt; router.push('/add-alarm')} /&gt;&#10;&#10;        {/* Header */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;오말순님의 약물 복용 리포트&lt;/Text&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;복용 중인 약물들의 상호작용을 확인하세요&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 상호작용 안전도 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.gaugeSection}&gt;&#10;            &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={180} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;            &lt;InteractionRiskGroups&#10;              interactable={true}&#10;              onGroupPress={handleGroupPress}&#10;              selectedGroup={selectedGroup}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 경고 문구 */}&#10;        &lt;InteractionWarning /&gt;&#10;&#10;        {/* 선택된 그룹의 상세 정보 표시 */}&#10;        {selectedGroup &amp;&amp; (&#10;          &lt;View style={styles.detailContainer}&gt;&#10;            &lt;Text style={styles.detailTitle}&gt;&#10;              {selectedGroup === 'risk' &amp;&amp; '위험 상호작용'}&#10;              {selectedGroup === 'safe' &amp;&amp; '안전 상호작용'}&#10;            &lt;/Text&gt;&#10;            {groupData[selectedGroup].map((item, index) =&gt; (&#10;              &lt;View key={index} style={styles.detailItem}&gt;&#10;                &lt;Text style={styles.detailItemName}&gt;{item.name}&lt;/Text&gt;&#10;                &lt;Text style={styles.detailItemDescription}&gt;{item.description}&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            ))}&#10;          &lt;/View&gt;&#10;        )}&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar activeIndex={1} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    paddingTop: 20,&#10;  },&#10;  header: {&#10;    marginBottom: 20,&#10;    marginTop: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 16,&#10;    color: Colors.mediumGray,&#10;  },&#10;  sectionContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  gaugeSection: {&#10;    alignItems: 'center',&#10;    marginBottom: 20,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    marginTop: 10,&#10;  },&#10;  detailContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  detailTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 16,&#10;  },&#10;  detailItem: {&#10;    marginBottom: 12,&#10;    paddingBottom: 12,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.border,&#10;  },&#10;  detailItemName: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  detailItemDescription: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/search-result.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/search-result.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, TextInput, StyleSheet, Text, TouchableOpacity, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;&#10;const MOCK_RESULTS = [&#10;  '아토르바스틴', '암로디핀', '로사르탄',&#10;  '아스피린', '탐스로신', '멜록시캄', '세티리진',&#10;  '타이레놀', '메트포르민',&#10;];&#10;&#10;export default function SearchResultScreen() {&#10;  const [search, setSearch] = useState('');&#10;&#10;  // 실제 검색 결과는 search 값에 따라 필터링해서 보여주면 됩니다.&#10;  const filtered = search&#10;    ? MOCK_RESULTS.filter(item =&gt; item.includes(search))&#10;    : MOCK_RESULTS;&#10;&#10;  return (&#10;    &lt;KeyboardAvoidingView&#10;      style={{ flex: 1, backgroundColor: '#fff' }}&#10;      behavior={Platform.OS === 'ios' ? 'padding' : undefined}&#10;    &gt;&#10;      {/* 상단 바 대체 */}&#10;      &lt;View style={styles.statusBar} /&gt;&#10;      {/* 검색창 */}&#10;      &lt;View style={styles.searchBarContainer}&gt;&#10;        &lt;TextInput&#10;          style={styles.searchBar}&#10;          placeholder=&quot;복용하시는 약알을 검색해보세요&quot;&#10;          placeholderTextColor=&quot;#B0B0B0&quot;&#10;          value={search}&#10;          onChangeText={setSearch}&#10;          returnKeyType=&quot;search&quot;&#10;          autoFocus&#10;        /&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;magnify&quot; size={28} color=&quot;#888&quot; style={styles.searchIcon} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 검색 결과 */}&#10;      &lt;ScrollView contentContainerStyle={styles.suggestionContainer} keyboardShouldPersistTaps=&quot;handled&quot;&gt;&#10;        &lt;View style={styles.suggestionWrap}&gt;&#10;          {filtered.length === 0 ? (&#10;            &lt;Text style={styles.noResultText}&gt;검색 결과가 없습니다.&lt;/Text&gt;&#10;          ) : (&#10;            filtered.map((item) =&gt; (&#10;              &lt;TouchableOpacity key={item} style={styles.suggestionButton}&gt;&#10;                &lt;Text style={styles.suggestionText}&gt;{item}&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            ))&#10;          )}&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;    &lt;/KeyboardAvoidingView&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  statusBar: {&#10;    height: 56,&#10;    backgroundColor: '#1877F2',&#10;    justifyContent: 'flex-end',&#10;  },&#10;  searchBarContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 16,&#10;    marginHorizontal: 16,&#10;    marginBottom: 8,&#10;  },&#10;  searchBar: {&#10;    flex: 1,&#10;    height: 48,&#10;    backgroundColor: '#F7F7F7',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 20,&#10;    fontSize: 16,&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    color: '#222',&#10;  },&#10;  searchIcon: {&#10;    position: 'absolute',&#10;    right: 20,&#10;    top: 10,&#10;  },&#10;  suggestionContainer: {&#10;    paddingHorizontal: 16,&#10;    paddingTop: 16,&#10;    flexGrow: 1,&#10;  },&#10;  suggestionWrap: {&#10;    flexDirection: 'row',&#10;    flexWrap: 'wrap',&#10;    gap: 12,&#10;    justifyContent: 'flex-start',&#10;  },&#10;  suggestionButton: {&#10;    borderWidth: 1.5,&#10;    borderColor: '#1877F2',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 18,&#10;    paddingVertical: 8,&#10;    marginRight: 8,&#10;    marginBottom: 12,&#10;    backgroundColor: '#fff',&#10;  },&#10;  suggestionText: {&#10;    color: '#1877F2',&#10;    fontSize: 16,&#10;    fontWeight: '500',&#10;  },&#10;  noResultText: {&#10;    color: '#888',&#10;    fontSize: 16,&#10;    marginTop: 32,&#10;    textAlign: 'center',&#10;    width: '100%',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/search.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/search.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, TextInput, StyleSheet, Text, TouchableOpacity, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const SUGGESTIONS = [&#10;  '아토르바스틴', '암로디핀', '로사르탄',&#10;  '아스피린', '탐스로신', '멜록시캄', '세티리진',&#10;  '타이레놀', '메트포르민',&#10;];&#10;&#10;export default function SearchScreen() {&#10;  const [search, setSearch] = useState('');&#10;&#10;  return (&#10;    &lt;KeyboardAvoidingView&#10;      style={{ flex: 1, backgroundColor: '#fff' }}&#10;      behavior={Platform.OS === 'ios' ? 'padding' : undefined}&#10;    &gt;&#10;      {/* 상단 바 대체 */}&#10;      &lt;View style={styles.statusBar} /&gt;&#10;      {/* 검색창 */}&#10;      &lt;View style={styles.searchBarContainer}&gt;&#10;        &lt;TextInput&#10;          style={styles.searchBar}&#10;          placeholder=&quot;복용하시는 약알을 검색해보세요&quot;&#10;          placeholderTextColor=&quot;#B0B0B0&quot;&#10;          value={search}&#10;          onChangeText={setSearch}&#10;          returnKeyType=&quot;search&quot;&#10;        /&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;magnify&quot; size={28} color=&quot;#888&quot; style={styles.searchIcon} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 추천 약물 */}&#10;      &lt;ScrollView contentContainerStyle={styles.suggestionContainer} keyboardShouldPersistTaps=&quot;handled&quot;&gt;&#10;        &lt;View style={styles.suggestionWrap}&gt;&#10;          {SUGGESTIONS.map((item) =&gt; (&#10;            &lt;TouchableOpacity key={item} style={styles.suggestionButton}&gt;&#10;              &lt;Text style={styles.suggestionText}&gt;{item}&lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          ))}&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;    &lt;/KeyboardAvoidingView&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  statusBar: {&#10;    height: 56,&#10;    backgroundColor: '#1877F2',&#10;    justifyContent: 'flex-end',&#10;  },&#10;  searchBarContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 16,&#10;    marginHorizontal: 16,&#10;    marginBottom: 8,&#10;  },&#10;  searchBar: {&#10;    flex: 1,&#10;    height: 48,&#10;    backgroundColor: '#F7F7F7',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 20,&#10;    fontSize: 16,&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    color: '#222',&#10;  },&#10;  searchIcon: {&#10;    position: 'absolute',&#10;    right: 20,&#10;    top: 10,&#10;  },&#10;  suggestionContainer: {&#10;    paddingHorizontal: 16,&#10;    paddingTop: 16,&#10;    flexGrow: 1,&#10;  },&#10;  suggestionWrap: {&#10;    flexDirection: 'row',&#10;    flexWrap: 'wrap',&#10;    gap: 12,&#10;    justifyContent: 'flex-start',&#10;  },&#10;  suggestionButton: {&#10;    borderWidth: 1.5,&#10;    borderColor: '#1877F2',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 18,&#10;    paddingVertical: 8,&#10;    marginRight: 8,&#10;    marginBottom: 12,&#10;    backgroundColor: '#fff',&#10;  },&#10;  suggestionText: {&#10;    color: '#1877F2',&#10;    fontSize: 16,&#10;    fontWeight: '500',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/BottomNavigationBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/BottomNavigationBar.tsx" />
              <option name="originalContent" value="import React, { useState, useRef } from 'react';&#10;import { View, StyleSheet, TouchableOpacity, Animated, Text } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import { useRouter } from 'expo-router';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const icons = [&#10;  'home',&#10;  'pill',&#10;  'plus',&#10;  'message-text',&#10;  'account-circle',&#10;];&#10;&#10;const labels = ['홈', '약물관리', '추가', '채팅', '내정보'];&#10;&#10;export default function BottomNavigationBar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;  const [isFloatingMenuOpen, setIsFloatingMenuOpen] = useState(false);&#10;  const backgroundAnimation = useRef(new Animated.Value(0)).current;&#10;&#10;  const toggleFloatingMenu = () =&gt; {&#10;    const isOpening = !isFloatingMenuOpen;&#10;    setIsFloatingMenuOpen(isOpening);&#10;    setIsFloatingMenuOpen(isOpening);&#10;    setIsFloatingMenuOpen(isOpening);&#10;    setIsFloatingMenuOpen(isOpening);&#10;&#10;    // 플로팅 버튼들 애니메이션&#10;    // 플로팅 버튼들 애니메이션&#10;    // 플로팅 버튼들 애니메이션&#10;    // 플로팅 버튼들 애니메이션&#10;    Animated.parallel([&#10;      Animated.timing(floatingAnimation1, {&#10;        toValue: isOpening ? 1 : 0,&#10;        duration: 200,&#10;        useNativeDriver: true,&#10;      }),&#10;      Animated.timing(floatingAnimation2, {&#10;        toValue: isOpening ? 1 : 0,&#10;        duration: 200,&#10;        useNativeDriver: true,&#10;      }),&#10;      Animated.timing(rotateAnimation, {&#10;        toValue: isOpening ? 1 : 0,&#10;        duration: 200,&#10;        useNativeDriver: true,&#10;      }),&#10;      Animated.timing(backgroundAnimation, {&#10;        toValue: isOpening ? 1 : 0,&#10;        duration: 200,&#10;    if (action === 'search') {&#10;        router.replace('/chat');&#10;      console.log('검색 버튼 클릭');&#10;    } else if (action === 'link') {&#10;        router.replace('/');&#10;      console.log('링크 버튼 클릭');&#10;    }&#10;        router.replace('/interaction');&#10;&#10;  const floatingButton1Style = {&#10;    transform: [&#10;      {&#10;        translateX: floatingAnimation1.interpolate({&#10;        router.replace('/chat');&#10;          outputRange: [0, -60], // 왼쪽으로 이동&#10;        }),&#10;        router.replace('/');&#10;      {&#10;        translateY: floatingAnimation1.interpolate({&#10;        router.replace('/interaction');&#10;          outputRange: [0, -100], // 위로 이동&#10;        }),&#10;      },&#10;      {&#10;        scale: floatingAnimation1.interpolate({&#10;        router.replace('/chat');&#10;          outputRange: [0.3, 1],&#10;        }),&#10;        router.replace('/myinfo');&#10;    ],&#10;    opacity: floatingAnimation1,&#10;  };&#10;&#10;  const floatingButton2Style = {&#10;    transform: [&#10;      {&#10;        translateX: floatingAnimation2.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: [0, 60], // 오른쪽으로 이동&#10;        }),&#10;      },&#10;      {&#10;        translateY: floatingAnimation2.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: [0, -100], // 위로 이동&#10;        }),&#10;      },&#10;      {&#10;        scale: floatingAnimation2.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: [0.3, 1],&#10;        }),&#10;      },&#10;    ],&#10;    opacity: floatingAnimation2,&#10;  };&#10;&#10;  const plusRotationStyle = {&#10;    transform: [&#10;      {&#10;        rotate: rotateAnimation.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: ['0deg', '45deg'],&#10;        }),&#10;      },&#10;    ],&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* 배경 오버레이 */}&#10;      {isFloatingMenuOpen &amp;&amp; (&#10;        &lt;Animated.View&#10;          style={[&#10;            styles.overlay,&#10;            {&#10;              opacity: backgroundAnimation, // Animated.Value로 페이드 인 효과 적용&#10;            },&#10;          ]}&#10;        &gt;&#10;          &lt;TouchableOpacity style={styles.overlayTouchable} activeOpacity={1} onPress={toggleFloatingMenu} /&gt;&#10;        &lt;/Animated.View&gt;&#10;      )}&#10;&#10;      &lt;View style={styles.container}&gt;&#10;        {icons.map((icon, idx) =&gt; {&#10;          const isActive = activeIndex === idx;&#10;          const isCenter = idx === 2;&#10;&#10;          if (isCenter) {&#10;            return (&#10;              &lt;View key={idx} style={styles.centerCircleWrapper}&gt;&#10;                &lt;TouchableOpacity&#10;                  style={[styles.centerCircle, isActive &amp;&amp; styles.centerCircleActive]}&#10;                  onPress={() =&gt; handleTabPress(idx)}&#10;                  activeOpacity={0.8}&#10;                  accessibilityLabel={`${labels[idx]} ���`}&#10;                  accessibilityRole=&quot;button&quot;&#10;                &gt;&#10;                  &lt;Animated.View style={plusRotationStyle}&gt;&#10;                    &lt;MaterialCommunityIcons&#10;                      name={icon}&#10;                      size={32}&#10;                      color={'#fff'}&#10;                    /&gt;&#10;                  &lt;/Animated.View&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;              &lt;/View&gt;&#10;            );&#10;          }&#10;&#10;          return (&#10;            &lt;TouchableOpacity&#10;              key={idx}&#10;              style={[styles.tab, isActive &amp;&amp; styles.activeTab]}&#10;              onPress={() =&gt; handleTabPress(idx)}&#10;              activeOpacity={0.6}&#10;              accessibilityLabel={`${labels[idx]} 탭`}&#10;              accessibilityRole=&quot;button&quot;&#10;            &gt;&#10;              &lt;MaterialCommunityIcons&#10;                name={icon}&#10;                size={26}&#10;                color={isActive ? Colors.navbarTabActive : Colors.navbarTabInactive}&#10;                style={[styles.icon, isActive &amp;&amp; styles.activeIcon]}&#10;              /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          );&#10;        })}&#10;&#10;        {showFloatingButtons &amp;&amp; (&#10;          &lt;&gt;&#10;        {isFloatingMenuOpen &amp;&amp; (&#10;            &lt;Animated.View style={[styles.floatingButtonContainer, styles.floatingButtonZ, floatingButton1Style]}&gt;&#10;              &lt;View style={styles.floatingButtonWrapper}&gt;&#10;                &lt;TouchableOpacity&#10;                  onPress={() =&gt; handleFloatingButtonPress('search')}&#10;                  style={[styles.centerCircle]}&#10;                  activeOpacity={0.7}&#10;                &gt;&#10;                  &lt;MaterialCommunityIcons name=&quot;magnify&quot; size={24} color=&quot;#fff&quot; /&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;              &lt;/View&gt;&#10;              &lt;Text style={styles.floatingButtonLabel}&gt;직접 입력&lt;/Text&gt;&#10;        {isFloatingMenuOpen &amp;&amp; (&#10;&#10;            {/* 링크 버튼과 라벨 */}&#10;            &lt;Animated.View style={[styles.floatingButtonContainer, styles.floatingButtonZ, floatingButton2Style]}&gt;&#10;              &lt;View style={styles.floatingButtonWrapper}&gt;&#10;                &lt;TouchableOpacity&#10;                  onPress={() =&gt; handleFloatingButtonPress('link')}&#10;                  style={[styles.centerCircle]}&#10;                  activeOpacity={0.7}&#10;                &gt;&#10;                  &lt;MaterialCommunityIcons name=&quot;link&quot; size={24} color=&quot;#fff&quot; /&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;        {isFloatingMenuOpen &amp;&amp; (&#10;              &lt;Text style={styles.floatingButtonLabel}&gt;처방전 불러오기&lt;/Text&gt;&#10;            &lt;/Animated.View&gt;&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/View&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;        {isFloatingMenuOpen &amp;&amp; (&#10;    backgroundColor: Colors.navbarBackground,&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: Colors.navbarShadow,&#10;    shadowOffset: { width: 0, height: -4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 12,&#10;    paddingBottom: 20,&#10;    paddingTop: 12,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-around',&#10;    zIndex: 101, // 네비게이션 바가 오버레이 위에 오도록 설정&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 10,&#10;    paddingHorizontal: 8,&#10;    borderRadius: 20,&#10;    marginHorizontal: 2,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: Colors.navbarTabActiveBg,&#10;    transform: [{ scale: 1.02 }],&#10;  },&#10;  icon: {&#10;    marginBottom: 6,&#10;  },&#10;  activeIcon: {&#10;    // 추가 스타일 없음&#10;  },&#10;  centerCircleWrapper: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingHorizontal: 8,&#10;  },&#10;  centerCircle: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 32,&#10;    backgroundColor: Colors.navbarCenterButton,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    shadowColor: Colors.navbarCenterButton,&#10;    shadowOffset: { width: 0, height: 8 },&#10;    shadowOpacity: 0.3,&#10;    shadowRadius: 16,&#10;    elevation: 12,&#10;    position: 'absolute',&#10;    top: -48,&#10;  },&#10;  centerCircleActive: {&#10;    backgroundColor: Colors.navbarCenterButtonActive,&#10;    transform: [{ scale: 1.05 }],&#10;    shadowOpacity: 0.4,&#10;  },&#10;  floatingButton: {&#10;    width: 56,&#10;    height: 56,&#10;    borderRadius: 28,&#10;    backgroundColor: Colors.primary,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 8,&#10;    shadowColor: Colors.primary,&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.3,&#10;    shadowRadius: 8,&#10;    // 원형 강조&#10;    borderWidth: 0,&#10;    padding: 0,&#10;  },&#10;  floatingButtonInner: {&#10;    width: 56,&#10;    height: 56,&#10;    borderRadius: 28,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    padding: 0,&#10;  },&#10;  overlay: {&#10;    position: 'absolute',&#10;    top: 0,&#10;    left: 0,&#10;    right: 0,&#10;    bottom: 0,&#10;    backgroundColor: 'rgba(0,0,0,0.4)',&#10;    zIndex: 99,&#10;  },&#10;  overlayTouchable: {&#10;    flex: 1,&#10;  },&#10;  floatingButtonZ: {&#10;    zIndex: 100,&#10;  },&#10;  floatingButtonContainer: {&#10;    position: 'absolute',&#10;    bottom: 80,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    zIndex: 20,&#10;  },&#10;  floatingButtonWrapper: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    // 버튼과 라벨 세로 정렬&#10;  },&#10;  floatingButtonLabel: {&#10;    marginTop: 4,&#10;    color: '#fff',&#10;    fontSize: 12,&#10;    fontWeight: '500',&#10;    textAlign: 'center',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React, { useState, useRef } from 'react';&#10;import { View, StyleSheet, TouchableOpacity, Animated, Text } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import { useRouter } from 'expo-router';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const icons = [&#10;  'home',&#10;  'pill',&#10;  'plus',&#10;  'message-text',&#10;  'account-circle',&#10;];&#10;&#10;const labels = ['홈', '약물관리', '추가', '채팅', '내정보'];&#10;&#10;export default function BottomNavigationBar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;  const [isFloatingMenuOpen, setIsFloatingMenuOpen] = useState(false);&#10;  const [showFloatingButtons, setShowFloatingButtons] = useState(false);&#10;  const floatingAnimation1 = useRef(new Animated.Value(0)).current;&#10;  const floatingAnimation2 = useRef(new Animated.Value(0)).current;&#10;  const rotateAnimation = useRef(new Animated.Value(0)).current;&#10;  const backgroundAnimation = useRef(new Animated.Value(0)).current;&#10;&#10;  const toggleFloatingMenu = () =&gt; {&#10;    const isOpening = !isFloatingMenuOpen;&#10;    // 애니메이션만 먼저 실행&#10;    Animated.parallel([&#10;      Animated.timing(floatingAnimation1, {&#10;        toValue: isOpening ? 1 : 0,&#10;        duration: 200,&#10;        useNativeDriver: true,&#10;      }),&#10;      Animated.timing(floatingAnimation2, {&#10;        toValue: isOpening ? 1 : 0,&#10;        duration: 200,&#10;        useNativeDriver: true,&#10;      }),&#10;      Animated.timing(rotateAnimation, {&#10;        toValue: isOpening ? 1 : 0,&#10;        duration: 200,&#10;        useNativeDriver: true,&#10;      }),&#10;      Animated.timing(backgroundAnimation, {&#10;        toValue: isOpening ? 1 : 0,&#10;        duration: 200,&#10;        useNativeDriver: true,&#10;      }),&#10;    ]).start(() =&gt; {&#10;      // 애니메이션이 끝난 후 상태 변경&#10;      setIsFloatingMenuOpen(isOpening);&#10;    });&#10;  };&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (isFloatingMenuOpen) {&#10;      setShowFloatingButtons(true);&#10;    } else {&#10;      // 200ms 후에 버튼 제거&#10;      const timeout = setTimeout(() =&gt; setShowFloatingButtons(false), 200);&#10;      return () =&gt; clearTimeout(timeout);&#10;    }&#10;  }, [isFloatingMenuOpen]);&#10;&#10;  const handleTabPress = async (idx: number) =&gt; {&#10;    if (onTabPress) onTabPress(idx);&#10;&#10;    // 플로팅 메뉴가 열려있으면 닫기&#10;    if (isFloatingMenuOpen &amp;&amp; idx !== 2) {&#10;      toggleFloatingMenu();&#10;    }&#10;&#10;    // 현재 활성 탭과 같은 탭을 누르면 아무것도 하지 않음&#10;    if (activeIndex === idx) return;&#10;&#10;    // 라우팅 로직&#10;    switch (idx) {&#10;      case 0:&#10;        router.push('/');&#10;        break;&#10;      case 1:&#10;        router.push('/interaction');&#10;        break;&#10;      case 2:&#10;        toggleFloatingMenu();&#10;        break;&#10;      case 3:&#10;        router.push('/chat');&#10;        break;&#10;      case 4:&#10;        router.push('/myinfo');&#10;        break;&#10;    }&#10;  };&#10;&#10;  const handleFloatingButtonPress = (action: 'search' | 'link') =&gt; {&#10;    toggleFloatingMenu();&#10;    // 여기에 각 버튼별 액션 구현&#10;    if (action === 'search') {&#10;      // 검색 기능 구현&#10;      console.log('검색 버튼 클릭');&#10;    } else if (action === 'link') {&#10;      // 링크 기능 구현&#10;      console.log('링크 버튼 클릭');&#10;    }&#10;  };&#10;&#10;  const floatingButton1Style = {&#10;    transform: [&#10;      {&#10;        translateX: floatingAnimation1.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: [0, -60], // 왼쪽으로 이동&#10;        }),&#10;      },&#10;      {&#10;        translateY: floatingAnimation1.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: [0, -100], // 위로 이동&#10;        }),&#10;      },&#10;      {&#10;        scale: floatingAnimation1.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: [0.3, 1],&#10;        }),&#10;      },&#10;    ],&#10;    opacity: floatingAnimation1,&#10;  };&#10;&#10;  const floatingButton2Style = {&#10;    transform: [&#10;      {&#10;        translateX: floatingAnimation2.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: [0, 60], // 오른쪽으로 이동&#10;        }),&#10;      },&#10;      {&#10;        translateY: floatingAnimation2.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: [0, -100], // 위로 이동&#10;        }),&#10;      },&#10;      {&#10;        scale: floatingAnimation2.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: [0.3, 1],&#10;        }),&#10;      },&#10;    ],&#10;    opacity: floatingAnimation2,&#10;  };&#10;&#10;  const plusRotationStyle = {&#10;    transform: [&#10;      {&#10;        rotate: rotateAnimation.interpolate({&#10;          inputRange: [0, 1],&#10;          outputRange: ['0deg', '45deg'],&#10;        }),&#10;      },&#10;    ],&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* 배경 오버레이 */}&#10;      {isFloatingMenuOpen &amp;&amp; (&#10;        &lt;Animated.View&#10;          style={[&#10;            styles.overlay,&#10;            {&#10;              opacity: backgroundAnimation, // Animated.Value로 페이드 인 효과 적용&#10;            },&#10;          ]}&#10;        &gt;&#10;          &lt;TouchableOpacity style={styles.overlayTouchable} activeOpacity={1} onPress={toggleFloatingMenu} /&gt;&#10;        &lt;/Animated.View&gt;&#10;      )}&#10;&#10;      &lt;View style={styles.container}&gt;&#10;        {icons.map((icon, idx) =&gt; {&#10;          const isActive = activeIndex === idx;&#10;          const isCenter = idx === 2;&#10;&#10;          if (isCenter) {&#10;            return (&#10;              &lt;View key={idx} style={styles.centerCircleWrapper}&gt;&#10;                &lt;TouchableOpacity&#10;                  style={[styles.centerCircle, isActive &amp;&amp; styles.centerCircleActive]}&#10;                  onPress={() =&gt; handleTabPress(idx)}&#10;                  activeOpacity={0.8}&#10;                  accessibilityLabel={`${labels[idx]} ���`}&#10;                  accessibilityRole=&quot;button&quot;&#10;                &gt;&#10;                  &lt;Animated.View style={plusRotationStyle}&gt;&#10;                    &lt;MaterialCommunityIcons&#10;                      name={icon}&#10;                      size={32}&#10;                      color={'#fff'}&#10;                    /&gt;&#10;                  &lt;/Animated.View&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;              &lt;/View&gt;&#10;            );&#10;          }&#10;&#10;          return (&#10;            &lt;TouchableOpacity&#10;              key={idx}&#10;              style={[styles.tab, isActive &amp;&amp; styles.activeTab]}&#10;              onPress={() =&gt; handleTabPress(idx)}&#10;              activeOpacity={0.6}&#10;              accessibilityLabel={`${labels[idx]} 탭`}&#10;              accessibilityRole=&quot;button&quot;&#10;            &gt;&#10;              &lt;MaterialCommunityIcons&#10;                name={icon}&#10;                size={26}&#10;                color={isActive ? Colors.navbarTabActive : Colors.navbarTabInactive}&#10;                style={[styles.icon, isActive &amp;&amp; styles.activeIcon]}&#10;              /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          );&#10;        })}&#10;&#10;        {showFloatingButtons &amp;&amp; (&#10;          &lt;&gt;&#10;            {/* 검색 버튼과 라벨 */}&#10;            &lt;Animated.View style={[styles.floatingButtonContainer, styles.floatingButtonZ, floatingButton1Style]}&gt;&#10;              &lt;View style={styles.floatingButtonWrapper}&gt;&#10;                &lt;TouchableOpacity&#10;                  onPress={() =&gt; handleFloatingButtonPress('search')}&#10;                  style={[styles.centerCircle]}&#10;                  activeOpacity={0.7}&#10;                &gt;&#10;                  &lt;MaterialCommunityIcons name=&quot;magnify&quot; size={24} color=&quot;#fff&quot; /&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;              &lt;/View&gt;&#10;              &lt;Text style={styles.floatingButtonLabel}&gt;직접 입력&lt;/Text&gt;&#10;            &lt;/Animated.View&gt;&#10;&#10;            {/* 링크 버튼과 라벨 */}&#10;            &lt;Animated.View style={[styles.floatingButtonContainer, styles.floatingButtonZ, floatingButton2Style]}&gt;&#10;              &lt;View style={styles.floatingButtonWrapper}&gt;&#10;                &lt;TouchableOpacity&#10;                  onPress={() =&gt; handleFloatingButtonPress('link')}&#10;                  style={[styles.centerCircle]}&#10;                  activeOpacity={0.7}&#10;                &gt;&#10;                  &lt;MaterialCommunityIcons name=&quot;link&quot; size={24} color=&quot;#fff&quot; /&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;              &lt;/View&gt;&#10;              &lt;Text style={styles.floatingButtonLabel}&gt;처방전 불러오기&lt;/Text&gt;&#10;            &lt;/Animated.View&gt;&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/View&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: Colors.navbarBackground,&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: Colors.navbarShadow,&#10;    shadowOffset: { width: 0, height: -4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 12,&#10;    paddingBottom: 20,&#10;    paddingTop: 12,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-around',&#10;    zIndex: 101, // 네비게이션 바가 오버레이 위에 오도록 설정&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 10,&#10;    paddingHorizontal: 8,&#10;    borderRadius: 20,&#10;    marginHorizontal: 2,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: Colors.navbarTabActiveBg,&#10;    transform: [{ scale: 1.02 }],&#10;  },&#10;  icon: {&#10;    marginBottom: 6,&#10;  },&#10;  activeIcon: {&#10;    // 추가 스타일 없음&#10;  },&#10;  centerCircleWrapper: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingHorizontal: 8,&#10;  },&#10;  centerCircle: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 32,&#10;    backgroundColor: Colors.navbarCenterButton,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    shadowColor: Colors.navbarCenterButton,&#10;    shadowOffset: { width: 0, height: 8 },&#10;    shadowOpacity: 0.3,&#10;    shadowRadius: 16,&#10;    elevation: 12,&#10;    position: 'absolute',&#10;    top: -48,&#10;  },&#10;  centerCircleActive: {&#10;    backgroundColor: Colors.navbarCenterButtonActive,&#10;    transform: [{ scale: 1.05 }],&#10;    shadowOpacity: 0.4,&#10;  },&#10;  floatingButton: {&#10;    width: 56,&#10;    height: 56,&#10;    borderRadius: 28,&#10;    backgroundColor: Colors.primary,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 8,&#10;    shadowColor: Colors.primary,&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.3,&#10;    shadowRadius: 8,&#10;    // 원형 강조&#10;    borderWidth: 0,&#10;    padding: 0,&#10;  },&#10;  floatingButtonInner: {&#10;    width: 56,&#10;    height: 56,&#10;    borderRadius: 28,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    padding: 0,&#10;  },&#10;  overlay: {&#10;    position: 'absolute',&#10;    top: 0,&#10;    left: 0,&#10;    right: 0,&#10;    bottom: 0,&#10;    backgroundColor: 'rgba(0,0,0,0.4)',&#10;    zIndex: 99,&#10;  },&#10;  overlayTouchable: {&#10;    flex: 1,&#10;  },&#10;  floatingButtonZ: {&#10;    zIndex: 100,&#10;  },&#10;  floatingButtonContainer: {&#10;    position: 'absolute',&#10;    bottom: 80,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    zIndex: 20,&#10;  },&#10;  floatingButtonWrapper: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    // 버튼과 라벨 세로 정렬&#10;  },&#10;  floatingButtonLabel: {&#10;    marginTop: 4,&#10;    color: '#fff',&#10;    fontSize: 12,&#10;    fontWeight: '500',&#10;    textAlign: 'center',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CustomNavbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CustomNavbar.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;&#10;// 네비바 아이콘 예시 (실제 경로에 맞게 수정 필요)&#10;const icons = [&#10;  require('../assets/images/home.png'),&#10;  require('../assets/images/search.png'),&#10;  require('../assets/images/plus.png'),&#10;  require('../assets/images/alert.png'),&#10;  require('../assets/images/user.png'),&#10;];&#10;&#10;const labels = ['홈', '검색', '추가', '알림', '내정보'];&#10;&#10;export default function CustomNavbar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; (&#10;        &lt;TouchableOpacity&#10;          key={idx}&#10;          style={[styles.tab, activeIndex === idx &amp;&amp; styles.activeTab]}&#10;          onPress={() =&gt; {&#10;            if (onTabPress) onTabPress(idx);&#10;            // router.push(...) 등 라우팅 처리 가능&#10;          }}&#10;          activeOpacity={0.7}&#10;        &gt;&#10;          &lt;Image source={icon} style={[styles.icon, activeIndex === idx &amp;&amp; styles.activeIcon]} /&gt;&#10;          &lt;Text style={[styles.label, activeIndex === idx &amp;&amp; styles.activeLabel]}&gt;{labels[idx]}&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      ))}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: '#fff',&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: -2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 8,&#10;    paddingBottom: 12,&#10;    paddingTop: 8,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 4,&#10;    borderRadius: 16,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: '#F5F5F5',&#10;  },&#10;  icon: {&#10;    width: 28,&#10;    height: 28,&#10;    marginBottom: 2,&#10;    opacity: 0.7,&#10;  },&#10;  activeIcon: {&#10;    opacity: 1,&#10;  },&#10;  label: {&#10;    fontSize: 12,&#10;    color: '#888',&#10;    fontWeight: '500',&#10;  },&#10;  activeLabel: {&#10;    color: '#222',&#10;    fontWeight: 'bold',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/NavigationButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/NavigationButton.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/PrimaryButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/PrimaryButton.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';&#10;&#10;interface PrimaryButtonProps {&#10;  title: string;&#10;  onPress: () =&gt; void;&#10;  backgroundColor?: string;&#10;  textColor?: string;&#10;  width?: number | string;&#10;  disabled?: boolean;&#10;  style?: ViewStyle;&#10;  textStyle?: TextStyle;&#10;}&#10;&#10;export default function PrimaryButton({&#10;  title,&#10;  onPress,&#10;  backgroundColor = '#6366F1',&#10;  textColor = '#FFFFFF',&#10;  width = '100%',&#10;  disabled = false,&#10;  style,&#10;  textStyle&#10;}: PrimaryButtonProps) {&#10;  return (&#10;    &lt;TouchableOpacity&#10;      style={[&#10;        styles.button,&#10;        {&#10;          backgroundColor: disabled ? '#E5E7EB' : backgroundColor,&#10;          width: width,&#10;        },&#10;        style&#10;      ]}&#10;      onPress={onPress}&#10;      disabled={disabled}&#10;      activeOpacity={0.8}&#10;    &gt;&#10;      &lt;Text&#10;        style={[&#10;          styles.buttonText,&#10;          {&#10;            color: disabled ? '#9CA3AF' : textColor,&#10;          },&#10;          textStyle&#10;        ]}&#10;      &gt;&#10;        {title}&#10;      &lt;/Text&gt;&#10;    &lt;/TouchableOpacity&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  button: {&#10;    height: 54,&#10;    borderRadius: 27,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 3,&#10;    shadowColor: '#000',&#10;    shadowOffset: {&#10;      width: 0,&#10;      height: 2,&#10;    },&#10;    shadowOpacity: 0.25,&#10;    shadowRadius: 3.84,&#10;  },&#10;  buttonText: {&#10;    fontSize: 18,&#10;    fontWeight: '600',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle, DimensionValue } from 'react-native';&#10;&#10;interface PrimaryButtonProps {&#10;  title: string;&#10;  onPress: () =&gt; void;&#10;  backgroundColor?: string;&#10;  textColor?: string;&#10;  width?: DimensionValue;&#10;  disabled?: boolean;&#10;  style?: ViewStyle;&#10;  textStyle?: TextStyle;&#10;}&#10;&#10;export default function PrimaryButton({&#10;  title,&#10;  onPress,&#10;  backgroundColor = '#6366F1',&#10;  textColor = '#FFFFFF',&#10;  width = '100%',&#10;  disabled = false,&#10;  style,&#10;  textStyle&#10;}: PrimaryButtonProps) {&#10;  return (&#10;    &lt;TouchableOpacity&#10;      style={[&#10;        styles.button,&#10;        {&#10;          backgroundColor: disabled ? '#E5E7EB' : backgroundColor,&#10;          width: width,&#10;        },&#10;        style&#10;      ]}&#10;      onPress={onPress}&#10;      disabled={disabled}&#10;      activeOpacity={0.8}&#10;    &gt;&#10;      &lt;Text&#10;        style={[&#10;          styles.buttonText,&#10;          {&#10;            color: disabled ? '#9CA3AF' : textColor,&#10;          },&#10;          textStyle&#10;        ]}&#10;      &gt;&#10;        {title}&#10;      &lt;/Text&gt;&#10;    &lt;/TouchableOpacity&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  button: {&#10;    height: 54,&#10;    borderRadius: 27,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 3,&#10;    shadowColor: '#000',&#10;    shadowOffset: {&#10;      width: 0,&#10;      height: 2,&#10;    },&#10;    shadowOpacity: 0.25,&#10;    shadowRadius: 3.84,&#10;  },&#10;  buttonText: {&#10;    fontSize: 18,&#10;    fontWeight: '600',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/SearchBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/SearchBar.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, TextInput, StyleSheet, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function SearchBar({ value, onChangeText, placeholder = '복용하시는 약을 등록해보세요' }: {&#10;  value?: string;&#10;  onChangeText?: (text: string) =&gt; void;&#10;  placeholder?: string;&#10;}) {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Image&#10;        source={{ uri: 'https://img.icons8.com/ios-filled/50/888888/search--v1.png' }}&#10;        style={styles.icon}&#10;        resizeMode=&quot;contain&quot;&#10;      /&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder={placeholder}&#10;        placeholderTextColor={Colors.mediumGray}&#10;        value={value}&#10;        onChangeText={onChangeText}&#10;        underlineColorAndroid=&quot;transparent&quot;&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#F5F6FA',&#10;    borderRadius: 16,&#10;    paddingHorizontal: 14,&#10;    paddingVertical: 10,&#10;    marginVertical: 8,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  icon: {&#10;    width: 22,&#10;    height: 22,&#10;    marginRight: 8,&#10;    tintColor: '#888',&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    fontSize: 16,&#10;    color: '#222',&#10;    paddingVertical: 0,&#10;    backgroundColor: 'transparent',&#10;  },&#10;});&#10;&#10;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, TextInput, StyleSheet, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function SearchBar({ value, onChangeText, placeholder = '복용하시는 약을 등록해보세요' }: {&#10;  value?: string;&#10;  onChangeText?: (text: string) =&gt; void;&#10;  placeholder?: string;&#10;}) {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Image&#10;        source={{ uri: 'https://img.icons8.com/ios-filled/50/888888/search--v1.png' }}&#10;        style={styles.icon}&#10;        resizeMode=&quot;contain&quot;&#10;      /&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder={placeholder}&#10;        placeholderTextColor={Colors.mediumGray}&#10;        value={value}&#10;        onChangeText={onChangeText}&#10;        underlineColorAndroid=&quot;transparent&quot;&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#F5F6FA',&#10;    borderRadius: 16,&#10;    paddingHorizontal: 14,&#10;    paddingVertical: 10,&#10;    marginVertical: 8,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  icon: {&#10;    width: 22,&#10;    height: 22,&#10;    marginRight: 8,&#10;    tintColor: '#888',&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    fontSize: 16,&#10;    color: '#222',&#10;    paddingVertical: 0,&#10;    backgroundColor: 'transparent',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>