<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/_layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/_layout.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from &quot;react&quot;;&#10;import { Stack, useRouter, useSegments } from &quot;expo-router&quot;;&#10;import { View, ActivityIndicator } from &quot;react-native&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import { DevModeProvider } from &quot;@/contexts/DevModeContext&quot;;&#10;const ONBOARDING_COMPLETED_KEY = &quot;onboarding_completed&quot;;&#10;&#10;function RootLayoutNav() {&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [showOnboarding, setShowOnboarding] = useState(false);&#10;  const segments = useSegments();&#10;  const router = useRouter();&#10;&#10;  const checkOnboardingStatus = async () =&gt; {&#10;    try {&#10;      const onboardingCompleted = await AsyncStorage.getItem(ONBOARDING_COMPLETED_KEY);&#10;      const shouldShowOnboarding = onboardingCompleted !== &quot;true&quot;;&#10;      setShowOnboarding(shouldShowOnboarding);&#10;&#10;      // 온보딩 상태에 따라 네비게이션&#10;      if (shouldShowOnboarding &amp;&amp; segments[0] !== &quot;onboarding&quot;) {&#10;        router.replace(&quot;/onboarding&quot;);&#10;      } else if (!shouldShowOnboarding &amp;&amp; segments[0] === &quot;onboarding&quot;) {&#10;        router.replace(&quot;/&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error checking onboarding status:&quot;, error);&#10;      setShowOnboarding(true);&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    checkOnboardingStatus();&#10;  }, []);&#10;&#10;  // AsyncStorage 변경을 감지하기 위한 interval&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(checkOnboardingStatus, 1000);&#10;    return () =&gt; clearInterval(interval);&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;View&#10;        style={{&#10;          flex: 1,&#10;          justifyContent: &quot;center&quot;,&#10;          alignItems: &quot;center&quot;,&#10;          backgroundColor: Colors.background,&#10;        }}&#10;      &gt;&#10;        &lt;ActivityIndicator size=&quot;large&quot; color={Colors.primary} /&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;Stack screenOptions={{&#10;      headerShown: false,&#10;      animation: &quot;none&quot;,&#10;      presentation: &quot;card&quot;,&#10;      animationDuration: 0,&#10;      gestureEnabled: false&#10;    }}&gt;&#10;      &lt;Stack.Screen name=&quot;onboarding&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;index&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;chat&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;interaction&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;myinfo&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;family/[id]&quot; /&gt;&#10;    &lt;/Stack&gt;&#10;  );&#10;}&#10;&#10;export default function RootLayout() {&#10;  return (&#10;    &lt;DevModeProvider&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from &quot;react&quot;;&#10;import { Stack, useRouter, useSegments } from &quot;expo-router&quot;;&#10;import { View, ActivityIndicator } from &quot;react-native&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import { DevModeProvider } from &quot;@/contexts/DevModeContext&quot;;&#10;import { FamilyDataProvider } from '@/contexts/FamilyDataContext';&#10;&#10;const ONBOARDING_COMPLETED_KEY = &quot;onboarding_completed&quot;;&#10;&#10;function RootLayoutNav() {&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [showOnboarding, setShowOnboarding] = useState(false);&#10;  const segments = useSegments();&#10;  const router = useRouter();&#10;&#10;  const checkOnboardingStatus = async () =&gt; {&#10;    try {&#10;      const onboardingCompleted = await AsyncStorage.getItem(ONBOARDING_COMPLETED_KEY);&#10;      const shouldShowOnboarding = onboardingCompleted !== &quot;true&quot;;&#10;      setShowOnboarding(shouldShowOnboarding);&#10;&#10;      // 온보딩 상태에 따라 네비게이션&#10;      if (shouldShowOnboarding &amp;&amp; segments[0] !== &quot;onboarding&quot;) {&#10;        router.replace(&quot;/onboarding&quot;);&#10;      } else if (!shouldShowOnboarding &amp;&amp; segments[0] === &quot;onboarding&quot;) {&#10;        router.replace(&quot;/&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error checking onboarding status:&quot;, error);&#10;      setShowOnboarding(true);&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    checkOnboardingStatus();&#10;  }, []);&#10;&#10;  // AsyncStorage 변경을 감지하기 위한 interval&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(checkOnboardingStatus, 1000);&#10;    return () =&gt; clearInterval(interval);&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;View&#10;        style={{&#10;          flex: 1,&#10;          justifyContent: &quot;center&quot;,&#10;          alignItems: &quot;center&quot;,&#10;          backgroundColor: Colors.background,&#10;        }}&#10;      &gt;&#10;        &lt;ActivityIndicator size=&quot;large&quot; color={Colors.primary} /&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;Stack screenOptions={{&#10;      headerShown: false,&#10;      animation: &quot;none&quot;,&#10;      presentation: &quot;card&quot;,&#10;      animationDuration: 0,&#10;      gestureEnabled: false&#10;    }}&gt;&#10;      &lt;Stack.Screen name=&quot;onboarding&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;index&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;chat&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;interaction&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;myinfo&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;family/[id]&quot; /&gt;&#10;    &lt;/Stack&gt;&#10;  );&#10;}&#10;&#10;export default function RootLayout() {&#10;  return (&#10;    &lt;DevModeProvider&gt;&#10;      &lt;FamilyDataProvider&gt;&#10;        &lt;RootLayoutNav /&gt;&#10;      &lt;/FamilyDataProvider&gt;&#10;    &lt;/DevModeProvider&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/add-alarm.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/add-alarm.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { View, Text, TextInput, StyleSheet, TouchableOpacity, Platform } from 'react-native';&#10;import DateTimePicker from '@react-native-community/datetimepicker';&#10;import { useRouter } from 'expo-router';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import CustomSwitch from '../components/CustomSwitch';&#10;import { useFamilyData } from '@/contexts/FamilyDataContext';&#10;&#10;export default function AddAlarmScreen() {&#10;  const [medicine, setMedicine] = useState('');&#10;  const [time, setTime] = useState(new Date());&#10;  const [showPicker, setShowPicker] = useState(false);&#10;  const [repeat, setRepeat] = useState('안 함');&#10;  const [sound, setSound] = useState('종소리');&#10;  const [snooze, setSnooze] = useState(true);&#10;  const router = useRouter();&#10;  const { updateMedicationEnabled } = useFamilyData();&#10;&#10;  const onChange = (event: any, selectedDate?: Date) =&gt; {&#10;    setShowPicker(Platform.OS === 'ios');&#10;    if (selectedDate) setTime(selectedDate);&#10;  };&#10;&#10;  const handleSave = () =&gt; {&#10;    // 예시: 본인 id '1', 실제 앱에서는 로그인/선택된 사용자 id 사용&#10;    updateMedicationEnabled('1', medicine, snooze);&#10;    router.back();&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* 상단 바 */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()} hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}&gt;&#10;          &lt;MaterialCommunityIcons name=&quot;chevron-left&quot; size={32} color=&quot;#1877F2&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;알림 추가&lt;/Text&gt;&#10;        &lt;View style={{ width: 32 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 약 이름 입력 */}&#10;      &lt;Text style={styles.label}&gt;약 이름&lt;/Text&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder=&quot;약 이름을 입력하세요&quot;&#10;        value={medicine}&#10;        onChangeText={setMedicine}&#10;      /&gt;&#10;      {/* 알림 시간 설정 */}&#10;      &lt;Text style={styles.label}&gt;알림 시간&lt;/Text&gt;&#10;      &lt;TouchableOpacity style={styles.timeInput} onPress={() =&gt; setShowPicker(true)}&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;clock-outline&quot; size={24} color=&quot;#1877F2&quot; /&gt;&#10;        &lt;Text style={styles.timeText}&gt;{time.getHours().toString().padStart(2, '0')}:{time.getMinutes().toString().padStart(2, '0')}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      {showPicker &amp;&amp; (&#10;        &lt;DateTimePicker&#10;          value={time}&#10;          mode=&quot;time&quot;&#10;          is24Hour={true}&#10;          display=&quot;spinner&quot;&#10;          onChange={onChange}&#10;        /&gt;&#10;      )}&#10;      {/* group 974 스타일의 알림 옵션 */}&#10;      &lt;View style={styles.optionGroupBoxImproved}&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;반복&lt;/Text&gt;&#10;          &lt;Text style={styles.optionValueDisabledImproved}&gt;{repeat}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.dividerImproved} /&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;사운드&lt;/Text&gt;&#10;          &lt;Text style={styles.optionValueImproved}&gt;{sound}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.dividerImproved} /&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;다시 알림&lt;/Text&gt;&#10;          &lt;CustomSwitch&#10;            value={snooze}&#10;            onValueChange={setSnooze}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;      {/* 저장 버튼 */}&#10;      &lt;TouchableOpacity style={styles.saveButton} onPress={handleSave}&gt;&#10;        &lt;Text style={styles.saveButtonText}&gt;저장&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 24,&#10;    paddingTop: 48,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 32,&#10;  },&#10;  headerTitle: {&#10;    flex: 1,&#10;    textAlign: 'center',&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#1877F2',&#10;  },&#10;  label: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    marginBottom: 8,&#10;    marginTop: 16,&#10;    color: '#222',&#10;  },&#10;  input: {&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    borderRadius: 12,&#10;    padding: 14,&#10;    fontSize: 16,&#10;    backgroundColor: '#F7F7F7',&#10;    marginBottom: 8,&#10;  },&#10;  timeInput: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    borderRadius: 12,&#10;    padding: 14,&#10;    backgroundColor: '#F7F7F7',&#10;    marginBottom: 8,&#10;    width: 140,&#10;  },&#10;  timeText: {&#10;    fontSize: 18,&#10;    marginLeft: 10,&#10;    color: '#1877F2',&#10;    fontWeight: '600',&#10;  },&#10;  optionGroupBoxImproved: {&#10;    marginTop: 24,&#10;    borderRadius: 12,&#10;    overflow: 'hidden',&#10;    backgroundColor: '#fff',&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.04,&#10;    shadowRadius: 4,&#10;    elevation: 1,&#10;  },&#10;  optionRowImproved: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingVertical: 14,&#10;    paddingHorizontal: 18,&#10;    backgroundColor: '#fff',&#10;  },&#10;  optionLabelImproved: {&#10;    fontSize: 16,&#10;    color: '#222',&#10;    fontWeight: '400',&#10;  },&#10;  optionValueImproved: {&#10;    fontSize: 16,&#10;    color: '#1877F2',&#10;    fontWeight: '500',&#10;  },&#10;  optionValueDisabledImproved: {&#10;    fontSize: 16,&#10;    color: '#B0B0B0',&#10;    fontWeight: '400',&#10;  },&#10;  dividerImproved: {&#10;    height: 1,&#10;    backgroundColor: '#F0F1F3',&#10;    marginLeft: 18,&#10;    marginRight: 18,&#10;  },&#10;  saveButton: {&#10;    marginTop: 32,&#10;    backgroundColor: '#1877F2',&#10;    borderRadius: 12,&#10;    paddingVertical: 14,&#10;    alignItems: 'center',&#10;  },&#10;  saveButtonText: {&#10;    color: '#fff',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, TextInput, StyleSheet, TouchableOpacity, Platform } from 'react-native';&#10;import DateTimePicker from '@react-native-community/datetimepicker';&#10;import { useRouter } from 'expo-router';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import CustomSwitch from '../components/CustomSwitch';&#10;import { useFamilyData, FamilyDataContextType } from '@/contexts/FamilyDataContext';&#10;&#10;export default function AddAlarmScreen() {&#10;  const [medicine, setMedicine] = useState('');&#10;  const [time, setTime] = useState(new Date());&#10;  const [showPicker, setShowPicker] = useState(false);&#10;  const [repeat, setRepeat] = useState('안 함');&#10;  const [sound, setSound] = useState('종소리');&#10;  const [snooze, setSnooze] = useState(true);&#10;  const router = useRouter();&#10;  const { updateMedicationEnabled } = useFamilyData() as FamilyDataContextType;&#10;&#10;  const onChange = (event: any, selectedDate?: Date) =&gt; {&#10;    setShowPicker(Platform.OS === 'ios');&#10;    if (selectedDate) setTime(selectedDate);&#10;  };&#10;&#10;  const handleSave = () =&gt; {&#10;    // 예시: 본인 id '1', 실제 앱에서는 로그인/선택된 사용자 id 사용&#10;    updateMedicationEnabled('1', medicine, snooze);&#10;    router.back();&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* 상단 바 */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()} hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}&gt;&#10;          &lt;MaterialCommunityIcons name=&quot;chevron-left&quot; size={32} color=&quot;#1877F2&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;알림 추가&lt;/Text&gt;&#10;        &lt;View style={{ width: 32 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 약 이름 입력 */}&#10;      &lt;Text style={styles.label}&gt;약 이름&lt;/Text&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder=&quot;약 이름을 입력하세요&quot;&#10;        value={medicine}&#10;        onChangeText={setMedicine}&#10;      /&gt;&#10;      {/* 알림 시간 설정 */}&#10;      &lt;Text style={styles.label}&gt;알림 시간&lt;/Text&gt;&#10;      &lt;TouchableOpacity style={styles.timeInput} onPress={() =&gt; setShowPicker(true)}&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;clock-outline&quot; size={24} color=&quot;#1877F2&quot; /&gt;&#10;        &lt;Text style={styles.timeText}&gt;{time.getHours().toString().padStart(2, '0')}:{time.getMinutes().toString().padStart(2, '0')}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      {showPicker &amp;&amp; (&#10;        &lt;DateTimePicker&#10;          value={time}&#10;          mode=&quot;time&quot;&#10;          is24Hour={true}&#10;          display=&quot;spinner&quot;&#10;          onChange={onChange}&#10;        /&gt;&#10;      )}&#10;      {/* group 974 스타일의 알림 옵션 */}&#10;      &lt;View style={styles.optionGroupBoxImproved}&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;반복&lt;/Text&gt;&#10;          &lt;Text style={styles.optionValueDisabledImproved}&gt;{repeat}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.dividerImproved} /&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;사운드&lt;/Text&gt;&#10;          &lt;Text style={styles.optionValueImproved}&gt;{sound}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.dividerImproved} /&gt;&#10;        &lt;View style={styles.optionRowImproved}&gt;&#10;          &lt;Text style={styles.optionLabelImproved}&gt;다시 알림&lt;/Text&gt;&#10;          &lt;CustomSwitch&#10;            value={snooze}&#10;            onValueChange={setSnooze}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;      {/* 저장 버튼 */}&#10;      &lt;TouchableOpacity style={styles.saveButton} onPress={handleSave}&gt;&#10;        &lt;Text style={styles.saveButtonText}&gt;저장&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 24,&#10;    paddingTop: 48,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 32,&#10;  },&#10;  headerTitle: {&#10;    flex: 1,&#10;    textAlign: 'center',&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#1877F2',&#10;  },&#10;  label: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    marginBottom: 8,&#10;    marginTop: 16,&#10;    color: '#222',&#10;  },&#10;  input: {&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    borderRadius: 12,&#10;    padding: 14,&#10;    fontSize: 16,&#10;    backgroundColor: '#F7F7F7',&#10;    marginBottom: 8,&#10;  },&#10;  timeInput: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    borderRadius: 12,&#10;    padding: 14,&#10;    backgroundColor: '#F7F7F7',&#10;    marginBottom: 8,&#10;    width: 140,&#10;  },&#10;  timeText: {&#10;    fontSize: 18,&#10;    marginLeft: 10,&#10;    color: '#1877F2',&#10;    fontWeight: '600',&#10;  },&#10;  optionGroupBoxImproved: {&#10;    marginTop: 24,&#10;    borderRadius: 12,&#10;    overflow: 'hidden',&#10;    backgroundColor: '#fff',&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.04,&#10;    shadowRadius: 4,&#10;    elevation: 1,&#10;  },&#10;  optionRowImproved: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingVertical: 14,&#10;    paddingHorizontal: 18,&#10;    backgroundColor: '#fff',&#10;  },&#10;  optionLabelImproved: {&#10;    fontSize: 16,&#10;    color: '#222',&#10;    fontWeight: '400',&#10;  },&#10;  optionValueImproved: {&#10;    fontSize: 16,&#10;    color: '#1877F2',&#10;    fontWeight: '500',&#10;  },&#10;  optionValueDisabledImproved: {&#10;    fontSize: 16,&#10;    color: '#B0B0B0',&#10;    fontWeight: '400',&#10;  },&#10;  dividerImproved: {&#10;    height: 1,&#10;    backgroundColor: '#F0F1F3',&#10;    marginLeft: 18,&#10;    marginRight: 18,&#10;  },&#10;  saveButton: {&#10;    marginTop: 32,&#10;    backgroundColor: '#1877F2',&#10;    borderRadius: 12,&#10;    paddingVertical: 14,&#10;    alignItems: 'center',&#10;  },&#10;  saveButtonText: {&#10;    color: '#fff',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/index.tsx" />
              <option name="originalContent" value="import React, { useEffect, useRef, useState } from 'react';&#10;import { Text, View, ScrollView, StyleSheet, Animated, TouchableOpacity } from &quot;react-native&quot;;&#10;import InteractionRiskGroups from &quot;../components/InteractionRiskGroups&quot;;&#10;import CircularGauge from &quot;../components/CircularGauge&quot;;&#10;import CalendarComponent from &quot;../components/CalendarComponent&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import BottomNavigationBar from &quot;../components/BottomNavigationBar&quot;;&#10;import SearchBar from '../components/SearchBar';&#10;import { useSafeAreaInsets } from 'react-native-safe-area-context';&#10;import * as Haptics from 'expo-haptics';&#10;import { INTERACTION_DATA } from &quot;@/constants/InteractionData&quot;;&#10;import { FAMILY_DATA } from &quot;@/constants/FamilyData&quot;;&#10;import FamilyGroup from &quot;@/components/FamilyGroup&quot;;&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;&#10;// Module-level variable to track if animation has run once per session&#10;let hasAnimatedOnce = false;&#10;&#10;// Animated component for staggered entrance&#10;const AnimatedSection = ({ children, index, shouldAnimate }: { children: React.ReactNode, index: number, shouldAnimate: boolean }) =&gt; {&#10;    const fadeAnim = useRef(new Animated.Value(0)).current;&#10;    const slideAnim = useRef(new Animated.Value(30)).current;&#10;&#10;    useEffect(() =&gt; {&#10;        if (shouldAnimate) {&#10;            Animated.timing(fadeAnim, {&#10;                toValue: 1,&#10;                duration: 600,&#10;                delay: index * 150,&#10;                useNativeDriver: true,&#10;            }).start();&#10;            Animated.timing(slideAnim, {&#10;                toValue: 0,&#10;                duration: 600,&#10;                delay: index * 150,&#10;                useNativeDriver: true,&#10;            }).start();&#10;        } else {&#10;            fadeAnim.setValue(1);&#10;            slideAnim.setValue(0);&#10;        }&#10;    }, [shouldAnimate, index]);&#10;&#10;    return (&#10;        &lt;Animated.View style={{ opacity: fadeAnim, transform: [{ translateY: slideAnim }] }}&gt;&#10;            {children}&#10;        &lt;/Animated.View&gt;&#10;    );&#10;};&#10;&#10;export default function Index() {&#10;  const insets = useSafeAreaInsets();&#10;  const [selectedId, setSelectedId] = useState&lt;string | null&gt;(null);&#10;&#10;  // 선택된 가족 ID를 AsyncStorage에서 불러오기&#10;  useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;      const savedId = await AsyncStorage.getItem('selected_family_id');&#10;      if (savedId) setSelectedId(savedId);&#10;      else setSelectedId(FAMILY_DATA[1]?.id || null);&#10;    })();&#10;  }, []);&#10;&#10;  // This effect runs only once when the component mounts for the first time in the app session.&#10;  // It sets the flag to true, so subsequent mounts/re-renders won't trigger the animation.&#10;  useEffect(() =&gt; {&#10;    if (!hasAnimatedOnce) {&#10;        hasAnimatedOnce = true;&#10;    }&#10;  }, []);&#10;&#10;  const onQuickActionPress = (action: string) =&gt; {&#10;    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);&#10;    // Add navigation logic here based on the action&#10;    console.log(action, 'pressed');&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 120, paddingTop: insets.top + 10 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;AnimatedSection index={0} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.header}&gt;&#10;                &lt;Text style={styles.headerTitle}&gt;PillLink&lt;/Text&gt;&#10;                &lt;View style={styles.headerIcons}&gt;&#10;                    {/* 상단 프로필 아바타 삭제됨 */}&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Search Bar */}&#10;        &lt;AnimatedSection index={1} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;SearchBar /&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Greeting Text */}&#10;        &lt;AnimatedSection index={2} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.greetingContainer}&gt;&#10;            &lt;Text style={styles.greetingText}&gt;&#10;                안녕하세요, &lt;Text style={styles.greetingHighlight}&gt;유은정님!&lt;/Text&gt;&#10;            &lt;/Text&gt;&#10;            &lt;Text style={styles.greetingSubtext}&gt;&#10;                오늘도 건강한 하루 되세요 ✨&#10;            &lt;/Text&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Quick Actions */}&#10;        &lt;AnimatedSection index={3} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.quickActionsContainer}&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('History')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;복용 기록&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('Settings')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;⏰&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;알림 설정&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('Stats')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;통계 보기&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Calendar Section */}&#10;        &lt;AnimatedSection index={4} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;CalendarComponent /&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Interaction Risk Section */}&#10;        &lt;AnimatedSection index={5} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.sectionContainer}&gt;&#10;                &lt;View style={styles.sectionHeader}&gt;&#10;                    &lt;Text style={styles.sectionTitle}&gt;상호작용 안전도&lt;/Text&gt;&#10;                    &lt;Text style={styles.sectionSubtitle}&gt;현재 복용 중인 약물들의 안전성&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={styles.card}&gt;&#10;                    &lt;View style={styles.interactionRiskContent}&gt;&#10;                        &lt;View style={styles.circularGaugeContainer}&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;/View&gt;&#10;                        &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;                        &lt;InteractionRiskGroups /&gt;&#10;                        &lt;/View&gt;&#10;                    &lt;/View&gt;&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Health News Section */}&#10;        &lt;AnimatedSection index={6} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.sectionContainer}&gt;&#10;                &lt;View style={styles.sectionHeader}&gt;&#10;                    &lt;Text style={styles.sectionTitle}&gt;건강 뉴스&lt;/Text&gt;&#10;                    &lt;Text style={styles.sectionSubtitle}&gt;��은정님을 위한 맞춤 정보&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;TouchableOpacity style={styles.card} activeOpacity={0.8}&gt;&#10;                    &lt;View style={styles.newsContentWrapper}&gt;&#10;                        &lt;View style={styles.newsImagePlaceholder}&gt;&#10;                            &lt;Text style={styles.newsEmoji}&gt;&lt;/Text&gt;&#10;                        &lt;/View&gt;&#10;                        &lt;View style={styles.newsContent}&gt;&#10;                            &lt;Text style={styles.newsTitle}&gt;겨울철 감기 예방을 위한 영양제 복용법&lt;/Text&gt;&#10;                            &lt;Text style={styles.newsSubtitle}&gt;면역력 강화를 위한 비타민 D, C 섭취 가이드&lt;/Text&gt;&#10;                            &lt;Text style={styles.newsDate}&gt;2시간 전&lt;/Text&gt;&#10;                        &lt;/View&gt;&#10;                    &lt;/View&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* FamilyGroup Section */}&#10;        {/* 가족 목록(프로필에서만 사용) - 홈에서는 제거됨 */}&#10;        {/* &lt;AnimatedSection index={7} shouldAnimate={!hasAnimatedOnce}&gt;&#10;          &lt;FamilyGroup&#10;            data={FAMILY_DATA}&#10;            onSelectMember={async (id) =&gt; {&#10;              setSelectedId(id);&#10;              await AsyncStorage.setItem('selected_family_id', id);&#10;            }}&#10;          /&gt;&#10;        &lt;/AnimatedSection&gt; */}&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    backgroundColor: '#f7f8fa', // Slightly off-white background&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingBottom: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.primary,&#10;  },&#10;  headerIcons: {&#10;    flexDirection: 'row',&#10;    gap: 12,&#10;  },&#10;  greetingContainer: {&#10;    marginVertical: 20,&#10;  },&#10;  greetingText: {&#10;    fontSize: 22,&#10;    fontWeight: '700',&#10;    color: Colors.text,&#10;    marginBottom: 6,&#10;  },&#10;  greetingHighlight: {&#10;    color: Colors.primary,&#10;    fontWeight: 'bold',&#10;  },&#10;  greetingSubtext: {&#10;    fontSize: 15,&#10;    color: Colors.mediumGray,&#10;  },&#10;  quickActionsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    marginBottom: 24,&#10;    gap: 12,&#10;  },&#10;  quickActionCard: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    alignItems: 'center',&#10;    shadowColor: '#aab4c1',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 3,&#10;    borderWidth: 1,&#10;    borderColor: '#eef0f3'&#10;  },&#10;  quickActionIcon: {&#10;    fontSize: 28,&#10;    marginBottom: 10,&#10;  },&#10;  quickActionText: {&#10;    fontSize: 13,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    textAlign: 'center',&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 24,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 12,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;  },&#10;  card: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    shadowColor: '#aab4c1',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 3,&#10;    borderWidth: 1,&#10;    borderColor: '#eef0f3'&#10;  },&#10;  interactionRiskContent: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    paddingVertical: 10,&#10;  },&#10;  circularGaugeContainer: {&#10;    alignItems: 'center',&#10;    marginRight: 20,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    flex: 1,&#10;  },&#10;  newsContentWrapper: {&#10;    flexDirection: 'row',&#10;  },&#10;  newsImagePlaceholder: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 12,&#10;    backgroundColor: Colors.lightGray,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginRight: 16,&#10;  },&#10;  newsEmoji: {&#10;    fontSize: 30,&#10;  },&#10;  newsContent: {&#10;    flex: 1,&#10;    justifyContent: 'center',&#10;  },&#10;  newsTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    marginBottom: 6,&#10;  },&#10;  newsSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;    lineHeight: 20,&#10;  },&#10;  newsDate: {&#10;    fontSize: 12,&#10;    color: Colors.mediumGray,&#10;    fontWeight: '500',&#10;    marginTop: 8,&#10;  },&#10;});" />
              <option name="updatedContent" value="import React, { useEffect, useRef, useState } from 'react';&#10;import { Text, View, ScrollView, StyleSheet, Animated, TouchableOpacity } from &quot;react-native&quot;;&#10;import InteractionRiskGroups from &quot;../components/InteractionRiskGroups&quot;;&#10;import CircularGauge from &quot;../components/CircularGauge&quot;;&#10;import CalendarComponent from &quot;../components/CalendarComponent&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import BottomNavigationBar from &quot;../components/BottomNavigationBar&quot;;&#10;import SearchBar from '../components/SearchBar';&#10;import { useSafeAreaInsets } from 'react-native-safe-area-context';&#10;import * as Haptics from 'expo-haptics';&#10;import { INTERACTION_DATA } from &quot;@/constants/InteractionData&quot;;&#10;import { FAMILY_DATA } from &quot;@/constants/FamilyData&quot;;&#10;import FamilyGroup from &quot;@/components/FamilyGroup&quot;;&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;import { FAMILY_INTERACTION_DATA } from &quot;@/constants/InteractionData&quot;;&#10;&#10;// Module-level variable to track if animation has run once per session&#10;let hasAnimatedOnce = false;&#10;&#10;// Animated component for staggered entrance&#10;const AnimatedSection = ({ children, index, shouldAnimate }: { children: React.ReactNode, index: number, shouldAnimate: boolean }) =&gt; {&#10;    const fadeAnim = useRef(new Animated.Value(0)).current;&#10;    const slideAnim = useRef(new Animated.Value(30)).current;&#10;&#10;    useEffect(() =&gt; {&#10;        if (shouldAnimate) {&#10;            Animated.timing(fadeAnim, {&#10;                toValue: 1,&#10;                duration: 600,&#10;                delay: index * 150,&#10;                useNativeDriver: true,&#10;            }).start();&#10;            Animated.timing(slideAnim, {&#10;                toValue: 0,&#10;                duration: 600,&#10;                delay: index * 150,&#10;                useNativeDriver: true,&#10;            }).start();&#10;        } else {&#10;            fadeAnim.setValue(1);&#10;            slideAnim.setValue(0);&#10;        }&#10;    }, [shouldAnimate, index]);&#10;&#10;    return (&#10;        &lt;Animated.View style={{ opacity: fadeAnim, transform: [{ translateY: slideAnim }] }}&gt;&#10;            {children}&#10;        &lt;/Animated.View&gt;&#10;    );&#10;};&#10;&#10;export default function Index() {&#10;  const insets = useSafeAreaInsets();&#10;  const [selectedId, setSelectedId] = useState&lt;string | null&gt;(null);&#10;&#10;  // 선택된 가족 ID를 AsyncStorage에서 불러오기&#10;  useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;      const savedId = await AsyncStorage.getItem('selected_family_id');&#10;      if (savedId) setSelectedId(savedId);&#10;      else setSelectedId(FAMILY_DATA[1]?.id || null);&#10;    })();&#10;  }, []);&#10;&#10;  // This effect runs only once when the component mounts for the first time in the app session.&#10;  // It sets the flag to true, so subsequent mounts/re-renders won't trigger the animation.&#10;  useEffect(() =&gt; {&#10;    if (!hasAnimatedOnce) {&#10;        hasAnimatedOnce = true;&#10;    }&#10;  }, []);&#10;&#10;  const onQuickActionPress = (action: string) =&gt; {&#10;    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);&#10;    // Add navigation logic here based on the action&#10;    console.log(action, 'pressed');&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 120, paddingTop: insets.top + 10 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;AnimatedSection index={0} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.header}&gt;&#10;                &lt;Text style={styles.headerTitle}&gt;PillLink&lt;/Text&gt;&#10;                &lt;View style={styles.headerIcons}&gt;&#10;                    {/* 상단 프로필 아바타 삭제됨 */}&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Search Bar */}&#10;        &lt;AnimatedSection index={1} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;SearchBar /&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Greeting Text */}&#10;        &lt;AnimatedSection index={2} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.greetingContainer}&gt;&#10;            &lt;Text style={styles.greetingText}&gt;&#10;                안녕하세요, &lt;Text style={styles.greetingHighlight}&gt;유은정님!&lt;/Text&gt;&#10;            &lt;/Text&gt;&#10;            &lt;Text style={styles.greetingSubtext}&gt;&#10;                오늘도 건강한 하루 되세요 ✨&#10;            &lt;/Text&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Quick Actions */}&#10;        &lt;AnimatedSection index={3} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.quickActionsContainer}&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('History')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;복용 기록&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('Settings')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;⏰&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;알림 설정&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('Stats')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;통계 보기&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Calendar Section */}&#10;        &lt;AnimatedSection index={4} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;CalendarComponent /&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Interaction Risk Section */}&#10;        &lt;AnimatedSection index={5} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.sectionContainer}&gt;&#10;                &lt;View style={styles.sectionHeader}&gt;&#10;                    &lt;Text style={styles.sectionTitle}&gt;상호작용 안전도&lt;/Text&gt;&#10;                    &lt;Text style={styles.sectionSubtitle}&gt;현재 복용 중인 약물들의 안전성&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={styles.card}&gt;&#10;                    &lt;View style={styles.interactionRiskContent}&gt;&#10;                        &lt;View style={styles.circularGaugeContainer}&gt;&#10;                        &lt;CircularGauge value={selectedId &amp;&amp; FAMILY_INTERACTION_DATA[selectedId] ? FAMILY_INTERACTION_DATA[selectedId].riskScore : INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;/View&gt;&#10;                        &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;                        &lt;InteractionRiskGroups&#10;                          dangerousCount={selectedId &amp;&amp; FAMILY_INTERACTION_DATA[selectedId] ? FAMILY_INTERACTION_DATA[selectedId].dangerousCount : INTERACTION_DATA.dangerousCount}&#10;                          safeCount={selectedId &amp;&amp; FAMILY_INTERACTION_DATA[selectedId] ? FAMILY_INTERACTION_DATA[selectedId].safeCount : INTERACTION_DATA.safeCount}&#10;                        /&gt;&#10;                        &lt;/View&gt;&#10;                    &lt;/View&gt;&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Health News Section */}&#10;        &lt;AnimatedSection index={6} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.sectionContainer}&gt;&#10;                &lt;View style={styles.sectionHeader}&gt;&#10;                    &lt;Text style={styles.sectionTitle}&gt;건강 뉴스&lt;/Text&gt;&#10;                    &lt;Text style={styles.sectionSubtitle}&gt;��은정님을 위한 맞춤 정보&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;TouchableOpacity style={styles.card} activeOpacity={0.8}&gt;&#10;                    &lt;View style={styles.newsContentWrapper}&gt;&#10;                        &lt;View style={styles.newsImagePlaceholder}&gt;&#10;                            &lt;Text style={styles.newsEmoji}&gt;&lt;/Text&gt;&#10;                        &lt;/View&gt;&#10;                        &lt;View style={styles.newsContent}&gt;&#10;                            &lt;Text style={styles.newsTitle}&gt;겨울철 감기 예방을 위한 영양제 복용법&lt;/Text&gt;&#10;                            &lt;Text style={styles.newsSubtitle}&gt;면역력 강화를 위한 비타민 D, C 섭취 가이드&lt;/Text&gt;&#10;                            &lt;Text style={styles.newsDate}&gt;2시간 전&lt;/Text&gt;&#10;                        &lt;/View&gt;&#10;                    &lt;/View&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* FamilyGroup Section */}&#10;        {/* 가족 목록(프로필에서만 사용) - 홈에서는 제거됨 */}&#10;        {/* &lt;AnimatedSection index={7} shouldAnimate={!hasAnimatedOnce}&gt;&#10;          &lt;FamilyGroup&#10;            data={FAMILY_DATA}&#10;            onSelectMember={async (id) =&gt; {&#10;              setSelectedId(id);&#10;              await AsyncStorage.setItem('selected_family_id', id);&#10;            }}&#10;          /&gt;&#10;        &lt;/AnimatedSection&gt; */}&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    backgroundColor: '#f7f8fa', // Slightly off-white background&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingBottom: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.primary,&#10;  },&#10;  headerIcons: {&#10;    flexDirection: 'row',&#10;    gap: 12,&#10;  },&#10;  greetingContainer: {&#10;    marginVertical: 20,&#10;  },&#10;  greetingText: {&#10;    fontSize: 22,&#10;    fontWeight: '700',&#10;    color: Colors.text,&#10;    marginBottom: 6,&#10;  },&#10;  greetingHighlight: {&#10;    color: Colors.primary,&#10;    fontWeight: 'bold',&#10;  },&#10;  greetingSubtext: {&#10;    fontSize: 15,&#10;    color: Colors.mediumGray,&#10;  },&#10;  quickActionsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    marginBottom: 24,&#10;    gap: 12,&#10;  },&#10;  quickActionCard: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    alignItems: 'center',&#10;    shadowColor: '#aab4c1',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 3,&#10;    borderWidth: 1,&#10;    borderColor: '#eef0f3'&#10;  },&#10;  quickActionIcon: {&#10;    fontSize: 28,&#10;    marginBottom: 10,&#10;  },&#10;  quickActionText: {&#10;    fontSize: 13,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    textAlign: 'center',&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 24,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 12,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;  },&#10;  card: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    shadowColor: '#aab4c1',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 3,&#10;    borderWidth: 1,&#10;    borderColor: '#eef0f3'&#10;  },&#10;  interactionRiskContent: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    paddingVertical: 10,&#10;  },&#10;  circularGaugeContainer: {&#10;    alignItems: 'center',&#10;    marginRight: 20,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    flex: 1,&#10;  },&#10;  newsContentWrapper: {&#10;    flexDirection: 'row',&#10;  },&#10;  newsImagePlaceholder: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 12,&#10;    backgroundColor: Colors.lightGray,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginRight: 16,&#10;  },&#10;  newsEmoji: {&#10;    fontSize: 30,&#10;  },&#10;  newsContent: {&#10;    flex: 1,&#10;    justifyContent: 'center',&#10;  },&#10;  newsTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    marginBottom: 6,&#10;  },&#10;  newsSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;    lineHeight: 20,&#10;  },&#10;  newsDate: {&#10;    fontSize: 12,&#10;    color: Colors.mediumGray,&#10;    fontWeight: '500',&#10;    marginTop: 8,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/interaction.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/interaction.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Platform } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import InteractionWarning from '../components/InteractionWarning';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;import { INTERACTION_DATA, FAMILY_INTERACTION_DATA } from '@/constants/InteractionData';&#10;import { useRouter } from 'expo-router';&#10;export default function InteractionScreen() {&#10;  const [selectedGroup, setSelectedGroup] = useState&lt;'risk' | 'safe' | null&gt;(null);&#10;  // 구성원 선택 상태 추가 (기본값: 첫 번째 실제 구성원)&#10;  const familyMembers = FAMILY_DATA.filter(m =&gt; m.id !== 'invite');&#10;  const [selectedMemberId, setSelectedMemberId] = useState(familyMembers[0]?.id || '1');&#10;  const router = useRouter();&#10;&#10;  // 그룹 버튼 클릭 핸들러&#10;    risk: [&#10;      { name: '위험/주의 상호작용', description: `위험: ${memberData.dangerousCount}건`, type: '위험' },&#10;    ],&#10;    safe: [&#10;      { name: '안전 상호작용', description: `안전: ${memberData.safeCount}건`, type: '안전' },&#10;    ],&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100, paddingTop: Platform.OS === 'ios' ? 48 : 20 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;{familyMembers.find(m =&gt; m.id === selectedMemberId)?.name || ''}님의 약물 복용 리포트&lt;/Text&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;복용 중인 약물들의 상호작용을 확인하세요&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        {/* 상호작용 안전도 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.gaugeSection}&gt;&#10;            &lt;CircularGauge value={memberData.riskScore} size={180} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;            &lt;InteractionRiskGroups&#10;              interactable={true}&#10;              onGroupPress={handleGroupPress}&#10;              selectedGroup={selectedGroup}&#10;              dangerousCount={memberData.dangerousCount}&#10;              safeCount={memberData.safeCount}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;        {/* 경고 문구 */}&#10;        &lt;InteractionWarning riskScore={memberData.riskScore} /&gt;&#10;        {/* 선택된 그룹의 상세 정보 표시 */}&#10;        {selectedGroup &amp;&amp; (&#10;          &lt;View style={styles.detailContainer}&gt;&#10;            &lt;Text style={styles.detailTitle}&gt;&#10;              {selectedGroup === 'risk' &amp;&amp; '위험/주의 상호작용 상세'}&#10;              {selectedGroup === 'safe' &amp;&amp; '안전 상호작용 상세'}&#10;            &lt;/Text&gt;&#10;            {groupData[selectedGroup].map((item, index) =&gt; (&#10;              &lt;View key={index} style={styles.detailItem}&gt;&#10;                &lt;Text style={styles.detailItemName}&gt;{item.name}&lt;/Text&gt;&#10;                &lt;Text style={styles.detailItemDescription}&gt;{item.description}&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            ))}&#10;          &lt;/View&gt;&#10;        )}&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar activeIndex={1} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    // paddingTop 제거 (상단 여백은 contentContainerStyle에서 처리)&#10;  },&#10;  memberSelectorWrapper: {&#10;    marginBottom: 18,&#10;    marginTop: 4,&#10;  },&#10;  memberSelectorScroll: {&#10;    flexDirection: 'row',&#10;    gap: 10,&#10;    alignItems: 'center',&#10;    paddingHorizontal: 2,&#10;  },&#10;  memberButton: {&#10;    backgroundColor: '#F2F4F7',&#10;    borderRadius: 16,&#10;    paddingHorizontal: 20,&#10;    paddingVertical: 10,&#10;    marginRight: 8,&#10;    borderWidth: 1,&#10;    borderColor: 'transparent',&#10;  },&#10;  memberButtonSelected: {&#10;    backgroundColor: Colors.primary,&#10;    borderColor: Colors.primary,&#10;  },&#10;  memberButtonText: {&#10;    color: Colors.text,&#10;    fontWeight: '600',&#10;    fontSize: 16,&#10;  },&#10;  memberButtonTextSelected: {&#10;    color: '#fff',&#10;  },&#10;  header: {&#10;    marginBottom: 20,&#10;    marginTop: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 16,&#10;    color: Colors.mediumGray,&#10;  },&#10;  sectionContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  gaugeSection: {&#10;    alignItems: 'center',&#10;    marginBottom: 20,&#10;  },&#10;  gaugeLabel: {&#10;    textAlign: 'center',&#10;    color: Colors.mediumGray,&#10;    fontSize: 15,&#10;    marginTop: 8,&#10;    marginBottom: 4,&#10;    fontWeight: '500',&#10;    letterSpacing: 0.2,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    marginTop: 10,&#10;  },&#10;  detailContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  detailTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 16,&#10;  },&#10;  detailItem: {&#10;    marginBottom: 12,&#10;    paddingBottom: 12,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.border,&#10;  },&#10;  detailItemName: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  detailItemDescription: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Platform } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import InteractionWarning from '../components/InteractionWarning';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;import { INTERACTION_DATA, FAMILY_INTERACTION_DATA } from '@/constants/InteractionData';&#10;import { useRouter } from 'expo-router';&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;&#10;export default function InteractionScreen() {&#10;  const [selectedGroup, setSelectedGroup] = useState&lt;'risk' | 'safe' | null&gt;(null);&#10;  // 구성원 선택 상태 추가 (기본값: 첫 번째 실제 구성원)&#10;  const familyMembers = FAMILY_DATA.filter(m =&gt; m.id !== 'invite');&#10;  const [selectedMemberId, setSelectedMemberId] = useState(familyMembers[0]?.id || '1');&#10;  const router = useRouter();&#10;&#10;  // AsyncStorage에서 선택된 가족 id를 불러와서 사용&#10;  useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;      const storedId = await AsyncStorage.getItem('selected_family_id');&#10;      if (storedId &amp;&amp; storedId !== selectedMemberId) {&#10;        setSelectedMemberId(storedId);&#10;      }&#10;    })();&#10;  }, []);&#10;&#10;  // 그룹 버튼 클릭 핸들러&#10;  const handleGroupPress = (groupType: 'risk' | 'safe') =&gt; {&#10;    const newSelection = selectedGroup === groupType ? null : groupType;&#10;    setSelectedGroup(newSelection);&#10;  };&#10;&#10;  // 선택된 구성원의 상호작용 데이터&#10;  const memberData = FAMILY_INTERACTION_DATA[selectedMemberId] || FAMILY_INTERACTION_DATA['1'];&#10;&#10;  // 기존 요소에서 위험/안전 데이터만 연결 (선택된 구성원의 데이터 사용)&#10;  const groupData = {&#10;    risk: [&#10;      { name: '위험/주의 상호작용', description: `위험: ${memberData.dangerousCount}건`, type: '위험' },&#10;    ],&#10;    safe: [&#10;      { name: '안전 상호작용', description: `안전: ${memberData.safeCount}건`, type: '안전' },&#10;    ],&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100, paddingTop: Platform.OS === 'ios' ? 48 : 20 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;{familyMembers.find(m =&gt; m.id === selectedMemberId)?.name || ''}님의 약물 복용 리포트&lt;/Text&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;복용 중인 약물들의 상호작용을 확인하세요&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        {/* 상호작용 안전도 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.gaugeSection}&gt;&#10;            &lt;CircularGauge value={memberData.riskScore} size={180} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;            &lt;InteractionRiskGroups&#10;              interactable={true}&#10;              onGroupPress={handleGroupPress}&#10;              selectedGroup={selectedGroup}&#10;              dangerousCount={memberData.dangerousCount}&#10;              safeCount={memberData.safeCount}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;        {/* 경고 문구 */}&#10;        &lt;InteractionWarning riskScore={memberData.riskScore} /&gt;&#10;        {/* 선택된 그룹의 상세 정보 표시 */}&#10;        {selectedGroup &amp;&amp; (&#10;          &lt;View style={styles.detailContainer}&gt;&#10;            &lt;Text style={styles.detailTitle}&gt;&#10;              {selectedGroup === 'risk' &amp;&amp; '위험/주의 상호작용 상세'}&#10;              {selectedGroup === 'safe' &amp;&amp; '안전 상호작용 상세'}&#10;            &lt;/Text&gt;&#10;            {groupData[selectedGroup].map((item, index) =&gt; (&#10;              &lt;View key={index} style={styles.detailItem}&gt;&#10;                &lt;Text style={styles.detailItemName}&gt;{item.name}&lt;/Text&gt;&#10;                &lt;Text style={styles.detailItemDescription}&gt;{item.description}&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            ))}&#10;          &lt;/View&gt;&#10;        )}&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar activeIndex={1} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    // paddingTop 제거 (상단 여백은 contentContainerStyle에서 처리)&#10;  },&#10;  memberSelectorWrapper: {&#10;    marginBottom: 18,&#10;    marginTop: 4,&#10;  },&#10;  memberSelectorScroll: {&#10;    flexDirection: 'row',&#10;    gap: 10,&#10;    alignItems: 'center',&#10;    paddingHorizontal: 2,&#10;  },&#10;  memberButton: {&#10;    backgroundColor: '#F2F4F7',&#10;    borderRadius: 16,&#10;    paddingHorizontal: 20,&#10;    paddingVertical: 10,&#10;    marginRight: 8,&#10;    borderWidth: 1,&#10;    borderColor: 'transparent',&#10;  },&#10;  memberButtonSelected: {&#10;    backgroundColor: Colors.primary,&#10;    borderColor: Colors.primary,&#10;  },&#10;  memberButtonText: {&#10;    color: Colors.text,&#10;    fontWeight: '600',&#10;    fontSize: 16,&#10;  },&#10;  memberButtonTextSelected: {&#10;    color: '#fff',&#10;  },&#10;  header: {&#10;    marginBottom: 20,&#10;    marginTop: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 16,&#10;    color: Colors.mediumGray,&#10;  },&#10;  sectionContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  gaugeSection: {&#10;    alignItems: 'center',&#10;    marginBottom: 20,&#10;  },&#10;  gaugeLabel: {&#10;    textAlign: 'center',&#10;    color: Colors.mediumGray,&#10;    fontSize: 15,&#10;    marginTop: 8,&#10;    marginBottom: 4,&#10;    fontWeight: '500',&#10;    letterSpacing: 0.2,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    marginTop: 10,&#10;  },&#10;  detailContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  detailTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 16,&#10;  },&#10;  detailItem: {&#10;    marginBottom: 12,&#10;    paddingBottom: 12,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.border,&#10;  },&#10;  detailItemName: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  detailItemDescription: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/login.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/login.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, TextInput, TouchableOpacity, StyleSheet, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function LoginScreen() {&#10;  const [email, setEmail] = useState('');&#10;  const [password, setPassword] = useState('');&#10;  const [error, setError] = useState('');&#10;  const router = useRouter();&#10;&#10;  const handleLogin = () =&gt; {&#10;    // 실제 로그인 로직은 서버 연동 필요&#10;    if (!email || !password) {&#10;      setError('이메일과 비밀번호를 입력하세요.');&#10;      return;&#10;    }&#10;    setError('');&#10;    // 로그인 성공 시 홈으로 이동 (예시)&#10;    router.replace('/');&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* 상단 로고/타이틀 */}&#10;      &lt;Image source={require('@/../assets/images/icon.png')} style={styles.logo} /&gt;&#10;      &lt;Text style={styles.title}&gt;로그인&lt;/Text&gt;&#10;      &lt;Text style={styles.subtitle}&gt;PillLink에 오신 것을 환영합니다!&lt;/Text&gt;&#10;      {/* 입력 폼 */}&#10;      &lt;View style={styles.inputSection}&gt;&#10;        &lt;TextInput&#10;          style={styles.input}&#10;          placeholder=&quot;이메일&quot;&#10;          placeholderTextColor={Colors.mediumGray}&#10;          value={email}&#10;          onChangeText={setEmail}&#10;          keyboardType=&quot;email-address&quot;&#10;          autoCapitalize=&quot;none&quot;&#10;        /&gt;&#10;        &lt;TextInput&#10;          style={styles.input}&#10;          placeholder=&quot;비밀번호&quot;&#10;          placeholderTextColor={Colors.mediumGray}&#10;          value={password}&#10;          onChangeText={setPassword}&#10;          secureTextEntry&#10;        /&gt;&#10;        {error ? &lt;Text style={styles.error}&gt;{error}&lt;/Text&gt; : null}&#10;        &lt;TouchableOpacity style={styles.loginButton} onPress={handleLogin}&gt;&#10;          &lt;Text style={styles.loginButtonText}&gt;로그인&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;      {/* 하단 링크 */}&#10;      &lt;View style={styles.bottomLinks}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.push('/signup')}&gt;&#10;          &lt;Text style={styles.linkText}&gt;회원가입&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.linkDivider}&gt;|&lt;/Text&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.push('/find-password')}&gt;&#10;          &lt;Text style={styles.linkText}&gt;비밀번호 찾기&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingHorizontal: 24,&#10;  },&#10;  logo: {&#10;    width: 64,&#10;    height: 64,&#10;    marginBottom: 16,&#10;    resizeMode: 'contain',&#10;  },&#10;  title: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  subtitle: {&#10;    fontSize: 16,&#10;    color: Colors.mediumGray,&#10;    marginBottom: 32,&#10;  },&#10;  inputSection: {&#10;    width: '100%',&#10;    marginBottom: 24,&#10;  },&#10;  input: {&#10;    width: '100%',&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;    borderRadius: 10,&#10;    padding: 14,&#10;    fontSize: 16,&#10;    marginBottom: 12,&#10;    backgroundColor: '#F9FAFB',&#10;    color: Colors.text,&#10;  },&#10;  loginButton: {&#10;    backgroundColor: Colors.primary,&#10;    borderRadius: 10,&#10;    paddingVertical: 14,&#10;    alignItems: 'center',&#10;    marginTop: 8,&#10;  },&#10;  loginButtonText: {&#10;    color: '#fff',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;  error: {&#10;    color: '#EF4444',&#10;    marginBottom: 8,&#10;    textAlign: 'center',&#10;  },&#10;  bottomLinks: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 12,&#10;  },&#10;  linkText: {&#10;    color: Colors.primary,&#10;    fontSize: 15,&#10;    fontWeight: '500',&#10;    paddingHorizontal: 8,&#10;  },&#10;  linkDivider: {&#10;    color: '#B0B0B0',&#10;    fontSize: 15,&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/myinfo.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/myinfo.tsx" />
              <option name="originalContent" value="import { View, Text, StyleSheet, TouchableOpacity, ScrollView, TextInput } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;import FamilyGroup, { FamilyAvatar } from '../components/FamilyGroup';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;import { useDeveloperMode } from '@/contexts/DevModeContext';&#10;import { useRouter } from 'expo-router';&#10;import { MaterialIcons } from '@expo/vector-icons';&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;import React, { useState, useEffect } from 'react';&#10;&#10;function OverlappingAvatars({ data, selectedId }: { data: any[]; selectedId: string | null }) {&#10;  const familyMembers = data.filter(item =&gt; item.id !== 'invite');&#10;  const totalWidth = (familyMembers.length - 1) * 28 + 48; // 겹침 간격 * (개수-1) + 마지막 아바타 너비&#10;&#10;  return (&#10;    &lt;View style={[styles.avatarsRow, { width: totalWidth }]}&gt;&#10;      {familyMembers.map((item, idx) =&gt; (&#10;        &lt;FamilyAvatar&#10;          key={item.id}&#10;          name={item.name}&#10;          active={selectedId === item.id}&#10;          style={{ left: idx * 28, zIndex: familyMembers.length - idx, position: 'absolute' }}&#10;        /&gt;&#10;      ))}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;export default function MyInfoScreen() {&#10;  const { isDeveloperMode, toggleDeveloperMode } = useDeveloperMode();&#10;  const router = useRouter();&#10;  const [selectedId, setSelectedId] = useState&lt;string | null&gt;(null);&#10;  const [chronicDisease, setChronicDisease] = useState('');&#10;  const [allergy, setAllergy] = useState('');&#10;&#10;  useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;      const savedId = await AsyncStorage.getItem('selected_family_id');&#10;      setSelectedId(savedId || null);&#10;      // 기저질환, 알러지 불러오기&#10;      const savedChronic = await AsyncStorage.getItem('chronic_disease');&#10;      const savedAllergy = await AsyncStorage.getItem('allergy');&#10;      if (savedChronic) setChronicDisease(savedChronic);&#10;      if (savedAllergy) setAllergy(savedAllergy);&#10;    })();&#10;  }, []);&#10;&#10;  const handleDeveloperModeToggle = () =&gt; {&#10;    console.log('INFO: 개발자 모드:', isDeveloperMode);&#10;    toggleDeveloperMode();&#10;  };&#10;&#10;  const handleOnboardingNavigation = async () =&gt; {&#10;    try {&#10;      await AsyncStorage.setItem('onboarding_completed', 'false');&#10;      router.push('/onboarding');&#10;    } catch (error) {&#10;      console.error('Failed to navigate to onboarding:', error);&#10;    }&#10;  };&#10;&#10;  const handleAddAlarmNavigation = () =&gt; {&#10;    router.push('/add-alarm');&#10;  };&#10;&#10;  const handleSelectFamily = async (id: string) =&gt; {&#10;    setSelectedId(id);&#10;    await AsyncStorage.setItem('selected_family_id', id);&#10;  };&#10;&#10;  const handleChronicChange = async (text: string) =&gt; {&#10;    setChronicDisease(text);&#10;    await AsyncStorage.setItem('chronic_disease', text);&#10;  };&#10;  const handleAllergyChange = async (text: string) =&gt; {&#10;    setAllergy(text);&#10;    await AsyncStorage.setItem('allergy', text);&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;ScrollView&#10;        style={styles.scrollView}&#10;        contentContainerStyle={styles.scrollContent}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        &lt;Text style={styles.title}&gt;내 정보&lt;/Text&gt;&#10;        &lt;Text style={styles.subtitle}&gt;프로필 및 설정&lt;/Text&gt;&#10;&#10;        &lt;OverlappingAvatars data={FAMILY_DATA} selectedId={selectedId} /&gt;&#10;        &lt;View style={styles.familyGroupWrapper}&gt;&#10;          &lt;FamilyGroup&#10;            data={FAMILY_DATA}&#10;            showAvatars={true}&#10;            onSelectMember={handleSelectFamily}&#10;            selectedId={selectedId}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 기저질환 입력/표시 */}&#10;        &lt;View style={styles.infoSection}&gt;&#10;          &lt;Text style={styles.infoLabel}&gt;기저질환&lt;/Text&gt;&#10;          &lt;TextInput&#10;            style={styles.infoInput}&#10;            placeholder=&quot;예: 고혈압, 당뇨 등&quot;&#10;            value={chronicDisease}&#10;            onChangeText={handleChronicChange}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;        {/* 알러지 입력/표시 */}&#10;        &lt;View style={styles.infoSection}&gt;&#10;          &lt;Text style={styles.infoLabel}&gt;알러지&lt;/Text&gt;&#10;          &lt;TextInput&#10;            style={styles.infoInput}&#10;            placeholder=&quot;예: 페니실린, 땅콩 등&quot;&#10;            value={allergy}&#10;            onChangeText={handleAllergyChange}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 개발자 모드 섹션 */}&#10;        &lt;View style={styles.developerSection}&gt;&#10;          &lt;TouchableOpacity&#10;            style={styles.developerModeButton}&#10;            onPress={handleDeveloperModeToggle}&#10;            activeOpacity={0.7}&#10;          &gt;&#10;            &lt;MaterialIcons&#10;              name=&quot;developer-mode&quot;&#10;              size={24}&#10;              color={isDeveloperMode ? '#4285F4' : '#9CA3AF'}&#10;            /&gt;&#10;            &lt;Text style={[&#10;              styles.developerModeText,&#10;              { color: isDeveloperMode ? '#4285F4' : '#9CA3AF' }&#10;            ]}&gt;&#10;              개발자 모드 {isDeveloperMode ? 'ON' : 'OFF'}&#10;            &lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;&#10;          {isDeveloperMode &amp;&amp; (&#10;            &lt;&gt;&#10;              &lt;TouchableOpacity&#10;                style={styles.onboardingButton}&#10;                onPress={handleOnboardingNavigation}&#10;                activeOpacity={0.7}&#10;              &gt;&#10;                &lt;MaterialIcons name=&quot;school&quot; size={24} color=&quot;#F59E0B&quot; /&gt;&#10;                &lt;Text style={styles.onboardingButtonText}&gt;온보딩 화면 보기&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;              &lt;TouchableOpacity&#10;                style={[styles.onboardingButton, { marginTop: 8, backgroundColor: '#E0F2FE', borderColor: '#38BDF8' }]}&#10;                onPress={handleAddAlarmNavigation}&#10;                activeOpacity={0.7}&#10;              &gt;&#10;                &lt;MaterialIcons name=&quot;alarm-add&quot; size={24} color=&quot;#38BDF8&quot; /&gt;&#10;                &lt;Text style={[styles.onboardingButtonText, { color: '#38BDF8' }]}&gt;알람 추가 화면&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar activeIndex={4} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Colors.background,&#10;  },&#10;  scrollView: {&#10;    flex: 1,&#10;  },&#10;  scrollContent: {&#10;    paddingHorizontal: 16,&#10;    paddingTop: 48,&#10;    paddingBottom: 100,&#10;    alignItems: 'center',&#10;  },&#10;  title: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  subtitle: {&#10;    fontSize: 16,&#10;    color: Colors.mediumGray,&#10;  },&#10;  familyGroupWrapper: {&#10;    marginTop: 40,&#10;    marginBottom: 24,&#10;    alignItems: 'center',&#10;    width: '100%',&#10;  },&#10;  avatarsRow: {&#10;    flexDirection: 'row',&#10;    marginTop: 16,&#10;    marginBottom: 8,&#10;    height: 44,&#10;    position: 'relative',&#10;    alignSelf: 'center',&#10;  },&#10;  avatarCount: {&#10;    width: 28,&#10;    height: 28,&#10;    borderRadius: 14,&#10;    backgroundColor: '#4285F4',&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    position: 'absolute',&#10;    top: 8,&#10;    zIndex: 0,&#10;    borderWidth: 2,&#10;    borderColor: '#fff',&#10;  },&#10;  avatarCountText: {&#10;    color: '#fff',&#10;    fontWeight: 'bold',&#10;    fontSize: 14,&#10;  },&#10;  profileSection: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 24,&#10;    marginBottom: 16,&#10;    paddingHorizontal: 20,&#10;    paddingVertical: 16,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 4,&#10;    width: '90%',&#10;  },&#10;  userAvatar: {&#10;    marginRight: 0,&#10;  },&#10;  userInfo: {&#10;    flex: 1,&#10;    marginLeft: 16,&#10;  },&#10;  userName: {&#10;    fontSize: 18,&#10;    fontWeight: '700',&#10;    color: '#1F2937',&#10;    marginBottom: 4,&#10;  },&#10;  userEmail: {&#10;    fontSize: 14,&#10;    color: '#6B7280',&#10;    fontWeight: '400',&#10;  },&#10;  developerSection: {&#10;    marginTop: 32,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.05,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;    width: '90%',&#10;    marginBottom: 20,&#10;  },&#10;  developerModeButton: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    paddingVertical: 16,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: '#F9FAFB',&#10;    borderRadius: 12,&#10;    marginBottom: 8,&#10;  },&#10;  developerModeText: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    marginLeft: 12,&#10;  },&#10;  onboardingButton: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    paddingVertical: 16,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: '#FEF3C7',&#10;    borderRadius: 12,&#10;    borderWidth: 1,&#10;    borderColor: '#F59E0B',&#10;  },&#10;  onboardingButtonText: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: '#F59E0B',&#10;    marginLeft: 12,&#10;  },&#10;  infoSection: {&#10;    width: '100%',&#10;    marginTop: 24,&#10;    marginBottom: 8,&#10;    padding: 16,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 12,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;  },&#10;  infoLabel: {&#10;    fontSize: 16,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  infoInput: {&#10;    fontSize: 15,&#10;    color: Colors.text,&#10;    backgroundColor: '#F3F4F6',&#10;    borderRadius: 8,&#10;    padding: 10,&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;  },&#10;});" />
              <option name="updatedContent" value="import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;import FamilyGroup, { FamilyAvatar } from '../components/FamilyGroup';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;import { useDeveloperMode } from '@/contexts/DevModeContext';&#10;import { useRouter } from 'expo-router';&#10;import { MaterialIcons } from '@expo/vector-icons';&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;import React, { useState, useEffect } from 'react';&#10;&#10;function OverlappingAvatars({ data, selectedId }: { data: any[]; selectedId: string | null }) {&#10;  const familyMembers = data.filter(item =&gt; item.id !== 'invite');&#10;  const totalWidth = (familyMembers.length - 1) * 28 + 48; // 겹침 간격 * (개수-1) + 마지막 아바타 너비&#10;&#10;  return (&#10;    &lt;View style={[styles.avatarsRow, { width: totalWidth }]}&gt;&#10;      {familyMembers.map((item, idx) =&gt; (&#10;        &lt;FamilyAvatar&#10;          key={item.id}&#10;          name={item.name}&#10;          active={selectedId === item.id}&#10;          style={{ left: idx * 28, zIndex: familyMembers.length - idx, position: 'absolute' }}&#10;        /&gt;&#10;      ))}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;export default function MyInfoScreen() {&#10;  const { isDeveloperMode, toggleDeveloperMode } = useDeveloperMode();&#10;  const router = useRouter();&#10;  const [selectedId, setSelectedId] = useState&lt;string | null&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;      const savedId = await AsyncStorage.getItem('selected_family_id');&#10;      setSelectedId(savedId || null);&#10;    })();&#10;  }, []);&#10;&#10;  const handleDeveloperModeToggle = () =&gt; {&#10;    console.log('INFO: 개발자 모드:', isDeveloperMode);&#10;    toggleDeveloperMode();&#10;  };&#10;&#10;  const handleOnboardingNavigation = async () =&gt; {&#10;    try {&#10;      await AsyncStorage.setItem('onboarding_completed', 'false');&#10;      router.push('/onboarding');&#10;    } catch (error) {&#10;      console.error('Failed to navigate to onboarding:', error);&#10;    }&#10;  };&#10;&#10;  const handleAddAlarmNavigation = () =&gt; {&#10;    router.push('/add-alarm');&#10;  };&#10;&#10;  const handleSelectFamily = async (id: string) =&gt; {&#10;    setSelectedId(id);&#10;    await AsyncStorage.setItem('selected_family_id', id);&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;ScrollView&#10;        style={styles.scrollView}&#10;        contentContainerStyle={styles.scrollContent}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        &lt;Text style={styles.title}&gt;내 정보&lt;/Text&gt;&#10;        &lt;Text style={styles.subtitle}&gt;프로필 및 설정&lt;/Text&gt;&#10;&#10;        &lt;OverlappingAvatars data={FAMILY_DATA} selectedId={selectedId} /&gt;&#10;        &lt;View style={styles.familyGroupWrapper}&gt;&#10;          &lt;FamilyGroup&#10;            data={FAMILY_DATA}&#10;            showAvatars={true}&#10;            onSelectMember={handleSelectFamily}&#10;            selectedId={selectedId}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 개발자 모드 섹션 */}&#10;        &lt;View style={styles.developerSection}&gt;&#10;          &lt;TouchableOpacity&#10;            style={styles.developerModeButton}&#10;            onPress={handleDeveloperModeToggle}&#10;            activeOpacity={0.7}&#10;          &gt;&#10;            &lt;MaterialIcons&#10;              name=&quot;developer-mode&quot;&#10;              size={24}&#10;              color={isDeveloperMode ? '#4285F4' : '#9CA3AF'}&#10;            /&gt;&#10;            &lt;Text style={[&#10;              styles.developerModeText,&#10;              { color: isDeveloperMode ? '#4285F4' : '#9CA3AF' }&#10;            ]}&gt;&#10;              개발자 모드 {isDeveloperMode ? 'ON' : 'OFF'}&#10;            &lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;&#10;          {isDeveloperMode &amp;&amp; (&#10;            &lt;&gt;&#10;              &lt;TouchableOpacity&#10;                style={styles.onboardingButton}&#10;                onPress={handleOnboardingNavigation}&#10;                activeOpacity={0.7}&#10;              &gt;&#10;                &lt;MaterialIcons name=&quot;school&quot; size={24} color=&quot;#F59E0B&quot; /&gt;&#10;                &lt;Text style={styles.onboardingButtonText}&gt;온보딩 화면 보기&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;              &lt;TouchableOpacity&#10;                style={[styles.onboardingButton, { marginTop: 8, backgroundColor: '#E0F2FE', borderColor: '#38BDF8' }]}&#10;                onPress={handleAddAlarmNavigation}&#10;                activeOpacity={0.7}&#10;              &gt;&#10;                &lt;MaterialIcons name=&quot;alarm-add&quot; size={24} color=&quot;#38BDF8&quot; /&gt;&#10;                &lt;Text style={[styles.onboardingButtonText, { color: '#38BDF8' }]}&gt;알람 추가 화면&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar activeIndex={4} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Colors.background,&#10;  },&#10;  scrollView: {&#10;    flex: 1,&#10;  },&#10;  scrollContent: {&#10;    paddingHorizontal: 16,&#10;    paddingTop: 48,&#10;    paddingBottom: 100,&#10;    alignItems: 'center',&#10;  },&#10;  title: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  subtitle: {&#10;    fontSize: 16,&#10;    color: Colors.mediumGray,&#10;  },&#10;  familyGroupWrapper: {&#10;    marginTop: 40,&#10;    marginBottom: 24,&#10;    alignItems: 'center',&#10;    width: '100%',&#10;  },&#10;  avatarsRow: {&#10;    flexDirection: 'row',&#10;    marginTop: 16,&#10;    marginBottom: 8,&#10;    height: 44,&#10;    position: 'relative',&#10;    alignSelf: 'center',&#10;  },&#10;  avatarCount: {&#10;    width: 28,&#10;    height: 28,&#10;    borderRadius: 14,&#10;    backgroundColor: '#4285F4',&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    position: 'absolute',&#10;    top: 8,&#10;    zIndex: 0,&#10;    borderWidth: 2,&#10;    borderColor: '#fff',&#10;  },&#10;  avatarCountText: {&#10;    color: '#fff',&#10;    fontWeight: 'bold',&#10;    fontSize: 14,&#10;  },&#10;  profileSection: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 24,&#10;    marginBottom: 16,&#10;    paddingHorizontal: 20,&#10;    paddingVertical: 16,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 4,&#10;    width: '90%',&#10;  },&#10;  userAvatar: {&#10;    marginRight: 0,&#10;  },&#10;  userInfo: {&#10;    flex: 1,&#10;    marginLeft: 16,&#10;  },&#10;  userName: {&#10;    fontSize: 18,&#10;    fontWeight: '700',&#10;    color: '#1F2937',&#10;    marginBottom: 4,&#10;  },&#10;  userEmail: {&#10;    fontSize: 14,&#10;    color: '#6B7280',&#10;    fontWeight: '400',&#10;  },&#10;  developerSection: {&#10;    marginTop: 32,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.05,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;    width: '90%',&#10;    marginBottom: 20,&#10;  },&#10;  developerModeButton: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    paddingVertical: 16,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: '#F9FAFB',&#10;    borderRadius: 12,&#10;    marginBottom: 8,&#10;  },&#10;  developerModeText: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    marginLeft: 12,&#10;  },&#10;  onboardingButton: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    paddingVertical: 16,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: '#FEF3C7',&#10;    borderRadius: 12,&#10;    borderWidth: 1,&#10;    borderColor: '#F59E0B',&#10;  },&#10;  onboardingButtonText: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: '#F59E0B',&#10;    marginLeft: 12,&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/search-result.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/search-result.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, TextInput, StyleSheet, Text, TouchableOpacity, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;&#10;const MOCK_RESULTS = [&#10;  '아토르바스틴', '암로디핀', '로사르탄',&#10;  '아스피린', '탐스로신', '멜록시캄', '세티리진',&#10;  '타이레놀', '메트포르민',&#10;];&#10;&#10;export default function SearchResultScreen() {&#10;  const [search, setSearch] = useState('');&#10;&#10;  // 실제 검색 결과는 search 값에 따라 필터링해서 보여주면 됩니다.&#10;  const filtered = search&#10;    ? MOCK_RESULTS.filter(item =&gt; item.includes(search))&#10;    : MOCK_RESULTS;&#10;&#10;  return (&#10;    &lt;KeyboardAvoidingView&#10;      style={{ flex: 1, backgroundColor: '#fff' }}&#10;      behavior={Platform.OS === 'ios' ? 'padding' : undefined}&#10;    &gt;&#10;      {/* 상단 바 대체 */}&#10;      &lt;View style={styles.statusBar} /&gt;&#10;      {/* 검색창 */}&#10;      &lt;View style={styles.searchBarContainer}&gt;&#10;        &lt;TextInput&#10;          style={styles.searchBar}&#10;          placeholder=&quot;복용하시는 약알을 검색해보세요&quot;&#10;          placeholderTextColor=&quot;#B0B0B0&quot;&#10;          value={search}&#10;          onChangeText={setSearch}&#10;          returnKeyType=&quot;search&quot;&#10;          autoFocus&#10;        /&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;magnify&quot; size={28} color=&quot;#888&quot; style={styles.searchIcon} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 검색 결과 */}&#10;      &lt;ScrollView contentContainerStyle={styles.suggestionContainer} keyboardShouldPersistTaps=&quot;handled&quot;&gt;&#10;        &lt;View style={styles.suggestionWrap}&gt;&#10;          {filtered.length === 0 ? (&#10;            &lt;Text style={styles.noResultText}&gt;검색 결과가 없습니다.&lt;/Text&gt;&#10;          ) : (&#10;            filtered.map((item) =&gt; (&#10;              &lt;TouchableOpacity key={item} style={styles.suggestionButton}&gt;&#10;                &lt;Text style={styles.suggestionText}&gt;{item}&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            ))&#10;          )}&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;    &lt;/KeyboardAvoidingView&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  statusBar: {&#10;    height: 56,&#10;    backgroundColor: '#1877F2',&#10;    justifyContent: 'flex-end',&#10;  },&#10;  searchBarContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 16,&#10;    marginHorizontal: 16,&#10;    marginBottom: 8,&#10;  },&#10;  searchBar: {&#10;    flex: 1,&#10;    height: 48,&#10;    backgroundColor: '#F7F7F7',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 20,&#10;    fontSize: 16,&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    color: '#222',&#10;  },&#10;  searchIcon: {&#10;    position: 'absolute',&#10;    right: 20,&#10;    top: 10,&#10;  },&#10;  suggestionContainer: {&#10;    paddingHorizontal: 16,&#10;    paddingTop: 16,&#10;    flexGrow: 1,&#10;  },&#10;  suggestionWrap: {&#10;    flexDirection: 'row',&#10;    flexWrap: 'wrap',&#10;    gap: 12,&#10;    justifyContent: 'flex-start',&#10;  },&#10;  suggestionButton: {&#10;    borderWidth: 1.5,&#10;    borderColor: '#1877F2',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 18,&#10;    paddingVertical: 8,&#10;    marginRight: 8,&#10;    marginBottom: 12,&#10;    backgroundColor: '#fff',&#10;  },&#10;  suggestionText: {&#10;    color: '#1877F2',&#10;    fontSize: 16,&#10;    fontWeight: '500',&#10;  },&#10;  noResultText: {&#10;    color: '#888',&#10;    fontSize: 16,&#10;    marginTop: 32,&#10;    textAlign: 'center',&#10;    width: '100%',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/search.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/search.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, TextInput, StyleSheet, Text, TouchableOpacity, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const SUGGESTIONS = [&#10;  '아토르바스틴', '암로디핀', '로사르탄',&#10;  '아스피린', '탐스로신', '멜록시캄', '세티리진',&#10;  '타이레놀', '메트포르민',&#10;];&#10;&#10;export default function SearchScreen() {&#10;  const [search, setSearch] = useState('');&#10;&#10;  return (&#10;    &lt;KeyboardAvoidingView&#10;      style={{ flex: 1, backgroundColor: '#fff' }}&#10;      behavior={Platform.OS === 'ios' ? 'padding' : undefined}&#10;    &gt;&#10;      {/* 상단 바 대체 */}&#10;      &lt;View style={styles.statusBar} /&gt;&#10;      {/* 검색창 */}&#10;      &lt;View style={styles.searchBarContainer}&gt;&#10;        &lt;TextInput&#10;          style={styles.searchBar}&#10;          placeholder=&quot;복용하시는 약알을 검색해보세요&quot;&#10;          placeholderTextColor=&quot;#B0B0B0&quot;&#10;          value={search}&#10;          onChangeText={setSearch}&#10;          returnKeyType=&quot;search&quot;&#10;        /&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;magnify&quot; size={28} color=&quot;#888&quot; style={styles.searchIcon} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 추천 약물 */}&#10;      &lt;ScrollView contentContainerStyle={styles.suggestionContainer} keyboardShouldPersistTaps=&quot;handled&quot;&gt;&#10;        &lt;View style={styles.suggestionWrap}&gt;&#10;          {SUGGESTIONS.map((item) =&gt; (&#10;            &lt;TouchableOpacity key={item} style={styles.suggestionButton}&gt;&#10;              &lt;Text style={styles.suggestionText}&gt;{item}&lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          ))}&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;    &lt;/KeyboardAvoidingView&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  statusBar: {&#10;    height: 56,&#10;    backgroundColor: '#1877F2',&#10;    justifyContent: 'flex-end',&#10;  },&#10;  searchBarContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 16,&#10;    marginHorizontal: 16,&#10;    marginBottom: 8,&#10;  },&#10;  searchBar: {&#10;    flex: 1,&#10;    height: 48,&#10;    backgroundColor: '#F7F7F7',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 20,&#10;    fontSize: 16,&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    color: '#222',&#10;  },&#10;  searchIcon: {&#10;    position: 'absolute',&#10;    right: 20,&#10;    top: 10,&#10;  },&#10;  suggestionContainer: {&#10;    paddingHorizontal: 16,&#10;    paddingTop: 16,&#10;    flexGrow: 1,&#10;  },&#10;  suggestionWrap: {&#10;    flexDirection: 'row',&#10;    flexWrap: 'wrap',&#10;    gap: 12,&#10;    justifyContent: 'flex-start',&#10;  },&#10;  suggestionButton: {&#10;    borderWidth: 1.5,&#10;    borderColor: '#1877F2',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 18,&#10;    paddingVertical: 8,&#10;    marginRight: 8,&#10;    marginBottom: 12,&#10;    backgroundColor: '#fff',&#10;  },&#10;  suggestionText: {&#10;    color: '#1877F2',&#10;    fontSize: 16,&#10;    fontWeight: '500',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup.tsx" />
              <option name="updatedContent" value="import { Ionicons } from '@expo/vector-icons';&#10;// ...existing code...&#10;export default function SignupScreen() {&#10;  const router = useRouter();&#10;  const [step, setStep] = useState(1); // 1: 서비스 선택, 2: 로그인 방식 선택&#10;&#10;  // ...기존 상태 및 함수...&#10;&#10;  // 첫 번째 단계: 서비스 선택&#10;  if (step === 1) {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;        {/* 상단 헤더 */}&#10;        &lt;View style={styles.headerRow}&gt;&#10;          &lt;TouchableOpacity onPress={() =&gt; router.back()} hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}&gt;&#10;            &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;회원가입&lt;/Text&gt;&#10;          &lt;View style={{ width: 28 }} /&gt;&#10;        &lt;/View&gt;&#10;        {/* 진행 바 */}&#10;        &lt;View style={styles.progressBarBg}&gt;&#10;          &lt;View style={styles.progressBarFill} /&gt;&#10;        &lt;/View&gt;&#10;        &lt;Text style={styles.stepTitle}&gt;시작할 서비스를 선택해주세요&lt;/Text&gt;&#10;        &lt;TouchableOpacity style={styles.bigButton} onPress={() =&gt; setStep(2)}&gt;&#10;          &lt;Text style={styles.bigButtonText}&gt;보호자&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;TouchableOpacity style={styles.bigButton} onPress={() =&gt; setStep(2)}&gt;&#10;          &lt;Text style={styles.bigButtonText}&gt;보호 대상자&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;&#10;  // 두 번째 단계: 로그인 방식 선택&#10;  if (step === 2) {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;        &lt;View style={styles.headerRow}&gt;&#10;          &lt;TouchableOpacity onPress={() =&gt; setStep(1)} hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}&gt;&#10;            &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;회원가입&lt;/Text&gt;&#10;          &lt;View style={{ width: 28 }} /&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.progressBarBg}&gt;&#10;          &lt;View style={[styles.progressBarFill, { width: '50%' }]} /&gt;&#10;        &lt;/View&gt;&#10;        &lt;Text style={styles.stepTitle}&gt;로그인할 방식을 선택해주세요&lt;/Text&gt;&#10;        &lt;TouchableOpacity style={styles.kakaoButton}&gt;&#10;          &lt;View style={styles.kakaoIconWrap}&gt;&lt;Text style={styles.kakaoIcon}&gt;TALK&lt;/Text&gt;&lt;/View&gt;&#10;          &lt;Text style={styles.kakaoText}&gt;카카오톡으로 로그인&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;TouchableOpacity style={styles.googleButton}&gt;&#10;          &lt;Image source={{uri: 'https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg'}} style={styles.googleIcon} /&gt;&#10;          &lt;Text style={styles.googleText}&gt;Google로 로그인&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;// ...기존 코드(이메일/비밀번호 회원가입 등)...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CustomNavbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CustomNavbar.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;&#10;// 네비바 아이콘 예시 (실제 경로에 맞게 수정 필요)&#10;const icons = [&#10;  require('../assets/images/home.png'),&#10;  require('../assets/images/search.png'),&#10;  require('../assets/images/plus.png'),&#10;  require('../assets/images/alert.png'),&#10;  require('../assets/images/user.png'),&#10;];&#10;&#10;const labels = ['홈', '검색', '추가', '알림', '내정보'];&#10;&#10;export default function CustomNavbar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; (&#10;        &lt;TouchableOpacity&#10;          key={idx}&#10;          style={[styles.tab, activeIndex === idx &amp;&amp; styles.activeTab]}&#10;          onPress={() =&gt; {&#10;            if (onTabPress) onTabPress(idx);&#10;            // router.push(...) 등 라우팅 처리 가능&#10;          }}&#10;          activeOpacity={0.7}&#10;        &gt;&#10;          &lt;Image source={icon} style={[styles.icon, activeIndex === idx &amp;&amp; styles.activeIcon]} /&gt;&#10;          &lt;Text style={[styles.label, activeIndex === idx &amp;&amp; styles.activeLabel]}&gt;{labels[idx]}&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      ))}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: '#fff',&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: -2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 8,&#10;    paddingBottom: 12,&#10;    paddingTop: 8,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 4,&#10;    borderRadius: 16,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: '#F5F5F5',&#10;  },&#10;  icon: {&#10;    width: 28,&#10;    height: 28,&#10;    marginBottom: 2,&#10;    opacity: 0.7,&#10;  },&#10;  activeIcon: {&#10;    opacity: 1,&#10;  },&#10;  label: {&#10;    fontSize: 12,&#10;    color: '#888',&#10;    fontWeight: '500',&#10;  },&#10;  activeLabel: {&#10;    color: '#222',&#10;    fontWeight: 'bold',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/NavigationButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/NavigationButton.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/PrimaryButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/PrimaryButton.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';&#10;&#10;interface PrimaryButtonProps {&#10;  title: string;&#10;  onPress: () =&gt; void;&#10;  backgroundColor?: string;&#10;  textColor?: string;&#10;  width?: number | string;&#10;  disabled?: boolean;&#10;  style?: ViewStyle;&#10;  textStyle?: TextStyle;&#10;}&#10;&#10;export default function PrimaryButton({&#10;  title,&#10;  onPress,&#10;  backgroundColor = '#6366F1',&#10;  textColor = '#FFFFFF',&#10;  width = '100%',&#10;  disabled = false,&#10;  style,&#10;  textStyle&#10;}: PrimaryButtonProps) {&#10;  return (&#10;    &lt;TouchableOpacity&#10;      style={[&#10;        styles.button,&#10;        {&#10;          backgroundColor: disabled ? '#E5E7EB' : backgroundColor,&#10;          width: width,&#10;        },&#10;        style&#10;      ]}&#10;      onPress={onPress}&#10;      disabled={disabled}&#10;      activeOpacity={0.8}&#10;    &gt;&#10;      &lt;Text&#10;        style={[&#10;          styles.buttonText,&#10;          {&#10;            color: disabled ? '#9CA3AF' : textColor,&#10;          },&#10;          textStyle&#10;        ]}&#10;      &gt;&#10;        {title}&#10;      &lt;/Text&gt;&#10;    &lt;/TouchableOpacity&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  button: {&#10;    height: 54,&#10;    borderRadius: 27,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 3,&#10;    shadowColor: '#000',&#10;    shadowOffset: {&#10;      width: 0,&#10;      height: 2,&#10;    },&#10;    shadowOpacity: 0.25,&#10;    shadowRadius: 3.84,&#10;  },&#10;  buttonText: {&#10;    fontSize: 18,&#10;    fontWeight: '600',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle, DimensionValue } from 'react-native';&#10;&#10;interface PrimaryButtonProps {&#10;  title: string;&#10;  onPress: () =&gt; void;&#10;  backgroundColor?: string;&#10;  textColor?: string;&#10;  width?: DimensionValue;&#10;  disabled?: boolean;&#10;  style?: ViewStyle;&#10;  textStyle?: TextStyle;&#10;}&#10;&#10;export default function PrimaryButton({&#10;  title,&#10;  onPress,&#10;  backgroundColor = '#6366F1',&#10;  textColor = '#FFFFFF',&#10;  width = '100%',&#10;  disabled = false,&#10;  style,&#10;  textStyle&#10;}: PrimaryButtonProps) {&#10;  return (&#10;    &lt;TouchableOpacity&#10;      style={[&#10;        styles.button,&#10;        {&#10;          backgroundColor: disabled ? '#E5E7EB' : backgroundColor,&#10;          width: width,&#10;        },&#10;        style&#10;      ]}&#10;      onPress={onPress}&#10;      disabled={disabled}&#10;      activeOpacity={0.8}&#10;    &gt;&#10;      &lt;Text&#10;        style={[&#10;          styles.buttonText,&#10;          {&#10;            color: disabled ? '#9CA3AF' : textColor,&#10;          },&#10;          textStyle&#10;        ]}&#10;      &gt;&#10;        {title}&#10;      &lt;/Text&gt;&#10;    &lt;/TouchableOpacity&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  button: {&#10;    height: 54,&#10;    borderRadius: 27,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 3,&#10;    shadowColor: '#000',&#10;    shadowOffset: {&#10;      width: 0,&#10;      height: 2,&#10;    },&#10;    shadowOpacity: 0.25,&#10;    shadowRadius: 3.84,&#10;  },&#10;  buttonText: {&#10;    fontSize: 18,&#10;    fontWeight: '600',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/SearchBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/SearchBar.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, TextInput, StyleSheet, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function SearchBar({ value, onChangeText, placeholder = '복용하시는 약을 등록해보세요' }: {&#10;  value?: string;&#10;  onChangeText?: (text: string) =&gt; void;&#10;  placeholder?: string;&#10;}) {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Image&#10;        source={{ uri: 'https://img.icons8.com/ios-filled/50/888888/search--v1.png' }}&#10;        style={styles.icon}&#10;        resizeMode=&quot;contain&quot;&#10;      /&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder={placeholder}&#10;        placeholderTextColor={Colors.mediumGray}&#10;        value={value}&#10;        onChangeText={onChangeText}&#10;        underlineColorAndroid=&quot;transparent&quot;&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#F5F6FA',&#10;    borderRadius: 16,&#10;    paddingHorizontal: 14,&#10;    paddingVertical: 10,&#10;    marginVertical: 8,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  icon: {&#10;    width: 22,&#10;    height: 22,&#10;    marginRight: 8,&#10;    tintColor: '#888',&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    fontSize: 16,&#10;    color: '#222',&#10;    paddingVertical: 0,&#10;    backgroundColor: 'transparent',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, TextInput, StyleSheet, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function SearchBar({ value, onChangeText, placeholder = '복용하시는 약을 등록해보세요' }: {&#10;  value?: string;&#10;  onChangeText?: (text: string) =&gt; void;&#10;  placeholder?: string;&#10;}) {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Image&#10;        source={{ uri: 'https://img.icons8.com/ios-filled/50/888888/search--v1.png' }}&#10;        style={styles.icon}&#10;        resizeMode=&quot;contain&quot;&#10;      /&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder={placeholder}&#10;        placeholderTextColor={Colors.mediumGray}&#10;        value={value}&#10;        onChangeText={onChangeText}&#10;        underlineColorAndroid=&quot;transparent&quot;&#10;        returnKeyType=&quot;search&quot;&#10;        clearButtonMode=&quot;while-editing&quot;&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#F5F6FA',&#10;    borderRadius: 16,&#10;    paddingHorizontal: 14,&#10;    paddingVertical: 10,&#10;    marginVertical: 8,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  icon: {&#10;    width: 22,&#10;    height: 22,&#10;    marginRight: 8,&#10;    tintColor: '#888',&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    fontSize: 16,&#10;    color: '#222',&#10;    paddingVertical: 0,&#10;    backgroundColor: 'transparent',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/constants/FamilyData.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/constants/FamilyData.ts" />
              <option name="originalContent" value="export interface MedicationInfo {&#10;  id: string;&#10;  medicationName: string;&#10;  time: string;&#10;  dosage: string;&#10;  enabled: boolean;&#10;  frequency: 'daily' | 'weekly' | 'as-needed';&#10;  notes?: string;&#10;  icon: string;&#10;}&#10;&#10;export interface FamilyMember {&#10;  id: string;&#10;  name: string;&#10;  active: boolean;&#10;  phone?: string;&#10;  relation?: string;&#10;  email?: string;&#10;  medications?: MedicationInfo[];&#10;}&#10;&#10;// 가족 구성원 데이터&#10;export const FAMILY_DATA: FamilyMember[] = [&#10;  { id: 'invite', type: 'invite' } as any, // 초대하기 특수 항목&#10;  {&#10;    id: '1',&#10;    name: '오말숙',&#10;    active: true,&#10;    phone: '010-1234-5678',&#10;    relation: '어머니',&#10;    email: 'omalsook@example.com',&#10;    medications: [&#10;      {&#10;        id: '1-1',&#10;        medicationName: '혈압약',&#10;        time: '08:00',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '식후 복용',&#10;        icon: 'medical-services'&#10;      },&#10;      {&#10;        id: '1-2',&#10;        medicationName: '당뇨약',&#10;        time: '12:00',&#10;        dosage: '2정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '식전 30분',&#10;        icon: 'medication'&#10;      },&#10;      {&#10;        id: '1-3',&#10;        medicationName: '종합비타민',&#10;        time: '09:00',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '아침 식사 후',&#10;        icon: 'local-pharmacy'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '2',&#10;    name: '남지윤',&#10;    active: false,&#10;    phone: '010-2345-6789',&#10;    relation: '배우자',&#10;    email: 'namjiyoon@example.com',&#10;    medications: [&#10;      {&#10;        id: '2-1',&#10;        medicationName: '철분제',&#10;        time: '19:00',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'health-and-safety'&#10;      },&#10;      {&#10;        id: '2-2',&#10;        medicationName: '비타민 C',&#10;        time: '08:30',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '아침 식사 후',&#10;        icon: 'local-pharmacy'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '3',&#10;    name: '홍준우',&#10;    active: false,&#10;    phone: '010-3456-7890',&#10;    relation: '아들',&#10;    email: 'hongjunwoo@example.com',&#10;    medications: [&#10;      {&#10;        id: '3-1',&#10;        medicationName: '비타민 D',&#10;        time: '20:00',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'health-and-safety'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '4',&#10;    name: '이수아',&#10;    active: false,&#10;    phone: '010-4567-8901',&#10;    relation: '딸',&#10;    email: 'isooa@example.com',&#10;    medications: [&#10;      {&#10;        id: '4-1',&#10;        medicationName: '오메가3',&#10;        time: '21:00',&#10;        dosage: '2정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'local-pharmacy'&#10;      },&#10;      {&#10;        id: '4-2',&#10;        medicationName: '프로바이오틱스',&#10;        time: '07:30',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '아침 공복',&#10;        icon: 'health-and-safety'&#10;      }&#10;    ]&#10;  },&#10;];&#10;&#10;// 특정 가족 구성원 조회 함수&#10;export const getFamilyMemberById = (id: string): FamilyMember | undefined =&gt; {&#10;  return FAMILY_DATA.find(member =&gt; member.id === id &amp;&amp; member.id !== 'invite');&#10;};&#10;&#10;// 초대하기 제외한 실제 가족 구성원만 반환&#10;export const getFamilyMembers = (): FamilyMember[] =&gt; {&#10;  return FAMILY_DATA.filter(member =&gt; member.id !== 'invite');&#10;};&#10;&#10;// 특정 가족 구성원의 약물 정보 조회&#10;export const getMedicationsByMemberId = (memberId: string): MedicationInfo[] =&gt; {&#10;  const member = getFamilyMemberById(memberId);&#10;  return member?.medications || [];&#10;};&#10;&#10;// 모든 가족의 활성화된 약물 알림 수 조회&#10;export const getActiveMedicationAlarmsCount = (): number =&gt; {&#10;  return getFamilyMembers().reduce((count, member) =&gt; {&#10;    const activeMedications = member.medications?.filter(med =&gt; med.enabled) || [];&#10;    return count + activeMedications.length;&#10;  }, 0);&#10;};&#10;" />
              <option name="updatedContent" value="export interface MedicationInfo {&#10;  id: string;&#10;  medicationName: string;&#10;  time: string;&#10;  dosage: string;&#10;  enabled: boolean;&#10;  frequency: 'daily' | 'weekly' | 'as-needed';&#10;  notes?: string;&#10;  icon: string;&#10;}&#10;&#10;export interface FamilyMember {&#10;  id: string;&#10;  name: string;&#10;  active: boolean;&#10;  phone?: string;&#10;  email?: string;&#10;  medications?: MedicationInfo[];&#10;}&#10;&#10;// 가족 구성원 데이터&#10;export const FAMILY_DATA: FamilyMember[] = [&#10;  { id: 'invite', type: 'invite' } as any, // 초대하기 특수 항목&#10;  {&#10;    id: '1',&#10;    name: '오말숙',&#10;    active: true,&#10;    phone: '010-1234-5678',&#10;    email: 'omalsook@example.com',&#10;    medications: [&#10;      {&#10;        id: '1-1',&#10;        medicationName: '혈압약',&#10;        time: '08:00',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '식후 복용',&#10;        icon: 'medical-services'&#10;      },&#10;      {&#10;        id: '1-2',&#10;        medicationName: '당뇨약',&#10;        time: '12:00',&#10;        dosage: '2정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '식전 30분',&#10;        icon: 'medication'&#10;      },&#10;      {&#10;        id: '1-3',&#10;        medicationName: '종합비타민',&#10;        time: '09:00',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '아침 식사 후',&#10;        icon: 'local-pharmacy'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '2',&#10;    name: '남지윤',&#10;    active: false,&#10;    phone: '010-2345-6789',&#10;    email: 'namjiyoon@example.com',&#10;    medications: [&#10;      {&#10;        id: '2-1',&#10;        medicationName: '철분제',&#10;        time: '19:00',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'health-and-safety'&#10;      },&#10;      {&#10;        id: '2-2',&#10;        medicationName: '비타민 C',&#10;        time: '08:30',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '아침 식사 후',&#10;        icon: 'local-pharmacy'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '3',&#10;    name: '홍준우',&#10;    active: false,&#10;    phone: '010-3456-7890',&#10;    email: 'hongjunwoo@example.com',&#10;    medications: [&#10;      {&#10;        id: '3-1',&#10;        medicationName: '비타민 D',&#10;        time: '20:00',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'health-and-safety'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '4',&#10;    name: '이수아',&#10;    active: false,&#10;    phone: '010-4567-8901',&#10;    email: 'isooa@example.com',&#10;    medications: [&#10;      {&#10;        id: '4-1',&#10;        medicationName: '오메가3',&#10;        time: '21:00',&#10;        dosage: '2정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'local-pharmacy'&#10;      },&#10;      {&#10;        id: '4-2',&#10;        medicationName: '프로바이오틱스',&#10;        time: '07:30',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '아침 공복',&#10;        icon: 'health-and-safety'&#10;      }&#10;    ]&#10;  },&#10;];&#10;&#10;// 특정 가족 구성원 조회 함수&#10;export const getFamilyMemberById = (id: string): FamilyMember | undefined =&gt; {&#10;  return FAMILY_DATA.find(member =&gt; member.id === id &amp;&amp; member.id !== 'invite');&#10;};&#10;&#10;// 초대하기 제외한 실제 가족 구성원만 반환&#10;export const getFamilyMembers = (): FamilyMember[] =&gt; {&#10;  return FAMILY_DATA.filter(member =&gt; member.id !== 'invite');&#10;};&#10;&#10;// 특정 가족 구성원의 약물 정보 조회&#10;export const getMedicationsByMemberId = (memberId: string): MedicationInfo[] =&gt; {&#10;  const member = getFamilyMemberById(memberId);&#10;  return member?.medications || [];&#10;};&#10;&#10;// 모든 가족의 활성화된 약물 알림 수 조회&#10;export const getActiveMedicationAlarmsCount = (): number =&gt; {&#10;  return getFamilyMembers().reduce((count, member) =&gt; {&#10;    const activeMedications = member.medications?.filter(med =&gt; med.enabled) || [];&#10;    return count + activeMedications.length;&#10;  }, 0);&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/contexts/FamilyDataContext.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/contexts/FamilyDataContext.tsx" />
              <option name="originalContent" value="import React, { createContext, useContext, useState } from 'react';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;&#10;// 타입 정의&#10;interface MedicationInfo {&#10;  id: string;&#10;  medicationName: string;&#10;  enabled: boolean;&#10;  [key: string]: any;&#10;}&#10;interface FamilyMember {&#10;  id: string;&#10;  name: string;&#10;  medications?: MedicationInfo[];&#10;  [key: string]: any;&#10;}&#10;interface FamilyDataContextType {&#10;  familyData: FamilyMember[];&#10;  updateMedicationEnabled: (userId: string, medicationName: string, enabled: boolean) =&gt; void;&#10;}&#10;&#10;const defaultContext: FamilyDataContextType = {&#10;  familyData: FAMILY_DATA,&#10;&#10;export const FamilyDataProvider = ({ children }: { children: React.ReactNode }) =&gt; {&#10;  const [familyData, setFamilyData] = useState(FAMILY_DATA);&#10;&#10;  // 약물 알림 설정(스위치) 변경 함수&#10;  const updateMedicationEnabled = (userId: string, medicationName: string, enabled: boolean) =&gt; {&#10;    setFamilyData(prev =&gt; prev.map(user =&gt; {&#10;      if (user.id !== userId) return user;&#10;      return {&#10;        ...user,&#10;        medications: user.medications?.map(med =&gt;&#10;          med.medicationName === medicationName ? { ...med, enabled } : med&#10;        )&#10;      };&#10;    }));&#10;  };&#10;&#10;  return (&#10;    &lt;FamilyDataContext.Provider value={{ familyData, updateMedicationEnabled }}&gt;&#10;      {children}&#10;    &lt;/FamilyDataContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export const useFamilyData = () =&gt; useContext(FamilyDataContext);&#10;&#10;" />
              <option name="updatedContent" value="import React, { createContext, useContext, useState } from 'react';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;&#10;// 타입 정의&#10;interface MedicationInfo {&#10;  id: string;&#10;  medicationName: string;&#10;  enabled: boolean;&#10;  [key: string]: any;&#10;}&#10;interface FamilyMember {&#10;  id: string;&#10;  name: string;&#10;  medications?: MedicationInfo[];&#10;  [key: string]: any;&#10;}&#10;interface FamilyDataContextType {&#10;  familyData: FamilyMember[];&#10;  updateMedicationEnabled: (userId: string, medicationName: string, enabled: boolean) =&gt; void;&#10;}&#10;&#10;const defaultContext: FamilyDataContextType = {&#10;  familyData: FAMILY_DATA,&#10;  updateMedicationEnabled: () =&gt; {},&#10;};&#10;&#10;const FamilyDataContext = createContext&lt;FamilyDataContextType&gt;(defaultContext);&#10;&#10;export const FamilyDataProvider = ({ children }: { children: React.ReactNode }) =&gt; {&#10;  const [familyData, setFamilyData] = useState(FAMILY_DATA);&#10;&#10;  // 약물 알림 설정(스위치) 변경 함수&#10;  const updateMedicationEnabled = (userId: string, medicationName: string, enabled: boolean) =&gt; {&#10;    setFamilyData(prev =&gt; prev.map(user =&gt; {&#10;      if (user.id !== userId) return user;&#10;      return {&#10;        ...user,&#10;        medications: user.medications?.map(med =&gt;&#10;          med.medicationName === medicationName ? { ...med, enabled } : med&#10;        )&#10;      };&#10;    }));&#10;  };&#10;&#10;  return (&#10;    &lt;FamilyDataContext.Provider value={{ familyData, updateMedicationEnabled }}&gt;&#10;      {children}&#10;    &lt;/FamilyDataContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export const useFamilyData = () =&gt; useContext(FamilyDataContext);&#10;export { FamilyDataContextType };" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>