<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/components/CircularGauge.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CircularGauge.tsx" />
              <option name="originalContent" value="import React from &quot;react&quot;;&#10;import { View, Text, StyleSheet, Platform } from &quot;react-native&quot;;&#10;import Svg, { Circle, Defs, Stop, LinearGradient, Path } from &quot;react-native-svg&quot;;&#10;import { Colors } from '../constants/Colors';&#10;&#10;interface CircularGaugeProps {&#10;  percentage: number;&#10;  size?: number;&#10;  strokeWidth?: number;&#10;}&#10;&#10;export default function CircularGauge({&#10;  percentage,&#10;  size = 72,&#10;  strokeWidth = 12,&#10;}: CircularGaugeProps) {&#10;  // 게이지의 중심과 반지름 계산&#10;  const center = size / 2;&#10;  const radius = center - strokeWidth / 2;&#10;  const circumference = 2 * Math.PI * radius;&#10;  const progress = (circumference * percentage) / 100;&#10;&#10;  // 파이(피자) 모양 게이지를 위한 각도 계산&#10;  const startAngle = -90;&#10;  const endAngle = startAngle + (percentage / 100) * 360;&#10;  const radians = (deg: number) =&gt; (deg * Math.PI) / 180;&#10;  const describeArc = (cx: number, cy: number, r: number, startAngle: number, endAngle: number) =&gt; {&#10;    const start = {&#10;      x: cx + r * Math.cos(radians(startAngle)),&#10;      y: cy + r * Math.sin(radians(startAngle)),&#10;    };&#10;    const end = {&#10;      x: cx + r * Math.cos(radians(endAngle)),&#10;      y: cy + r * Math.sin(radians(endAngle)),&#10;    };&#10;    const largeArcFlag = endAngle - startAngle &lt;= 180 ? &quot;0&quot; : &quot;1&quot;;&#10;    return [&#10;      `M ${cx} ${cy}`,&#10;      `L ${start.x} ${start.y}`,&#10;      `A ${r} ${r} 0 ${largeArcFlag} 1 ${end.x} ${end.y}`,&#10;      &quot;Z&quot;,&#10;    ].join(&quot; &quot;);&#10;  };&#10;  const piePath = describeArc(center, center, radius, startAngle, endAngle);&#10;&#10;  return (&#10;    &lt;View style={[styles.container, { width: size, height: size, borderRadius: size / 2 }]}&gt;&#10;      {/* LinearGradient 제거: 배경 그라데이션은 필요 없음 */}&#10;      &lt;Svg width={size} height={size} style={{ position: 'absolute' }}&gt;&#10;        &lt;Defs&gt;&#10;          &lt;LinearGradient id=&quot;strokeGradient&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;100%&quot;&gt;&#10;            &lt;Stop offset=&quot;0%&quot; stopColor=&quot;#BD0000&quot; /&gt;&#10;            &lt;Stop offset=&quot;100%&quot; stopColor=&quot;#FF8282&quot; /&gt;&#10;          &lt;/LinearGradient&gt;&#10;        &lt;/Defs&gt;&#10;        {/* 파이(피자) 모양 게이지 */}&#10;        &lt;Path&#10;          d={piePath}&#10;          fill=&quot;url(#strokeGradient)&quot;&#10;          shadowColor=&quot;#000&quot;&#10;          shadowOffset={{ width: 0, height: 4 }}&#10;          shadowOpacity={0.22}&#10;          shadowRadius={12}&#10;        /&gt;&#10;      &lt;/Svg&gt;&#10;      {/* 중앙 텍스트 */}&#10;      &lt;View style={{&#10;        position: 'absolute',&#10;        width: size * 0.6,&#10;        height: size * 0.6,&#10;        left: size * 0.2,&#10;        top: size * 0.2,&#10;        borderRadius: size * 0.3,&#10;        backgroundColor: 'transparent',&#10;        alignItems: 'center',&#10;        justifyContent: 'center',&#10;      }}&gt;&#10;        &lt;Text style={{ fontSize: size * 0.18, fontWeight: 'bold', color: '#222' }}&gt;{percentage}&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    overflow: 'hidden', // Clip content outside the rounded border&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import { View, Text, StyleSheet, Platform } from &quot;react-native&quot;;&#10;import Svg, { Circle, Defs, Stop, LinearGradient, Path } from &quot;react-native-svg&quot;;&#10;import { Colors } from '../constants/Colors';&#10;&#10;interface CircularGaugeProps {&#10;  percentage: number;&#10;  size?: number;&#10;  strokeWidth?: number;&#10;}&#10;&#10;export default function CircularGauge({&#10;  percentage,&#10;  size = 72,&#10;  strokeWidth = 12,&#10;}: CircularGaugeProps) {&#10;  // 게이지의 중심과 반지름 계산&#10;  const center = size / 2;&#10;  const radius = center - strokeWidth / 2;&#10;  const circumference = 2 * Math.PI * radius;&#10;  const progress = (circumference * percentage) / 100;&#10;&#10;  // 파이(피자) 모양 게이지를 위한 각도 계산&#10;  const startAngle = -90;&#10;  const endAngle = startAngle + (percentage / 100) * 360;&#10;  const radians = (deg: number) =&gt; (deg * Math.PI) / 180;&#10;  const describeArc = (cx: number, cy: number, r: number, startAngle: number, endAngle: number) =&gt; {&#10;    const start = {&#10;      x: cx + r * Math.cos(radians(startAngle)),&#10;      y: cy + r * Math.sin(radians(startAngle)),&#10;    };&#10;    const end = {&#10;      x: cx + r * Math.cos(radians(endAngle)),&#10;      y: cy + r * Math.sin(radians(endAngle)),&#10;    };&#10;    const largeArcFlag = endAngle - startAngle &lt;= 180 ? &quot;0&quot; : &quot;1&quot;;&#10;    return [&#10;      `M ${cx} ${cy}`,&#10;      `L ${start.x} ${start.y}`,&#10;      `A ${r} ${r} 0 ${largeArcFlag} 1 ${end.x} ${end.y}`,&#10;      &quot;Z&quot;,&#10;    ].join(&quot; &quot;);&#10;  };&#10;  const piePath = describeArc(center, center, radius, startAngle, endAngle);&#10;&#10;  return (&#10;    &lt;View style={[styles.container, { width: size, height: size, borderRadius: size / 2 }]}&gt;&#10;      {/* LinearGradient 제거: 배경 그라데이션은 필요 없음 */}&#10;      &lt;Svg width={size} height={size} style={{ position: 'absolute' }}&gt;&#10;        &lt;Defs&gt;&#10;          &lt;LinearGradient id=&quot;strokeGradient&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;100%&quot;&gt;&#10;            &lt;Stop offset=&quot;0%&quot; stopColor=&quot;#BD0000&quot; /&gt;&#10;            &lt;Stop offset=&quot;100%&quot; stopColor=&quot;#FF8282&quot; /&gt;&#10;          &lt;/LinearGradient&gt;&#10;        &lt;/Defs&gt;&#10;        {/* 파이(피자) 모양 게이지 */}&#10;        &lt;Path&#10;          d={piePath}&#10;          fill=&quot;url(#strokeGradient)&quot;&#10;          // 그림자 효과를 파이 조각에 적용&#10;          shadowColor=&quot;#000&quot;&#10;          shadowOffset={{ width: 0, height: 4 }}&#10;          shadowOpacity={0.22}&#10;          shadowRadius={12}&#10;        /&gt;&#10;      &lt;/Svg&gt;&#10;      {/* 중앙 흰색 원(항상 위에 뜨도록) */}&#10;      &lt;View style={{&#10;        position: 'absolute',&#10;        width: size * 0.6,&#10;        height: size * 0.6,&#10;        left: size * 0.2,&#10;        top: size * 0.2,&#10;        borderRadius: size * 0.3,&#10;        backgroundColor: '#fff',&#10;        alignItems: 'center',&#10;        justifyContent: 'center',&#10;        shadowColor: '#000',&#10;        shadowOffset: { width: 0, height: 4 },&#10;        shadowOpacity: 0.22,&#10;        shadowRadius: 12,&#10;        elevation: 12,&#10;      }}&gt;&#10;        &lt;Text style={{ fontSize: size * 0.18, fontWeight: 'bold', color: '#222' }}&gt;{percentage}&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    overflow: 'hidden', // Clip content outside the rounded border&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>