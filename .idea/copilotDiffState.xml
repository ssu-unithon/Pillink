<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/myinfo.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/myinfo.tsx" />
              <option name="originalContent" value="import { View, Text, StyleSheet } from 'react-native';&#10;&#10;export default function MyInfoScreen() {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Text style={styles.title}&gt;내 정보 페이지&lt;/Text&gt;&#10;      &lt;Text&gt;여기에 내 정보 내용을 추가하세요.&lt;/Text&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;    backgroundColor: '#f0f0f0',&#10;  },&#10;  title: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    marginBottom: 20,&#10;  },&#10;});" />
              <option name="updatedContent" value="import { View, Text, StyleSheet } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;&#10;export default function MyInfoScreen() {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;View style={styles.content}&gt;&#10;        &lt;Text style={styles.title}&gt;내 정보&lt;/Text&gt;&#10;        &lt;Text style={styles.subtitle}&gt;프로필 및 설정&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &#10;      &lt;BottomNavigationBar activeIndex={4} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  content: {&#10;    flex: 1,&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;    paddingHorizontal: 16,&#10;  },&#10;  title: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 8,&#10;  },&#10;  subtitle: {&#10;    fontSize: 16,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CalendarComponent.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CalendarComponent.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet } from 'react-native';&#10;import { Calendar, LocaleConfig } from 'react-native-calendars';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;// 한국어 로케일 설정&#10;LocaleConfig.locales['ko'] = {&#10;  monthNames: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  monthNamesShort: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],&#10;  dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'],&#10;  today: '오늘'&#10;};&#10;LocaleConfig.defaultLocale = 'ko';&#10;&#10;interface CalendarComponentProps {&#10;  markedDates?: any;&#10;  onDayPress?: (day: any) =&gt; void;&#10;}&#10;&#10;const CalendarComponent: React.FC&lt;CalendarComponentProps&gt; = ({&#10;  markedDates,&#10;  onDayPress&#10;}) =&gt; {&#10;  const defaultMarkedDates = {&#10;    &quot;2024-08-05&quot;: { selected: true, selectedColor: Colors.light.primary },&#10;    &quot;2024-08-06&quot;: { marked: true, dotColor: Colors.light.danger },&#10;    &quot;2024-08-07&quot;: { marked: true, dotColor: Colors.light.secondary },&#10;    &quot;2024-08-08&quot;: { marked: true, dotColor: Colors.light.warning },&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.sectionContainer}&gt;&#10;      &lt;View style={styles.sectionHeader}&gt;&#10;        &lt;Text style={styles.sectionTitle}&gt;복용 캘린더&lt;/Text&gt;&#10;        &lt;Text style={styles.sectionSubtitle}&gt;이번 달 복용 현황&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;Calendar&#10;        style={styles.calendar}&#10;        markedDates={markedDates || defaultMarkedDates}&#10;        theme={{&#10;          todayTextColor: Colors.light.primary,&#10;          arrowColor: Colors.light.primary,&#10;          selectedDayBackgroundColor: Colors.light.primary,&#10;          selectedDayTextColor: Colors.light.background,&#10;          monthTextColor: Colors.light.text,&#10;          textDayFontWeight: '500',&#10;          textMonthFontWeight: 'bold',&#10;          textDayHeaderFontWeight: '600',&#10;        }}&#10;        firstDay={1}&#10;        onDayPress={onDayPress}&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  calendar: {&#10;    borderRadius: 16,&#10;    backgroundColor: '#fff',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;});&#10;&#10;export default CalendarComponent;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet } from 'react-native';&#10;import { Calendar, LocaleConfig } from 'react-native-calendars';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;// 한국어 로케일 설정&#10;LocaleConfig.locales['ko'] = {&#10;  monthNames: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  monthNamesShort: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],&#10;  dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'],&#10;  today: '오늘'&#10;};&#10;LocaleConfig.defaultLocale = 'ko';&#10;&#10;interface CalendarComponentProps {&#10;  markedDates?: any;&#10;  onDayPress?: (day: any) =&gt; void;&#10;}&#10;&#10;const CalendarComponent: React.FC&lt;CalendarComponentProps&gt; = ({&#10;  markedDates,&#10;  onDayPress&#10;}) =&gt; {&#10;  const defaultMarkedDates = {&#10;    &quot;2024-08-05&quot;: { selected: true, selectedColor: Colors.light.primary },&#10;    &quot;2024-08-06&quot;: { marked: true, dotColor: Colors.light.danger },&#10;    &quot;2024-08-07&quot;: { marked: true, dotColor: Colors.light.secondary },&#10;    &quot;2024-08-08&quot;: { marked: true, dotColor: Colors.light.warning },&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.sectionContainer}&gt;&#10;      &lt;View style={styles.sectionHeader}&gt;&#10;        &lt;Text style={styles.sectionTitle}&gt;복용 캘린더&lt;/Text&gt;&#10;        &lt;Text style={styles.sectionSubtitle}&gt;이번 달 복용 현황&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;Calendar&#10;        style={styles.calendar}&#10;        markedDates={markedDates || defaultMarkedDates}&#10;        theme={{&#10;          todayTextColor: Colors.light.primary,&#10;          arrowColor: Colors.light.primary,&#10;          selectedDayBackgroundColor: Colors.light.primary,&#10;          selectedDayTextColor: Colors.light.background,&#10;          monthTextColor: Colors.light.text,&#10;          textDayFontWeight: '500',&#10;          textMonthFontWeight: 'bold',&#10;          textDayHeaderFontWeight: '600',&#10;        }}&#10;        firstDay={1}&#10;        monthFormat={'yyyy년 M월'}&#10;        onDayPress={onDayPress}&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  calendar: {&#10;    borderRadius: 16,&#10;    backgroundColor: '#fff',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;});&#10;&#10;export default CalendarComponent;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CustomNavbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CustomNavbar.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;&#10;// 네비바 아이콘 예시 (실제 경로에 맞게 수정 필요)&#10;const icons = [&#10;  require('../assets/images/home.png'),&#10;  require('../assets/images/search.png'),&#10;  require('../assets/images/plus.png'),&#10;  require('../assets/images/alert.png'),&#10;  require('../assets/images/user.png'),&#10;];&#10;&#10;const labels = ['홈', '검색', '추가', '알림', '내정보'];&#10;&#10;export default function CustomNavbar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; (&#10;        &lt;TouchableOpacity&#10;          key={idx}&#10;          style={[styles.tab, activeIndex === idx &amp;&amp; styles.activeTab]}&#10;          onPress={() =&gt; {&#10;            if (onTabPress) onTabPress(idx);&#10;            // router.push(...) 등 라우팅 처리 가능&#10;          }}&#10;          activeOpacity={0.7}&#10;        &gt;&#10;          &lt;Image source={icon} style={[styles.icon, activeIndex === idx &amp;&amp; styles.activeIcon]} /&gt;&#10;          &lt;Text style={[styles.label, activeIndex === idx &amp;&amp; styles.activeLabel]}&gt;{labels[idx]}&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      ))}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: '#fff',&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: -2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 8,&#10;    paddingBottom: 12,&#10;    paddingTop: 8,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 4,&#10;    borderRadius: 16,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: '#F5F5F5',&#10;  },&#10;  icon: {&#10;    width: 28,&#10;    height: 28,&#10;    marginBottom: 2,&#10;    opacity: 0.7,&#10;  },&#10;  activeIcon: {&#10;    opacity: 1,&#10;  },&#10;  label: {&#10;    fontSize: 12,&#10;    color: '#888',&#10;    fontWeight: '500',&#10;  },&#10;  activeLabel: {&#10;    color: '#222',&#10;    fontWeight: 'bold',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/InteractionRiskGroups.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/InteractionRiskGroups.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface InteractionRiskGroupsProps {&#10;  onGroupPress?: (groupType: 'duplicate' | 'risk' | 'safe') =&gt; void;&#10;  interactable?: boolean;&#10;  selectedGroup?: 'duplicate' | 'risk' | 'safe' | null;&#10;}&#10;&#10;const InteractionRiskGroups = ({ onGroupPress, interactable = false, selectedGroup = null }: InteractionRiskGroupsProps) =&gt; {&#10;  // Card data configuration&#10;  // Order: 중복, 위험, 안전&#10;  const groups = [&#10;    {&#10;      key: 'duplicate' as const,&#10;      title: '중복',&#10;      count: '0건',&#10;      pillBg: Colors.light.primaryLight,&#10;      pillColor: Colors.light.primary,&#10;      activeBg: '#6666FF',&#10;      activeTextColor: '#E6E6FF',&#10;    },&#10;    {&#10;      key: 'risk' as const,&#10;      title: '위험',&#10;      count: '1건',&#10;      pillBg: Colors.light.dangerLight,&#10;      pillColor: Colors.light.danger,&#10;      activeBg: '#FF5050',&#10;      activeTextColor: '#FFD9D9',&#10;    },&#10;    {&#10;      key: 'safe' as const,&#10;      title: '안전',&#10;      count: '1건',&#10;      pillBg: Colors.light.secondaryLight,&#10;      pillColor: Colors.light.secondary,&#10;      activeBg: '#2DB67D',&#10;      activeTextColor: '#D9F2E6',&#10;    },&#10;  ];&#10;&#10;  return (&#10;    &lt;View&gt;&#10;      &lt;View style={styles.groupsContainer}&gt;&#10;        {groups.map(({ key, title, count, pillBg, pillColor, activeBg, activeTextColor }) =&gt; {&#10;          const countValue = parseInt(count);&#10;          const isClickable = interactable &amp;&amp; countValue &gt; 0;&#10;          const isSelected = selectedGroup === key;&#10;          const isInactive = selectedGroup &amp;&amp; selectedGroup !== key;&#10;&#10;          const CardComponent = isClickable ? TouchableOpacity : View;&#10;&#10;          return (&#10;            &lt;CardComponent&#10;              key={key}&#10;              style={[&#10;                styles.groupCard,&#10;                isClickable &amp;&amp; styles.clickableCard,&#10;                isSelected &amp;&amp; { backgroundColor: activeBg },&#10;                isInactive &amp;&amp; { opacity: 0.4 },&#10;              ]}&#10;              onPress={isClickable ? () =&gt; onGroupPress?.(key) : undefined}&#10;              activeOpacity={isClickable ? 0.8 : 1}&#10;            &gt;&#10;              &lt;View style={[&#10;                styles.pill,&#10;                { backgroundColor: isSelected ? activeTextColor : pillBg }&#10;              ]}&gt;&#10;                &lt;Text style={[&#10;                  styles.pillText,&#10;                  { color: isSelected ? activeBg : pillColor }&#10;                ]}&gt;&#10;                  {title}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;              &lt;Text style={[&#10;                styles.groupCount,&#10;                !isClickable &amp;&amp; countValue === 0 &amp;&amp; styles.disabledCount,&#10;                { color: isSelected ? '#fff' : '#222' }&#10;              ]}&gt;&#10;                {count}&#10;              &lt;/Text&gt;&#10;            &lt;/CardComponent&gt;&#10;          );&#10;        })}&#10;      &lt;/View&gt;&#10;&#10;      &lt;View style={styles.warningContainer}&gt;&#10;        &lt;Text style={styles.warningText}&gt;&#10;          현재 약물 상호작용 위험 점수가 높습니다.{'\n'}반드시 의사, 약사와 상담하여 약물 변경 또는 사용 중단 여부를 결정하세요.&#10;        &lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  groupsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    gap: 12,&#10;    marginVertical: 8,&#10;  },&#10;  groupCard: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 20, // 더 둥글게&#10;    paddingVertical: 16,&#10;    marginHorizontal: 4,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  clickableCard: {&#10;    borderWidth: 1,&#10;    borderColor: 'transparent',&#10;  },&#10;  pill: {&#10;    borderRadius: 999,&#10;    paddingHorizontal: 16,&#10;    paddingVertical: 4,&#10;    marginBottom: 8,&#10;    minWidth: 48,&#10;    alignItems: 'center',&#10;  },&#10;  pillText: {&#10;    fontWeight: 'bold',&#10;    fontSize: 15,&#10;    letterSpacing: 0.5,&#10;  },&#10;  groupCount: {&#10;    fontWeight: 'bold',&#10;    fontSize: 18,&#10;    color: '#222',&#10;    marginTop: 2,&#10;  },&#10;  disabledCount: {&#10;    color: '#999',&#10;  },&#10;  warningContainer: {&#10;    backgroundColor: '#FFCCCC',&#10;    borderRadius: 10,&#10;    padding: 12,&#10;    marginTop: 16,&#10;  },&#10;  warningText: {&#10;    color: '#D8000C',&#10;    fontWeight: 'bold',&#10;    textAlign: 'center',&#10;  },&#10;});&#10;&#10;export default InteractionRiskGroups;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface InteractionRiskGroupsProps {&#10;  onGroupPress?: (groupType: 'duplicate' | 'risk' | 'safe') =&gt; void;&#10;  interactable?: boolean;&#10;  selectedGroup?: 'duplicate' | 'risk' | 'safe' | null;&#10;}&#10;&#10;const InteractionRiskGroups = ({ onGroupPress, interactable = false, selectedGroup = null }: InteractionRiskGroupsProps) =&gt; {&#10;  // Card data configuration&#10;  // Order: 중복, 위험, 안전&#10;  const groups = [&#10;    {&#10;      key: 'duplicate' as const,&#10;      title: '중복',&#10;      count: '0건',&#10;      pillBg: Colors.light.primaryLight,&#10;      pillColor: Colors.light.primary,&#10;      activeBg: '#6666FF',&#10;      activeTextColor: '#E6E6FF',&#10;    },&#10;    {&#10;      key: 'risk' as const,&#10;      title: '위험',&#10;      count: '1건',&#10;      pillBg: Colors.light.dangerLight,&#10;      pillColor: Colors.light.danger,&#10;      activeBg: '#FF5050',&#10;      activeTextColor: '#FFD9D9',&#10;    },&#10;    {&#10;      key: 'safe' as const,&#10;      title: '안전',&#10;      count: '1건',&#10;      pillBg: Colors.light.secondaryLight,&#10;      pillColor: Colors.light.secondary,&#10;      activeBg: '#2DB67D',&#10;      activeTextColor: '#D9F2E6',&#10;    },&#10;  ];&#10;&#10;  return (&#10;    &lt;View&gt;&#10;      &lt;View style={styles.groupsContainer}&gt;&#10;        {groups.map(({ key, title, count, pillBg, pillColor, activeBg, activeTextColor }) =&gt; {&#10;          const countValue = parseInt(count);&#10;          const isClickable = interactable &amp;&amp; countValue &gt; 0;&#10;          const isSelected = selectedGroup === key;&#10;          const isInactive = selectedGroup &amp;&amp; selectedGroup !== key;&#10;&#10;          const CardComponent = isClickable ? TouchableOpacity : View;&#10;&#10;          return (&#10;            &lt;CardComponent&#10;              key={key}&#10;              style={[&#10;                styles.groupCard,&#10;                isClickable &amp;&amp; styles.clickableCard,&#10;                isSelected &amp;&amp; { backgroundColor: activeBg },&#10;                isInactive &amp;&amp; { opacity: 0.4 },&#10;              ]}&#10;              onPress={isClickable ? () =&gt; onGroupPress?.(key) : undefined}&#10;              activeOpacity={isClickable ? 0.8 : 1}&#10;            &gt;&#10;              &lt;View style={[&#10;                styles.pill,&#10;                { backgroundColor: isSelected ? activeTextColor : pillBg }&#10;              ]}&gt;&#10;                &lt;Text style={[&#10;                  styles.pillText,&#10;                  { color: isSelected ? activeBg : pillColor }&#10;                ]}&gt;&#10;                  {title}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;              &lt;Text style={[&#10;                styles.groupCount,&#10;                !isClickable &amp;&amp; countValue === 0 &amp;&amp; styles.disabledCount,&#10;                { color: isSelected ? '#fff' : '#222' }&#10;              ]}&gt;&#10;                {count}&#10;              &lt;/Text&gt;&#10;            &lt;/CardComponent&gt;&#10;          );&#10;        })}&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  groupsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    gap: 12,&#10;    marginVertical: 8,&#10;  },&#10;  groupCard: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 20, // 더 둥글게&#10;    paddingVertical: 16,&#10;    marginHorizontal: 4,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  clickableCard: {&#10;    borderWidth: 1,&#10;    borderColor: 'transparent',&#10;  },&#10;  pill: {&#10;    borderRadius: 999,&#10;    paddingHorizontal: 16,&#10;    paddingVertical: 4,&#10;    marginBottom: 8,&#10;    minWidth: 48,&#10;    alignItems: 'center',&#10;  },&#10;  pillText: {&#10;    fontWeight: 'bold',&#10;    fontSize: 15,&#10;    letterSpacing: 0.5,&#10;  },&#10;  groupCount: {&#10;    fontWeight: 'bold',&#10;    fontSize: 18,&#10;    color: '#222',&#10;    marginTop: 2,&#10;  },&#10;  disabledCount: {&#10;    color: '#999',&#10;  },&#10;});&#10;&#10;export default InteractionRiskGroups;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/NavigationButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/NavigationButton.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/PrimaryButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/PrimaryButton.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';&#10;&#10;interface PrimaryButtonProps {&#10;  title: string;&#10;  onPress: () =&gt; void;&#10;  backgroundColor?: string;&#10;  textColor?: string;&#10;  width?: number | string;&#10;  disabled?: boolean;&#10;  style?: ViewStyle;&#10;  textStyle?: TextStyle;&#10;}&#10;&#10;export default function PrimaryButton({&#10;  title,&#10;  onPress,&#10;  backgroundColor = '#6366F1',&#10;  textColor = '#FFFFFF',&#10;  width = '100%',&#10;  disabled = false,&#10;  style,&#10;  textStyle&#10;}: PrimaryButtonProps) {&#10;  return (&#10;    &lt;TouchableOpacity&#10;      style={[&#10;        styles.button,&#10;        {&#10;          backgroundColor: disabled ? '#E5E7EB' : backgroundColor,&#10;          width: width,&#10;        },&#10;        style&#10;      ]}&#10;      onPress={onPress}&#10;      disabled={disabled}&#10;      activeOpacity={0.8}&#10;    &gt;&#10;      &lt;Text&#10;        style={[&#10;          styles.buttonText,&#10;          {&#10;            color: disabled ? '#9CA3AF' : textColor,&#10;          },&#10;          textStyle&#10;        ]}&#10;      &gt;&#10;        {title}&#10;      &lt;/Text&gt;&#10;    &lt;/TouchableOpacity&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  button: {&#10;    height: 54,&#10;    borderRadius: 27,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 3,&#10;    shadowColor: '#000',&#10;    shadowOffset: {&#10;      width: 0,&#10;      height: 2,&#10;    },&#10;    shadowOpacity: 0.25,&#10;    shadowRadius: 3.84,&#10;  },&#10;  buttonText: {&#10;    fontSize: 18,&#10;    fontWeight: '600',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle, DimensionValue } from 'react-native';&#10;&#10;interface PrimaryButtonProps {&#10;  title: string;&#10;  onPress: () =&gt; void;&#10;  backgroundColor?: string;&#10;  textColor?: string;&#10;  width?: DimensionValue;&#10;  disabled?: boolean;&#10;  style?: ViewStyle;&#10;  textStyle?: TextStyle;&#10;}&#10;&#10;export default function PrimaryButton({&#10;  title,&#10;  onPress,&#10;  backgroundColor = '#6366F1',&#10;  textColor = '#FFFFFF',&#10;  width = '100%',&#10;  disabled = false,&#10;  style,&#10;  textStyle&#10;}: PrimaryButtonProps) {&#10;  return (&#10;    &lt;TouchableOpacity&#10;      style={[&#10;        styles.button,&#10;        {&#10;          backgroundColor: disabled ? '#E5E7EB' : backgroundColor,&#10;          width: width,&#10;        },&#10;        style&#10;      ]}&#10;      onPress={onPress}&#10;      disabled={disabled}&#10;      activeOpacity={0.8}&#10;    &gt;&#10;      &lt;Text&#10;        style={[&#10;          styles.buttonText,&#10;          {&#10;            color: disabled ? '#9CA3AF' : textColor,&#10;          },&#10;          textStyle&#10;        ]}&#10;      &gt;&#10;        {title}&#10;      &lt;/Text&gt;&#10;    &lt;/TouchableOpacity&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  button: {&#10;    height: 54,&#10;    borderRadius: 27,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 3,&#10;    shadowColor: '#000',&#10;    shadowOffset: {&#10;      width: 0,&#10;      height: 2,&#10;    },&#10;    shadowOpacity: 0.25,&#10;    shadowRadius: 3.84,&#10;  },&#10;  buttonText: {&#10;    fontSize: 18,&#10;    fontWeight: '600',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/TextButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/TextButton.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';&#10;&#10;interface TextButtonProps {&#10;  title: string;&#10;  onPress: () =&gt; void;&#10;  color?: string;&#10;  fontSize?: number;&#10;  fontWeight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';&#10;  style?: ViewStyle;&#10;  textStyle?: TextStyle;&#10;}&#10;&#10;export default function TextButton({&#10;  title,&#10;  onPress,&#10;  color = '#6B7280',&#10;  fontSize = 16,&#10;  fontWeight = '500',&#10;  style,&#10;  textStyle&#10;}: TextButtonProps) {&#10;  return (&#10;    &lt;TouchableOpacity&#10;      style={[styles.button, style]}&#10;      onPress={onPress}&#10;      activeOpacity={0.6}&#10;    &gt;&#10;      &lt;Text&#10;        style={[&#10;          styles.buttonText,&#10;          {&#10;            color: color,&#10;            fontSize: fontSize,&#10;            fontWeight: fontWeight,&#10;          },&#10;          textStyle&#10;        ]}&#10;      &gt;&#10;        {title}&#10;      &lt;/Text&gt;&#10;    &lt;/TouchableOpacity&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  button: {&#10;    paddingVertical: 12,&#10;    paddingHorizontal: 24,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;  },&#10;  buttonText: {&#10;    textAlign: 'center',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/constants/Colors.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/constants/Colors.ts" />
              <option name="originalContent" value="export const Colors = {&#10;  light: {&#10;    text: '#11181C',&#10;    background: '#fff',&#10;    tint: '#0a7ea4',&#10;    icon: '#687076',&#10;    tabIconDefault: '#687076',&#10;    tabIconSelected: '#0a7ea4',&#10;    primary: '#007aff', // Blue&#10;    primaryLight: '#E6F0FF', // Light Blue&#10;    secondary: '#32cd32', // Green&#10;    secondaryLight: '#E6F4EA', // Light Green&#10;    warning: '#ffa500', // Orange&#10;    danger: '#ff3b30', // Red&#10;    dangerLight: '#FFE6E6', // Light Red&#10;    lightGray: '#f0f0f0',&#10;    mediumGray: '#999',&#10;    darkGray: '#666',&#10;    border: '#ddd',&#10;    // 네비게이션 바 관련 색상 추가&#10;    navbarBackground: '#fff',&#10;    navbarTabInactive: '#999',&#10;    navbarTabActive: '#007aff',&#10;    navbarTabActiveBg: 'rgba(37, 99, 235, 0.12)',&#10;    navbarCenterButton: '#007AFF',&#10;    navbarCenterButtonActive: '#0051D0',&#10;    navbarShadow: '#000',&#10;  },&#10;  dark: {&#10;    text: '#ECEDEE',&#10;    background: '#151515',&#10;    tint: '#fff',&#10;    icon: '#9BA1A6',&#10;    tabIconDefault: '#9BA1A6',&#10;    tabIconSelected: '#fff',&#10;    primary: '#007aff', // Blue&#10;    secondary: '#32cd32', // Green&#10;    warning: '#ffa500', // Orange&#10;    danger: '#ff3b30', // Red&#10;    lightGray: '#333',&#10;    mediumGray: '#666',&#10;    darkGray: '#999',&#10;    border: '#555',&#10;    // 네비게이션 바 관련 색상 추가 (다크 모드)&#10;    navbarBackground: '#1c1c1e',&#10;    navbarTabInactive: '#8e8e93',&#10;    navbarTabActive: '#007aff',&#10;    navbarTabActiveBg: 'rgba(0, 122, 255, 0.15)',&#10;    navbarCenterButton: '#007AFF',&#10;    navbarCenterButtonActive: '#0040dd',&#10;    navbarShadow: '#000',&#10;  },&#10;};&#10;" />
              <option name="updatedContent" value="export const Colors = {&#10;  light: {&#10;    text: '#11181C',&#10;    background: '#fff',&#10;    tint: '#0a7ea4',&#10;    icon: '#687076',&#10;    tabIconDefault: '#687076',&#10;    tabIconSelected: '#0a7ea4',&#10;    primary: '#007aff', // Blue&#10;    primaryLight: '#E6F0FF', // Light Blue&#10;    secondary: '#32cd32', // Green&#10;    secondaryLight: '#E6F4EA', // Light Green&#10;    warning: '#ffa500', // Orange&#10;    danger: '#ff3b30', // Red&#10;    dangerLight: '#FFE6E6', // Light Red&#10;    lightGray: '#f0f0f0',&#10;    mediumGray: '#999',&#10;    darkGray: '#666',&#10;    border: '#ddd',&#10;    // 네비게이션 바 관련 색상 추가&#10;    navbarBackground: '#fff',&#10;    navbarTabInactive: '#999',&#10;    navbarTabActive: '#007aff',&#10;    navbarTabActiveBg: 'rgba(37, 99, 235, 0.12)',&#10;    navbarCenterButton: '#007AFF',&#10;    navbarCenterButtonActive: '#0051D0',&#10;    navbarShadow: '#000',&#10;    textSecondary: '#6B7280',&#10;    accent: '#10B981',&#10;    card: '#FFFFFF',&#10;    shadow: 'rgba(0, 0, 0, 0.1)',&#10;  },&#10;  dark: {&#10;    text: '#ECEDEE',&#10;    background: '#151515',&#10;    tint: '#fff',&#10;    icon: '#9BA1A6',&#10;    tabIconDefault: '#9BA1A6',&#10;    tabIconSelected: '#fff',&#10;    primary: '#007aff', // Blue&#10;    secondary: '#32cd32', // Green&#10;    warning: '#ffa500', // Orange&#10;    danger: '#ff3b30', // Red&#10;    lightGray: '#333',&#10;    mediumGray: '#666',&#10;    darkGray: '#999',&#10;    border: '#555',&#10;    // 네비게이션 바 관련 색상 추가 (다크 모드)&#10;    navbarBackground: '#1c1c1e',&#10;    navbarTabInactive: '#8e8e93',&#10;    navbarTabActive: '#007aff',&#10;    navbarTabActiveBg: 'rgba(0, 122, 255, 0.15)',&#10;    navbarCenterButton: '#007AFF',&#10;    navbarCenterButtonActive: '#0040dd',&#10;    navbarShadow: '#000',&#10;    textSecondary: '#9CA3AF',&#10;    accent: '#10B981',&#10;    card: '#1F2937',&#10;    shadow: 'rgba(0, 0, 0, 0.3)',&#10;  },&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>