<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/index.tsx" />
              <option name="originalContent" value="import { Text, View, ScrollView, Image, StyleSheet } from &quot;react-native&quot;;&#10;import { Calendar } from &quot;react-native-calendars&quot;;&#10;import InteractionRiskGroups from &quot;../components/InteractionRiskGroups&quot;;&#10;import CircularGauge from &quot;../components/CircularGauge&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import BottomNavigationBar from &quot;../components/BottomNavigationBar&quot;;&#10;import SearchBar from '../components/SearchBar';&#10;&#10;export default function Index() {&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.light.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header with Status Bar */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;PillLink&lt;/Text&gt;&#10;          &lt;View style={styles.headerIcons}&gt;&#10;            {/* 알림, 설정 아이콘 등 추가 가능 */}&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Search Bar */}&#10;        &lt;SearchBar /&gt;&#10;&#10;        {/* Greeting Text - 더 친근하고 명확하게 */}&#10;        &lt;View style={styles.greetingContainer}&gt;&#10;          &lt;Text style={styles.greetingText}&gt;&#10;            안녕하세요, &lt;Text style={styles.greetingHighlight}&gt;유은정님!&lt;/Text&gt;&#10;          &lt;/Text&gt;&#10;          &lt;Text style={styles.greetingSubtext}&gt;&#10;            오늘도 건강한 하루 되세요 ✨&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Quick Actions - 빠른 액션 버튼들 */}&#10;        &lt;View style={styles.quickActionsContainer}&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;복용 기록&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;⏰&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;알림 설정&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;통계 보기&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Calendar Section */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;복용 캘린더&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;이번 달 복용 현황&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;Calendar&#10;            style={styles.calendar}&#10;            markedDates={{&#10;              &quot;2024-06-10&quot;: { selected: true, selectedColor: Colors.light.primary },&#10;              &quot;2024-06-11&quot;: { marked: true, dotColor: Colors.light.danger },&#10;              &quot;2024-06-12&quot;: { marked: true, dotColor: Colors.light.secondary },&#10;              &quot;2024-06-13&quot;: { marked: true, dotColor: Colors.light.warning },&#10;            }}&#10;            theme={{&#10;              todayTextColor: Colors.light.primary,&#10;              arrowColor: Colors.light.primary,&#10;              selectedDayBackgroundColor: Colors.light.primary,&#10;              selectedDayTextColor: Colors.light.background,&#10;              monthTextColor: Colors.light.text,&#10;              textDayFontWeight: '500',&#10;              textMonthFontWeight: 'bold',&#10;              textDayHeaderFontWeight: '600',&#10;            }}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Interaction Risk Section - 더 직관적인 디자인 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;상호작용 안전도&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;현재 복용 중인 약물들의 안전성&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskContent}&gt;&#10;            &lt;View style={styles.circularGaugeContainer}&gt;&#10;              &lt;CircularGauge percentage={79} size={100} /&gt;&#10;              &lt;Text style={styles.gaugeLabel}&gt;안전&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;              &lt;InteractionRiskGroups /&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Health News Section - 카드 디자인으로 개선 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;건강 뉴스&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;유은정님을 위한 맞춤 정보&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.newsCard}&gt;&#10;            &lt;View style={styles.newsImagePlaceholder}&gt;&#10;              &lt;Text style={styles.newsEmoji}&gt;&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.newsContent}&gt;&#10;              &lt;Text style={styles.newsTitle}&gt;겨울철 감기 예방을 위한 영양제 복용법&lt;/Text&gt;&#10;              &lt;Text style={styles.newsSubtitle}&gt;면역력 강화를 위한 비타민 D, C 섭취 가이드&lt;/Text&gt;&#10;              &lt;Text style={styles.newsDate}&gt;2시간 전&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingTop: 50,&#10;    paddingBottom: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.primary,&#10;  },&#10;  headerIcons: {&#10;    flexDirection: 'row',&#10;    gap: 12,&#10;  },&#10;  greetingContainer: {&#10;    marginVertical: 16,&#10;  },&#10;  greetingText: {&#10;    fontSize: 20,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  greetingHighlight: {&#10;    color: Colors.light.primary,&#10;    fontWeight: 'bold',&#10;  },&#10;  greetingSubtext: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  quickActionsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    marginBottom: 24,&#10;    gap: 12,&#10;  },&#10;  quickActionCard: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  quickActionIcon: {&#10;    fontSize: 24,&#10;    marginBottom: 8,&#10;  },&#10;  quickActionText: {&#10;    fontSize: 12,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    textAlign: 'center',&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  calendar: {&#10;    borderRadius: 16,&#10;    backgroundColor: '#fff',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  interactionRiskContent: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  circularGaugeContainer: {&#10;    alignItems: 'center',&#10;    marginRight: 20,&#10;  },&#10;  gaugeLabel: {&#10;    fontSize: 14,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginTop: 8,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    flex: 1,&#10;  },&#10;  newsCard: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    flexDirection: 'row',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  newsImagePlaceholder: {&#10;    width: 60,&#10;    height: 60,&#10;    borderRadius: 12,&#10;    backgroundColor: Colors.light.lightGray,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginRight: 16,&#10;  },&#10;  newsEmoji: {&#10;    fontSize: 24,&#10;  },&#10;  newsContent: {&#10;    flex: 1,&#10;    justifyContent: 'space-between',&#10;  },&#10;  newsTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  newsSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    lineHeight: 20,&#10;    marginBottom: 8,&#10;  },&#10;  newsDate: {&#10;    fontSize: 12,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '500',&#10;  },&#10;  // 기존 스타일들 제거하고 위의 새로운 스타일들로 대체&#10;});" />
              <option name="updatedContent" value="import { Text, View, ScrollView, Image, StyleSheet } from &quot;react-native&quot;;&#10;import { Calendar } from &quot;react-native-calendars&quot;;&#10;import InteractionRiskGroups from &quot;../components/InteractionRiskGroups&quot;;&#10;import CircularGauge from &quot;../components/CircularGauge&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import BottomNavigationBar from &quot;../components/BottomNavigationBar&quot;;&#10;import SearchBar from '../components/SearchBar';&#10;&#10;export default function Index() {&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.light.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header with Status Bar */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;PillLink&lt;/Text&gt;&#10;          &lt;View style={styles.headerIcons}&gt;&#10;            {/* 알림, 설정 아이콘 등 추가 가능 */}&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Search Bar */}&#10;        &lt;SearchBar /&gt;&#10;&#10;        {/* Greeting Text - 더 친근하고 명확하게 */}&#10;        &lt;View style={styles.greetingContainer}&gt;&#10;          &lt;Text style={styles.greetingText}&gt;&#10;            안녕하세요, &lt;Text style={styles.greetingHighlight}&gt;유은정님!&lt;/Text&gt;&#10;          &lt;/Text&gt;&#10;          &lt;Text style={styles.greetingSubtext}&gt;&#10;            오늘도 건강한 하루 되세요 ✨&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Quick Actions - 빠른 액션 버튼들 */}&#10;        &lt;View style={styles.quickActionsContainer}&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;복용 기록&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;⏰&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;알림 설정&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;통계 보기&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Calendar Section */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;복용 캘린더&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;이번 달 복용 현황&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;Calendar&#10;            style={styles.calendar}&#10;            markedDates={{&#10;              &quot;2024-06-10&quot;: { selected: true, selectedColor: Colors.light.primary },&#10;              &quot;2024-06-11&quot;: { marked: true, dotColor: Colors.light.danger },&#10;              &quot;2024-06-12&quot;: { marked: true, dotColor: Colors.light.secondary },&#10;              &quot;2024-06-13&quot;: { marked: true, dotColor: Colors.light.warning },&#10;            }}&#10;            theme={{&#10;              todayTextColor: Colors.light.primary,&#10;              arrowColor: Colors.light.primary,&#10;              selectedDayBackgroundColor: Colors.light.primary,&#10;              selectedDayTextColor: Colors.light.background,&#10;              monthTextColor: Colors.light.text,&#10;              textDayFontWeight: '500',&#10;              textMonthFontWeight: 'bold',&#10;              textDayHeaderFontWeight: '600',&#10;            }}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Interaction Risk Section - 카드 형식 제거 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;상호작용 안전도&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;현재 복용 중인 약물들의 안전성&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskContent}&gt;&#10;            &lt;View style={styles.circularGaugeContainer}&gt;&#10;              &lt;CircularGauge percentage={79} size={100} /&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;              &lt;InteractionRiskGroups /&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Health News Section - 카드 디자인으로 개선 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;건강 뉴스&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;유은정님을 위한 맞춤 정보&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.newsCard}&gt;&#10;            &lt;View style={styles.newsImagePlaceholder}&gt;&#10;              &lt;Text style={styles.newsEmoji}&gt;&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.newsContent}&gt;&#10;              &lt;Text style={styles.newsTitle}&gt;겨울철 감기 예방을 위한 영양제 복용법&lt;/Text&gt;&#10;              &lt;Text style={styles.newsSubtitle}&gt;면역력 강화를 위한 비타민 D, C 섭취 가이드&lt;/Text&gt;&#10;              &lt;Text style={styles.newsDate}&gt;2시간 전&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingTop: 50,&#10;    paddingBottom: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.primary,&#10;  },&#10;  headerIcons: {&#10;    flexDirection: 'row',&#10;    gap: 12,&#10;  },&#10;  greetingContainer: {&#10;    marginVertical: 16,&#10;  },&#10;  greetingText: {&#10;    fontSize: 20,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  greetingHighlight: {&#10;    color: Colors.light.primary,&#10;    fontWeight: 'bold',&#10;  },&#10;  greetingSubtext: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  quickActionsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    marginBottom: 24,&#10;    gap: 12,&#10;  },&#10;  quickActionCard: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  quickActionIcon: {&#10;    fontSize: 24,&#10;    marginBottom: 8,&#10;  },&#10;  quickActionText: {&#10;    fontSize: 12,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    textAlign: 'center',&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  calendar: {&#10;    borderRadius: 16,&#10;    backgroundColor: '#fff',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  interactionRiskContent: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    // backgroundColor: '#fff', // 카드 배경색 제거&#10;    // borderRadius: 16, // 카드 라운드 제거&#10;    // padding: 20, // 카드 패딩 제거&#10;    // shadowColor: '#000', // 그림자 제거&#10;    // shadowOffset: { width: 0, height: 2 },&#10;    // shadowOpacity: 0.06,&#10;    // shadowRadius: 8,&#10;    // elevation: 2,&#10;  },&#10;  circularGaugeContainer: {&#10;    alignItems: 'center',&#10;    marginRight: 20,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    flex: 1,&#10;  },&#10;  newsCard: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    flexDirection: 'row',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  newsImagePlaceholder: {&#10;    width: 60,&#10;    height: 60,&#10;    borderRadius: 12,&#10;    backgroundColor: Colors.light.lightGray,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginRight: 16,&#10;  },&#10;  newsEmoji: {&#10;    fontSize: 24,&#10;  },&#10;  newsContent: {&#10;    flex: 1,&#10;    justifyContent: 'space-between',&#10;  },&#10;  newsTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  newsSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    lineHeight: 20,&#10;    marginBottom: 8,&#10;  },&#10;  newsDate: {&#10;    fontSize: 12,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '500',&#10;  },&#10;  // 기존 스타일들 제거하고 위의 새로운 스타일들로 대체&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/interaction.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/interaction.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Modal } from 'react-native';&#10;import { Colors } from '../constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;&#10;export default function InteractionScreen() {&#10;  const [modalVisible, setModalVisible] = useState(false);&#10;  const [selectedItem, setSelectedItem] = useState&lt;{type: string, title: string, description: string} | null&gt;(null);&#10;  const [selectedGroup, setSelectedGroup] = useState&lt;'duplicate' | 'risk' | 'safe' | null&gt;(null);&#10;&#10;  // 각 그룹별 데이터&#10;  const groupData = {&#10;    duplicate: [&#10;      { name: '아스피린 + 와파린', description: '혈액 응고 방지 효과 중복', type: '중복' },&#10;    ],&#10;    risk: [&#10;      { name: '메트포르민 + 알코올', description: '저혈당 위험 증가', type: '위험' },&#10;    ],&#10;    safe: [&#10;      { name: '비타민 D + 칼슘', description: '뼈 건강 증진 효과', type: '안전' },&#10;    ],&#10;  };&#10;&#10;  // 그룹 버튼 클릭 핸들러&#10;  const handleGroupPress = (groupType: 'duplicate' | 'risk' | 'safe') =&gt; {&#10;    setSelectedGroup(selectedGroup === groupType ? null : groupType);&#10;  };&#10;&#10;  // 모달 열기 함수&#10;  const handleItemPress = (type: string, title: string, description: string) =&gt; {&#10;    setSelectedItem({ type, title, description });&#10;    setModalVisible(true);&#10;  };&#10;&#10;  // 모달 닫기 함수&#10;  const closeModal = () =&gt; {&#10;    setModalVisible(false);&#10;    setSelectedItem(null);&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.light.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Search Bar - 최상단으로 이동 */}&#10;        &lt;SearchBar placeholder=&quot;약물명을 검색하세요&quot; /&gt;&#10;&#10;        {/* Header */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;오말순님의 약물 복용 리포트&lt;/Text&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;복용 중인 약물들의 상호작용을 확인하세요&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 상호작용 안전도 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.gaugeSection}&gt;&#10;            &lt;CircularGauge percentage={79} size={180} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;            &lt;InteractionRiskGroups&#10;              interactable={true}&#10;              onGroupPress={handleGroupPress}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 선택된 그룹의 상세 정보 */}&#10;        {selectedGroup &amp;&amp; (&#10;          &lt;View style={styles.selectedGroupSection}&gt;&#10;            &lt;Text style={styles.selectedGroupTitle}&gt;&#10;              {selectedGroup === 'duplicate' ? '중복 약물' :&#10;               selectedGroup === 'risk' ? '위험한 상호작용' :&#10;               '안전한 조합'}&#10;            &lt;/Text&gt;&#10;&#10;            {groupData[selectedGroup].map((item, index) =&gt; (&#10;              &lt;TouchableOpacity&#10;                key={index}&#10;                style={styles.medicationItem}&#10;                onPress={() =&gt; handleItemPress(item.type, item.name,&#10;                  selectedGroup === 'duplicate' ? '동일한 효과를 가진 약물이 중복 처방되었습니다.' :&#10;                  selectedGroup === 'risk' ? '이 약물 조합은 위험한 부작용을 일으킬 수 있습니다.' :&#10;                  '이 약물 조합은 안전하며 서로 효과를 증진시킵니다.'&#10;                )}&#10;              &gt;&#10;                &lt;View style={styles.medicationInfo}&gt;&#10;                  &lt;Text style={styles.medicationName}&gt;{item.name}&lt;/Text&gt;&#10;                  &lt;Text style={styles.medicationDescription}&gt;{item.description}&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={[&#10;                  styles.riskBadge,&#10;                  { backgroundColor:&#10;                    selectedGroup === 'duplicate' ? Colors.light.primaryLight :&#10;                    selectedGroup === 'risk' ? Colors.light.dangerLight :&#10;                    Colors.light.secondaryLight&#10;                  }&#10;                ]}&gt;&#10;                  &lt;Text style={[&#10;                    styles.riskBadgeText,&#10;                    { color:&#10;                      selectedGroup === 'duplicate' ? Colors.light.primary :&#10;                      selectedGroup === 'risk' ? Colors.light.danger :&#10;                      Colors.light.secondary&#10;                    }&#10;                  ]}&gt;&#10;                    {item.type}&#10;                  &lt;/Text&gt;&#10;                &lt;/View&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            ))}&#10;          &lt;/View&gt;&#10;        )}&#10;&#10;        {/* 상호작용 상세 정보 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;Text style={styles.sectionTitle}&gt;상호작용 상세 정보&lt;/Text&gt;&#10;&#10;          {/* 중복 약물 */}&#10;          &lt;View style={styles.detailSection}&gt;&#10;            &lt;Text style={styles.detailSectionTitle}&gt;중복 약물&lt;/Text&gt;&#10;            &lt;TouchableOpacity&#10;              style={styles.medicationItem}&#10;              onPress={() =&gt; handleItemPress('중복', '아스피린 + 와파린', '동일한 효과를 가진 약물이 중복 처방되었습니다.')}&#10;            &gt;&#10;              &lt;View style={styles.medicationInfo}&gt;&#10;                &lt;Text style={styles.medicationName}&gt;아스피린 + 와파린&lt;/Text&gt;&#10;                &lt;Text style={styles.medicationDescription}&gt;혈액 응고 방지 효과 중복&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;              &lt;View style={[styles.riskBadge, { backgroundColor: Colors.light.primaryLight }]}&gt;&#10;                &lt;Text style={[styles.riskBadgeText, { color: Colors.light.primary }]}&gt;중복&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          &lt;/View&gt;&#10;&#10;          {/* 위험한 상호작용 */}&#10;          &lt;View style={styles.detailSection}&gt;&#10;            &lt;Text style={styles.detailSectionTitle}&gt;위험한 상호작용&lt;/Text&gt;&#10;            &lt;TouchableOpacity&#10;              style={styles.medicationItem}&#10;              onPress={() =&gt; handleItemPress('위험', '메트포르민 + 알코올', '이 약물 조합은 위험한 부작용을 일으킬 수 있습니다.')}&#10;            &gt;&#10;              &lt;View style={styles.medicationInfo}&gt;&#10;                &lt;Text style={styles.medicationName}&gt;메트포르민 + 알코올&lt;/Text&gt;&#10;                &lt;Text style={styles.medicationDescription}&gt;저혈당 위험 증가&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;              &lt;View style={[styles.riskBadge, { backgroundColor: Colors.light.dangerLight }]}&gt;&#10;                &lt;Text style={[styles.riskBadgeText, { color: Colors.light.danger }]}&gt;위험&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          &lt;/View&gt;&#10;&#10;          {/* 안전한 조합 */}&#10;          &lt;View style={styles.detailSection}&gt;&#10;            &lt;Text style={styles.detailSectionTitle}&gt;안전한 조합&lt;/Text&gt;&#10;            &lt;TouchableOpacity&#10;              style={styles.medicationItem}&#10;              onPress={() =&gt; handleItemPress('안전', '비타민 D + 칼슘', '이 약물 조합은 안전하며 서로 효과를 증진시킵니다.')}&#10;            &gt;&#10;              &lt;View style={styles.medicationInfo}&gt;&#10;                &lt;Text style={styles.medicationName}&gt;비타민 D + 칼슘&lt;/Text&gt;&#10;                &lt;Text style={styles.medicationDescription}&gt;뼈 건강 증진 효과&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;              &lt;View style={[styles.riskBadge, { backgroundColor: Colors.light.secondaryLight }]}&gt;&#10;                &lt;Text style={[styles.riskBadgeText, { color: Colors.light.secondary }]}&gt;안전&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;&#10;      {/* 모달 */}&#10;      &lt;Modal&#10;        animationType=&quot;slide&quot;&#10;        transparent={true}&#10;        visible={modalVisible}&#10;        onRequestClose={closeModal}&#10;      &gt;&#10;        &lt;View style={styles.modalOverlay}&gt;&#10;          &lt;View style={styles.modalContent}&gt;&#10;            &lt;View style={styles.modalHeader}&gt;&#10;              &lt;Text style={styles.modalTitle}&gt;{selectedItem?.title}&lt;/Text&gt;&#10;              &lt;TouchableOpacity onPress={closeModal} style={styles.closeButton}&gt;&#10;                &lt;Text style={styles.closeButtonText}&gt;✕&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;&#10;            &lt;View style={styles.modalBody}&gt;&#10;              &lt;View style={[&#10;                styles.modalBadge,&#10;                { backgroundColor:&#10;                  selectedItem?.type === '중복' ? Colors.light.primaryLight :&#10;                  selectedItem?.type === '위험' ? Colors.light.dangerLight :&#10;                  Colors.light.secondaryLight&#10;                }&#10;              ]}&gt;&#10;                &lt;Text style={[&#10;                  styles.modalBadgeText,&#10;                  { color:&#10;                    selectedItem?.type === '중복' ? Colors.light.primary :&#10;                    selectedItem?.type === '위험' ? Colors.light.danger :&#10;                    Colors.light.secondary&#10;                  }&#10;                ]}&gt;&#10;                  {selectedItem?.type}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;&#10;              &lt;Text style={styles.modalDescription}&gt;&#10;                {selectedItem?.description}&#10;              &lt;/Text&gt;&#10;&#10;              &lt;View style={styles.modalActions}&gt;&#10;                &lt;TouchableOpacity style={styles.actionButton} onPress={closeModal}&gt;&#10;                  &lt;Text style={styles.actionButtonText}&gt;의사와 상담하기&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={[styles.actionButton, styles.secondaryButton]} onPress={closeModal}&gt;&#10;                  &lt;Text style={[styles.actionButtonText, styles.secondaryButtonText]}&gt;나중에 확인&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;              &lt;/View&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/Modal&gt;&#10;&#10;      &lt;BottomNavigationBar activeIndex={1} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  header: {&#10;    paddingTop: 50,&#10;    paddingBottom: 20,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  gaugeSection: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginBottom: 24,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    // flex: 1, // 제거&#10;  },&#10;  detailSection: {&#10;    marginBottom: 24,&#10;  },&#10;  detailSectionTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 12,&#10;  },&#10;  medicationItem: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 12,&#10;    padding: 16,&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;    marginBottom: 8,&#10;  },&#10;  medicationInfo: {&#10;    flex: 1,&#10;  },&#10;  medicationName: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  medicationDescription: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  riskBadge: {&#10;    paddingHorizontal: 12,&#10;    paddingVertical: 4,&#10;    borderRadius: 12,&#10;  },&#10;  riskBadgeText: {&#10;    fontSize: 12,&#10;    fontWeight: 'bold',&#10;  },&#10;  modalOverlay: {&#10;    flex: 1,&#10;    backgroundColor: 'rgba(0, 0, 0, 0.5)',&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;  },&#10;  modalContent: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    margin: 20,&#10;    maxWidth: 340,&#10;    width: '90%',&#10;  },&#10;  modalHeader: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    padding: 20,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.light.border,&#10;  },&#10;  modalTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    flex: 1,&#10;  },&#10;  closeButton: {&#10;    padding: 4,&#10;  },&#10;  closeButtonText: {&#10;    fontSize: 18,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  modalBody: {&#10;    padding: 20,&#10;  },&#10;  modalBadge: {&#10;    alignSelf: 'flex-start',&#10;    paddingHorizontal: 12,&#10;    paddingVertical: 6,&#10;    borderRadius: 12,&#10;    marginBottom: 16,&#10;  },&#10;  modalBadgeText: {&#10;    fontSize: 14,&#10;    fontWeight: 'bold',&#10;  },&#10;  modalDescription: {&#10;    fontSize: 16,&#10;    color: Colors.light.text,&#10;    lineHeight: 24,&#10;    marginBottom: 24,&#10;  },&#10;  modalActions: {&#10;    gap: 12,&#10;  },&#10;  actionButton: {&#10;    backgroundColor: Colors.light.primary,&#10;    paddingVertical: 12,&#10;    paddingHorizontal: 24,&#10;    borderRadius: 8,&#10;    alignItems: 'center',&#10;  },&#10;  actionButtonText: {&#10;    color: '#fff',&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;  },&#10;  secondaryButton: {&#10;    backgroundColor: 'transparent',&#10;    borderWidth: 1,&#10;    borderColor: Colors.light.border,&#10;  },&#10;  secondaryButtonText: {&#10;    color: Colors.light.text,&#10;  },&#10;  selectedGroupSection: {&#10;    marginBottom: 32,&#10;  },&#10;  selectedGroupTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 16,&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Modal } from 'react-native';&#10;import { Colors } from '../constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;&#10;export default function InteractionScreen() {&#10;  const [modalVisible, setModalVisible] = useState(false);&#10;  const [selectedItem, setSelectedItem] = useState&lt;{type: string, title: string, description: string} | null&gt;(null);&#10;  const [selectedGroup, setSelectedGroup] = useState&lt;'duplicate' | 'risk' | 'safe' | null&gt;(null);&#10;&#10;  // 각 그룹별 데이터&#10;  const groupData = {&#10;    duplicate: [&#10;      { name: '아스피린 + 와파린', description: '혈액 응고 방지 효과 중복', type: '중복' },&#10;    ],&#10;    risk: [&#10;      { name: '메트포르민 + 알코올', description: '저혈당 위험 증가', type: '위험' },&#10;    ],&#10;    safe: [&#10;      { name: '비타민 D + 칼슘', description: '뼈 건강 증진 효과', type: '안전' },&#10;    ],&#10;  };&#10;&#10;  // 그룹 버튼 클릭 핸들러&#10;  const handleGroupPress = (groupType: 'duplicate' | 'risk' | 'safe') =&gt; {&#10;    setSelectedGroup(selectedGroup === groupType ? null : groupType);&#10;  };&#10;&#10;  // 모달 열기 함수&#10;  const handleItemPress = (type: string, title: string, description: string) =&gt; {&#10;    setSelectedItem({ type, title, description });&#10;    setModalVisible(true);&#10;  };&#10;&#10;  // 모달 닫기 함수&#10;  const closeModal = () =&gt; {&#10;    setModalVisible(false);&#10;    setSelectedItem(null);&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.light.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Search Bar - 최상단으로 이동 */}&#10;        &lt;SearchBar placeholder=&quot;약물명을 검색하세요&quot; /&gt;&#10;&#10;        {/* Header */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;오말순님의 약물 복용 리포트&lt;/Text&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;복용 중인 약물들의 상호작용을 확인하세요&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 상호작용 안전도 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.gaugeSection}&gt;&#10;            &lt;CircularGauge percentage={79} size={180} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;            &lt;InteractionRiskGroups&#10;              interactable={true}&#10;              onGroupPress={handleGroupPress}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 선택된 그룹의 상세 정보 */}&#10;        {selectedGroup &amp;&amp; (&#10;          &lt;View style={styles.selectedGroupSection}&gt;&#10;            &lt;Text style={styles.selectedGroupTitle}&gt;&#10;              {selectedGroup === 'duplicate' ? '중복 약물' :&#10;               selectedGroup === 'risk' ? '위험한 상호작용' :&#10;               '안전한 조합'}&#10;            &lt;/Text&gt;&#10;&#10;            {groupData[selectedGroup].map((item, index) =&gt; (&#10;              &lt;TouchableOpacity&#10;                key={index}&#10;                style={styles.medicationItem}&#10;                onPress={() =&gt; handleItemPress(item.type, item.name,&#10;                  selectedGroup === 'duplicate' ? '동일한 효과를 가진 약물이 중복 처방되었습니다.' :&#10;                  selectedGroup === 'risk' ? '이 약물 조합은 위험한 부작용을 일으킬 수 있습니다.' :&#10;                  '이 약물 조합은 안전하며 서로 효과를 증진시킵니다.'&#10;                )}&#10;              &gt;&#10;                &lt;View style={styles.medicationInfo}&gt;&#10;                  &lt;Text style={styles.medicationName}&gt;{item.name}&lt;/Text&gt;&#10;                  &lt;Text style={styles.medicationDescription}&gt;{item.description}&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={[&#10;                  styles.riskBadge,&#10;                  { backgroundColor:&#10;                    selectedGroup === 'duplicate' ? Colors.light.primaryLight :&#10;                    selectedGroup === 'risk' ? Colors.light.dangerLight :&#10;                    Colors.light.secondaryLight&#10;                  }&#10;                ]}&gt;&#10;                  &lt;Text style={[&#10;                    styles.riskBadgeText,&#10;                    { color:&#10;                      selectedGroup === 'duplicate' ? Colors.light.primary :&#10;                      selectedGroup === 'risk' ? Colors.light.danger :&#10;                      Colors.light.secondary&#10;                    }&#10;                  ]}&gt;&#10;                    {item.type}&#10;                  &lt;/Text&gt;&#10;                &lt;/View&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            ))}&#10;          &lt;/View&gt;&#10;        )}&#10;      &lt;/ScrollView&gt;&#10;&#10;      {/* 모달 */}&#10;      &lt;Modal&#10;        animationType=&quot;slide&quot;&#10;        transparent={true}&#10;        visible={modalVisible}&#10;        onRequestClose={closeModal}&#10;      &gt;&#10;        &lt;View style={styles.modalOverlay}&gt;&#10;          &lt;View style={styles.modalContent}&gt;&#10;            &lt;View style={styles.modalHeader}&gt;&#10;              &lt;Text style={styles.modalTitle}&gt;{selectedItem?.title}&lt;/Text&gt;&#10;              &lt;TouchableOpacity onPress={closeModal} style={styles.closeButton}&gt;&#10;                &lt;Text style={styles.closeButtonText}&gt;✕&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;&#10;            &lt;View style={styles.modalBody}&gt;&#10;              &lt;View style={[&#10;                styles.modalBadge,&#10;                { backgroundColor:&#10;                  selectedItem?.type === '중복' ? Colors.light.primaryLight :&#10;                  selectedItem?.type === '위험' ? Colors.light.dangerLight :&#10;                  Colors.light.secondaryLight&#10;                }&#10;              ]}&gt;&#10;                &lt;Text style={[&#10;                  styles.modalBadgeText,&#10;                  { color:&#10;                    selectedItem?.type === '중복' ? Colors.light.primary :&#10;                    selectedItem?.type === '위험' ? Colors.light.danger :&#10;                    Colors.light.secondary&#10;                  }&#10;                ]}&gt;&#10;                  {selectedItem?.type}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;&#10;              &lt;Text style={styles.modalDescription}&gt;&#10;                {selectedItem?.description}&#10;              &lt;/Text&gt;&#10;&#10;              &lt;View style={styles.modalActions}&gt;&#10;                &lt;TouchableOpacity style={styles.actionButton} onPress={closeModal}&gt;&#10;                  &lt;Text style={styles.actionButtonText}&gt;의사와 상담하기&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={[styles.actionButton, styles.secondaryButton]} onPress={closeModal}&gt;&#10;                  &lt;Text style={[styles.actionButtonText, styles.secondaryButtonText]}&gt;나중에 확인&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;              &lt;/View&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/Modal&gt;&#10;&#10;      &lt;BottomNavigationBar activeIndex={1} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  header: {&#10;    paddingTop: 50,&#10;    paddingBottom: 20,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  gaugeSection: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginBottom: 24,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    // flex: 1, // 제거&#10;  },&#10;  detailSection: {&#10;    marginBottom: 24,&#10;  },&#10;  detailSectionTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 12,&#10;  },&#10;  medicationItem: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 12,&#10;    padding: 16,&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;    marginBottom: 8,&#10;  },&#10;  medicationInfo: {&#10;    flex: 1,&#10;  },&#10;  medicationName: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  medicationDescription: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  riskBadge: {&#10;    paddingHorizontal: 12,&#10;    paddingVertical: 4,&#10;    borderRadius: 12,&#10;  },&#10;  riskBadgeText: {&#10;    fontSize: 12,&#10;    fontWeight: 'bold',&#10;  },&#10;  modalOverlay: {&#10;    flex: 1,&#10;    backgroundColor: 'rgba(0, 0, 0, 0.5)',&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;  },&#10;  modalContent: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    margin: 20,&#10;    maxWidth: 340,&#10;    width: '90%',&#10;  },&#10;  modalHeader: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    padding: 20,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.light.border,&#10;  },&#10;  modalTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    flex: 1,&#10;  },&#10;  closeButton: {&#10;    padding: 4,&#10;  },&#10;  closeButtonText: {&#10;    fontSize: 18,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  modalBody: {&#10;    padding: 20,&#10;  },&#10;  modalBadge: {&#10;    alignSelf: 'flex-start',&#10;    paddingHorizontal: 12,&#10;    paddingVertical: 6,&#10;    borderRadius: 12,&#10;    marginBottom: 16,&#10;  },&#10;  modalBadgeText: {&#10;    fontSize: 14,&#10;    fontWeight: 'bold',&#10;  },&#10;  modalDescription: {&#10;    fontSize: 16,&#10;    color: Colors.light.text,&#10;    lineHeight: 24,&#10;    marginBottom: 24,&#10;  },&#10;  modalActions: {&#10;    gap: 12,&#10;  },&#10;  actionButton: {&#10;    backgroundColor: Colors.light.primary,&#10;    paddingVertical: 12,&#10;    paddingHorizontal: 24,&#10;    borderRadius: 8,&#10;    alignItems: 'center',&#10;  },&#10;  actionButtonText: {&#10;    color: '#fff',&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;  },&#10;  secondaryButton: {&#10;    backgroundColor: 'transparent',&#10;    borderWidth: 1,&#10;    borderColor: Colors.light.border,&#10;  },&#10;  secondaryButtonText: {&#10;    color: Colors.light.text,&#10;  },&#10;  selectedGroupSection: {&#10;    marginBottom: 32,&#10;  },&#10;  selectedGroupTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 16,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/BottomNavigationBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/BottomNavigationBar.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, StyleSheet, TouchableOpacity, Haptics } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import { useRouter } from 'expo-router';&#10;import { Colors } from '../constants/Colors';&#10;&#10;// 더 직관적인 아이콘들로 변경&#10;const icons = [&#10;  'home',&#10;  'pill',&#10;  'plus',&#10;  'message-text',&#10;  'account-circle',&#10;];&#10;&#10;const labels = ['홈', '약물관리', '추가', '채팅', '내정보'];&#10;&#10;export default function BottomNavigationBar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;&#10;  const handleTabPress = async (idx: number) =&gt; {&#10;    // 햅틱 피드백 추가&#10;    try {&#10;      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);&#10;    } catch (error) {&#10;      // 햅틱 피드백이 지원되지 않는 환경에서는 무시&#10;    }&#10;&#10;    if (onTabPress) onTabPress(idx);&#10;&#10;    // 라우팅 로직&#10;    switch (idx) {&#10;      case 0:&#10;        router.push('/');&#10;        break;&#10;      case 1:&#10;        router.push('/interaction'); // 약물 상호작용 페이지로 이동&#10;        break;&#10;      case 2:&#10;        // router.push('/add');&#10;        break;&#10;      case 3:&#10;        // router.push('/chat');&#10;        break;&#10;      case 4:&#10;        router.push('/myinfo');&#10;        break;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; {&#10;        const isActive = activeIndex === idx;&#10;        const isCenter = idx === 2;&#10;&#10;        if (isCenter) {&#10;          return (&#10;            &lt;View key={idx} style={styles.centerCircleWrapper}&gt;&#10;              &lt;TouchableOpacity&#10;                style={[styles.centerCircle, isActive &amp;&amp; styles.centerCircleActive]}&#10;                onPress={() =&gt; handleTabPress(idx)}&#10;                activeOpacity={0.8}&#10;                accessibilityLabel={`${labels[idx]} 탭`}&#10;                accessibilityRole=&quot;button&quot;&#10;              &gt;&#10;                &lt;MaterialCommunityIcons&#10;                  name={icon}&#10;                  size={32}&#10;                  color={'#fff'}&#10;                /&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;          );&#10;        }&#10;&#10;        return (&#10;          &lt;TouchableOpacity&#10;            key={idx}&#10;            style={[styles.tab, isActive &amp;&amp; styles.activeTab]}&#10;            onPress={() =&gt; handleTabPress(idx)}&#10;            activeOpacity={0.6}&#10;            accessibilityLabel={`${labels[idx]} 탭`}&#10;            accessibilityRole=&quot;button&quot;&#10;          &gt;&#10;            &lt;MaterialCommunityIcons&#10;              name={icon}&#10;              size={26}&#10;              color={isActive ? Colors.light.navbarTabActive : Colors.light.navbarTabInactive}&#10;              style={[styles.icon, isActive &amp;&amp; styles.activeIcon]}&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        );&#10;      })}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: Colors.light.navbarBackground,&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: Colors.light.navbarShadow,&#10;    shadowOffset: { width: 0, height: -4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 12,&#10;    paddingBottom: 20,&#10;    paddingTop: 12,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-around',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 10,&#10;    paddingHorizontal: 8,&#10;    borderRadius: 20,&#10;    marginHorizontal: 2,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: Colors.light.navbarTabActiveBg,&#10;    transform: [{ scale: 1.02 }],&#10;  },&#10;  icon: {&#10;    marginBottom: 6,&#10;  },&#10;  activeIcon: {&#10;    // 추가 스타일 없음&#10;  },&#10;  centerCircleWrapper: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingHorizontal: 8,&#10;  },&#10;  centerCircle: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 32,&#10;    backgroundColor: Colors.light.navbarCenterButton,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    shadowColor: Colors.light.navbarCenterButton,&#10;    shadowOffset: { width: 0, height: 8 },&#10;    shadowOpacity: 0.3,&#10;    shadowRadius: 16,&#10;    elevation: 12,&#10;    position: 'absolute',&#10;    top: -24, // -48에서 -24로 다시 변경&#10;  },&#10;  centerCircleActive: {&#10;    backgroundColor: Colors.light.navbarCenterButtonActive,&#10;    transform: [{ scale: 1.05 }],&#10;    shadowOpacity: 0.4,&#10;  },&#10;});" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, StyleSheet, TouchableOpacity, Haptics } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import { useRouter } from 'expo-router';&#10;import { Colors } from '../constants/Colors';&#10;&#10;// 더 직관적인 아이콘들로 변경&#10;const icons = [&#10;  'home',&#10;  'pill',&#10;  'plus',&#10;  'message-text',&#10;  'account-circle',&#10;];&#10;&#10;const labels = ['홈', '약물관리', '추가', '채팅', '내정보'];&#10;&#10;export default function BottomNavigationBar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;&#10;  const handleTabPress = async (idx: number) =&gt; {&#10;    // 햅틱 피드백 추가&#10;    try {&#10;      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);&#10;    } catch (error) {&#10;      // 햅틱 피드백이 지원되지 않는 환경에서는 무시&#10;    }&#10;&#10;    if (onTabPress) onTabPress(idx);&#10;&#10;    // 라우팅 로직&#10;    switch (idx) {&#10;      case 0:&#10;        router.push('/');&#10;        break;&#10;      case 1:&#10;        router.push('/interaction'); // 약물 상호작용 페이지로 이동&#10;        break;&#10;      case 2:&#10;        // router.push('/add');&#10;        break;&#10;      case 3:&#10;        // router.push('/chat');&#10;        break;&#10;      case 4:&#10;        router.push('/myinfo');&#10;        break;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; {&#10;        const isActive = activeIndex === idx;&#10;        const isCenter = idx === 2;&#10;&#10;        if (isCenter) {&#10;          return (&#10;            &lt;View key={idx} style={styles.centerCircleWrapper}&gt;&#10;              &lt;TouchableOpacity&#10;                style={[styles.centerCircle, isActive &amp;&amp; styles.centerCircleActive]}&#10;                onPress={() =&gt; handleTabPress(idx)}&#10;                activeOpacity={0.8}&#10;                accessibilityLabel={`${labels[idx]} 탭`}&#10;                accessibilityRole=&quot;button&quot;&#10;              &gt;&#10;                &lt;MaterialCommunityIcons&#10;                  name={icon}&#10;                  size={32}&#10;                  color={'#fff'}&#10;                /&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;          );&#10;        }&#10;&#10;        return (&#10;          &lt;TouchableOpacity&#10;            key={idx}&#10;            style={[styles.tab, isActive &amp;&amp; styles.activeTab]}&#10;            onPress={() =&gt; handleTabPress(idx)}&#10;            activeOpacity={0.6}&#10;            accessibilityLabel={`${labels[idx]} 탭`}&#10;            accessibilityRole=&quot;button&quot;&#10;          &gt;&#10;            &lt;MaterialCommunityIcons&#10;              name={icon}&#10;              size={26}&#10;              color={isActive ? Colors.light.navbarTabActive : Colors.light.navbarTabInactive}&#10;              style={[styles.icon, isActive &amp;&amp; styles.activeIcon]}&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        );&#10;      })}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: Colors.light.navbarBackground,&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: Colors.light.navbarShadow,&#10;    shadowOffset: { width: 0, height: -4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 12,&#10;    paddingBottom: 20,&#10;    paddingTop: 12,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-around',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 10,&#10;    paddingHorizontal: 8,&#10;    borderRadius: 20,&#10;    marginHorizontal: 2,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: Colors.light.navbarTabActiveBg,&#10;    transform: [{ scale: 1.02 }],&#10;  },&#10;  icon: {&#10;    marginBottom: 6,&#10;  },&#10;  activeIcon: {&#10;    // 추가 스타일 없음&#10;  },&#10;  centerCircleWrapper: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingHorizontal: 8,&#10;  },&#10;  centerCircle: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 32,&#10;    backgroundColor: Colors.light.navbarCenterButton,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    shadowColor: Colors.light.navbarCenterButton,&#10;    shadowOffset: { width: 0, height: 8 },&#10;    shadowOpacity: 0.3,&#10;    shadowRadius: 16,&#10;    elevation: 12,&#10;    position: 'absolute',&#10;    top: -24, // -48에서 -24로 다시 변경&#10;  },&#10;  centerCircleActive: {&#10;    backgroundColor: Colors.light.navbarCenterButtonActive,&#10;    transform: [{ scale: 1.05 }],&#10;    shadowOpacity: 0.4,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CircularGauge.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CircularGauge.tsx" />
              <option name="originalContent" value="import React from &quot;react&quot;;&#10;import { View, Text, StyleSheet } from &quot;react-native&quot;;&#10;import Svg, { Defs, Stop, LinearGradient, Path } from &quot;react-native-svg&quot;;&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface CircularGaugeProps {&#10;  percentage: number;&#10;  size?: number;&#10;  strokeWidth?: number;&#10;  pieGradientColors?: string[];&#10;  centerCircleColor?: string;&#10;  percentageTextColor?: string;&#10;  percentageTextSize?: number;&#10;  percentageTextWeight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';&#10;}&#10;&#10;export default function CircularGauge({&#10;  percentage,&#10;  size = 72,&#10;  strokeWidth = 12,&#10;  pieGradientColors = ['#BD0000', '#FF8282'], // Default gradient colors&#10;  centerCircleColor = Colors.light.background, // Default white&#10;  percentageTextColor = Colors.light.text, // Default dark text&#10;  percentageTextSize = 20, // Default font size&#10;  percentageTextWeight = 'bold', // Default font weight&#10;}: CircularGaugeProps) {&#10;  // 게이지의 중심과 반지름 계산&#10;  const center = size / 2;&#10;  const radius = center - strokeWidth / 2;&#10;&#10;  // 파이 모양 게이지를 위한 각도 계산&#10;  const startAngle = -90;&#10;  const radians = (deg: number) =&gt; (deg * Math.PI) / 180;&#10;  const describeArc = (cx: number, cy: number, r: number, startAngle: number, endAngle: number) =&gt; {&#10;    const start = {&#10;      x: cx + r * Math.cos(radians(startAngle)),&#10;      y: cy + r * Math.sin(radians(startAngle)),&#10;    };&#10;    const end = {&#10;      x: cx + r * Math.cos(radians(endAngle)),&#10;      y: cy + r * Math.sin(radians(endAngle)),&#10;    };&#10;    const largeArcFlag = endAngle - startAngle &lt;= 180 ? &quot;0&quot; : &quot;1&quot;;&#10;    return [&#10;      `M ${cx} ${cy}`,&#10;      `L ${start.x} ${start.y}`,&#10;      `A ${r} ${r} 0 ${largeArcFlag} 1 ${end.x} ${end.y}`,&#10;      &quot;Z&quot;,&#10;    ].join(&quot; &quot;);&#10;  };&#10;  const endAngle = startAngle + (percentage / 100) * 360;&#10;  const piePath = describeArc(center, center, radius, startAngle, endAngle);&#10;  const bgPath = describeArc(center, center, radius, endAngle, startAngle + 360);&#10;&#10;  return (&#10;    &lt;View style={[styles.container, { width: size, height: size, borderRadius: size / 2 }]}&gt;&#10;      &lt;Svg width={size} height={size} style={{ position: 'absolute' }}&gt;&#10;        &lt;Defs&gt;&#10;          {/* 그라데이션 설정 */}&#10;          &lt;LinearGradient id=&quot;strokeGradient&quot; x1=&quot;50%&quot; y1=&quot;100%&quot; x2=&quot;50%&quot; y2=&quot;0%&quot;&gt;&#10;            {pieGradientColors.map((color, index) =&gt; (&#10;              &lt;Stop key={index} offset={`${(index / (pieGradientColors.length - 1)) * 100}%`} stopColor={color} /&gt;&#10;            ))}&#10;          &lt;/LinearGradient&gt;&#10;        &lt;/Defs&gt;&#10;        {/* 회색 부분 */}&#10;        &lt;Path&#10;          d={bgPath}&#10;          fill=&quot;#EFEFEF&quot;&#10;        /&gt;&#10;        {/* 파이 모양 게이지 */}&#10;        &lt;Path&#10;          d={piePath}&#10;          fill=&quot;url(#strokeGradient)&quot;&#10;        /&gt;&#10;      &lt;/Svg&gt;&#10;      {/* 중앙 흰색 원 */}&#10;      &lt;View style={{&#10;        position: 'absolute',&#10;        width: size * 0.6,&#10;        height: size * 0.6,&#10;        left: size * 0.2,&#10;        top: size * 0.2,&#10;        borderRadius: size * 0.3,&#10;        backgroundColor: centerCircleColor,&#10;        alignItems: 'center',&#10;        justifyContent: 'center',&#10;        shadowColor: Colors.light.text,&#10;        shadowOffset: { width: 0, height: 4 },&#10;        shadowOpacity: 0.22,&#10;        shadowRadius: 12,&#10;        elevation: 12,&#10;      }}&gt;&#10;        &lt;Text style={{&#10;          fontSize: percentageTextSize,&#10;          fontWeight: percentageTextWeight,&#10;          color: percentageTextColor,&#10;        }}&gt;{percentage}&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    overflow: 'hidden', // Clip content outside the rounded border&#10;  },&#10;});" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import { View, Text, StyleSheet } from &quot;react-native&quot;;&#10;import Svg, { Defs, Stop, LinearGradient, Path } from &quot;react-native-svg&quot;;&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface CircularGaugeProps {&#10;  percentage: number;&#10;  size?: number;&#10;  strokeWidth?: number;&#10;  pieGradientColors?: string[];&#10;  centerCircleColor?: string;&#10;  percentageTextColor?: string;&#10;  percentageTextSize?: number;&#10;  percentageTextWeight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';&#10;}&#10;&#10;export default function CircularGauge({&#10;  percentage,&#10;  size = 72,&#10;  strokeWidth = 12,&#10;  pieGradientColors = ['#BD0000', '#FF8282'], // Default gradient colors&#10;  centerCircleColor = Colors.light.background, // Default white&#10;  percentageTextColor = Colors.light.text, // Default dark text&#10;  percentageTextSize, // 기본값 제거 - 크기에 비례하여 계산&#10;  percentageTextWeight = 'bold', // Default font weight&#10;}: CircularGaugeProps) {&#10;  // 게이지의 중심과 반지름 계산&#10;  const center = size / 2;&#10;  const radius = center - strokeWidth / 2;&#10;&#10;  // 텍스트 크기를 게이지 크기에 비례하여 계산&#10;  const calculatedTextSize = percentageTextSize || (size * 0.18); // size의 18%로 계산&#10;&#10;  // 파이 모양 게이지를 위한 각도 계산&#10;  const startAngle = -90;&#10;  const radians = (deg: number) =&gt; (deg * Math.PI) / 180;&#10;  const describeArc = (cx: number, cy: number, r: number, startAngle: number, endAngle: number) =&gt; {&#10;    const start = {&#10;      x: cx + r * Math.cos(radians(startAngle)),&#10;      y: cy + r * Math.sin(radians(startAngle)),&#10;    };&#10;    const end = {&#10;      x: cx + r * Math.cos(radians(endAngle)),&#10;      y: cy + r * Math.sin(radians(endAngle)),&#10;    };&#10;    const largeArcFlag = endAngle - startAngle &lt;= 180 ? &quot;0&quot; : &quot;1&quot;;&#10;    return [&#10;      `M ${cx} ${cy}`,&#10;      `L ${start.x} ${start.y}`,&#10;      `A ${r} ${r} 0 ${largeArcFlag} 1 ${end.x} ${end.y}`,&#10;      &quot;Z&quot;,&#10;    ].join(&quot; &quot;);&#10;  };&#10;  const endAngle = startAngle + (percentage / 100) * 360;&#10;  const piePath = describeArc(center, center, radius, startAngle, endAngle);&#10;  const bgPath = describeArc(center, center, radius, endAngle, startAngle + 360);&#10;&#10;  return (&#10;    &lt;View style={[styles.container, { width: size, height: size, borderRadius: size / 2 }]}&gt;&#10;      &lt;Svg width={size} height={size} style={{ position: 'absolute' }}&gt;&#10;        &lt;Defs&gt;&#10;          {/* 그라데이션 설정 */}&#10;          &lt;LinearGradient id=&quot;strokeGradient&quot; x1=&quot;50%&quot; y1=&quot;100%&quot; x2=&quot;50%&quot; y2=&quot;0%&quot;&gt;&#10;            {pieGradientColors.map((color, index) =&gt; (&#10;              &lt;Stop key={index} offset={`${(index / (pieGradientColors.length - 1)) * 100}%`} stopColor={color} /&gt;&#10;            ))}&#10;          &lt;/LinearGradient&gt;&#10;        &lt;/Defs&gt;&#10;        {/* 회색 부분 */}&#10;        &lt;Path&#10;          d={bgPath}&#10;          fill=&quot;#EFEFEF&quot;&#10;        /&gt;&#10;        {/* 파이 모양 게이지 */}&#10;        &lt;Path&#10;          d={piePath}&#10;          fill=&quot;url(#strokeGradient)&quot;&#10;        /&gt;&#10;      &lt;/Svg&gt;&#10;      {/* 중앙 흰색 원 */}&#10;      &lt;View style={{&#10;        position: 'absolute',&#10;        width: size * 0.6,&#10;        height: size * 0.6,&#10;        left: size * 0.2,&#10;        top: size * 0.2,&#10;        borderRadius: size * 0.3,&#10;        backgroundColor: centerCircleColor,&#10;        alignItems: 'center',&#10;        justifyContent: 'center',&#10;        shadowColor: Colors.light.text,&#10;        shadowOffset: { width: 0, height: 4 },&#10;        shadowOpacity: 0.22,&#10;        shadowRadius: 12,&#10;        elevation: 12,&#10;      }}&gt;&#10;        &lt;Text style={{&#10;          fontSize: calculatedTextSize,&#10;          fontWeight: 'bold',&#10;          color: '#222',&#10;        }}&gt;{percentage}&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    overflow: 'hidden', // Clip content outside the rounded border&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CustomNavbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CustomNavbar.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;&#10;// 네비바 아이콘 예시 (실제 경로에 맞게 수정 필요)&#10;const icons = [&#10;  require('../assets/images/home.png'),&#10;  require('../assets/images/search.png'),&#10;  require('../assets/images/plus.png'),&#10;  require('../assets/images/alert.png'),&#10;  require('../assets/images/user.png'),&#10;];&#10;&#10;const labels = ['홈', '검색', '추가', '알림', '내정보'];&#10;&#10;export default function CustomNavbar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; (&#10;        &lt;TouchableOpacity&#10;          key={idx}&#10;          style={[styles.tab, activeIndex === idx &amp;&amp; styles.activeTab]}&#10;          onPress={() =&gt; {&#10;            if (onTabPress) onTabPress(idx);&#10;            // router.push(...) 등 라우팅 처리 가능&#10;          }}&#10;          activeOpacity={0.7}&#10;        &gt;&#10;          &lt;Image source={icon} style={[styles.icon, activeIndex === idx &amp;&amp; styles.activeIcon]} /&gt;&#10;          &lt;Text style={[styles.label, activeIndex === idx &amp;&amp; styles.activeLabel]}&gt;{labels[idx]}&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      ))}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: '#fff',&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: -2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 8,&#10;    paddingBottom: 12,&#10;    paddingTop: 8,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 4,&#10;    borderRadius: 16,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: '#F5F5F5',&#10;  },&#10;  icon: {&#10;    width: 28,&#10;    height: 28,&#10;    marginBottom: 2,&#10;    opacity: 0.7,&#10;  },&#10;  activeIcon: {&#10;    opacity: 1,&#10;  },&#10;  label: {&#10;    fontSize: 12,&#10;    color: '#888',&#10;    fontWeight: '500',&#10;  },&#10;  activeLabel: {&#10;    color: '#222',&#10;    fontWeight: 'bold',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/InteractionRiskGroups.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/InteractionRiskGroups.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface InteractionRiskGroupsProps {&#10;  onGroupPress?: (groupType: 'duplicate' | 'risk' | 'safe') =&gt; void;&#10;  interactable?: boolean;&#10;}&#10;&#10;const InteractionRiskGroups = ({ onGroupPress, interactable = false }: InteractionRiskGroupsProps) =&gt; {&#10;  // Card data configuration&#10;  // Order: 중복, 위험, 안전&#10;  const groups = [&#10;    {&#10;      key: 'duplicate' as const,&#10;      title: '중복',&#10;      count: '1건',&#10;      pillBg: Colors.light.primaryLight,&#10;      pillColor: Colors.light.primary,&#10;    },&#10;    {&#10;      key: 'risk' as const,&#10;      title: '위험',&#10;      count: '0건',&#10;      pillBg: Colors.light.dangerLight,&#10;      pillColor: Colors.light.danger,&#10;    },&#10;    {&#10;      key: 'safe' as const,&#10;      title: '안전',&#10;      count: '0건',&#10;      pillBg: Colors.light.secondaryLight,&#10;      pillColor: Colors.light.secondary,&#10;    },&#10;  ];&#10;&#10;  return (&#10;    &lt;View style={styles.groupsContainer}&gt;&#10;      {groups.map(({ key, title, count, pillBg, pillColor }) =&gt; {&#10;        const countValue = parseInt(count);&#10;        const isClickable = interactable &amp;&amp; countValue &gt; 0;&#10;&#10;        const CardComponent = isClickable ? TouchableOpacity : View;&#10;&#10;        return (&#10;          &lt;CardComponent&#10;            key={key}&#10;            style={[styles.groupCard, isClickable &amp;&amp; styles.clickableCard]}&#10;            onPress={isClickable ? () =&gt; onGroupPress?.(key) : undefined}&#10;            activeOpacity={isClickable ? 0.8 : 1}&#10;          &gt;&#10;            &lt;View style={[styles.pill, { backgroundColor: pillBg }]}&gt;&#10;              &lt;Text style={[styles.pillText, { color: pillColor }]}&gt;{title}&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;Text style={[styles.groupCount, !isClickable &amp;&amp; countValue === 0 &amp;&amp; styles.disabledCount]}&gt;&#10;              {count}&#10;            &lt;/Text&gt;&#10;          &lt;/CardComponent&gt;&#10;        );&#10;      })}&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  groupsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    gap: 12,&#10;    marginVertical: 8,&#10;  },&#10;  groupCard: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 20, // 더 둥글게&#10;    paddingVertical: 16,&#10;    marginHorizontal: 4,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  clickableCard: {&#10;    borderWidth: 1,&#10;    borderColor: 'transparent',&#10;  },&#10;  pill: {&#10;    borderRadius: 999,&#10;    paddingHorizontal: 16,&#10;    paddingVertical: 4,&#10;    marginBottom: 8,&#10;    minWidth: 48,&#10;    alignItems: 'center',&#10;  },&#10;  pillText: {&#10;    fontWeight: 'bold',&#10;    fontSize: 15,&#10;    letterSpacing: 0.5,&#10;  },&#10;  groupCount: {&#10;    fontWeight: 'bold',&#10;    fontSize: 18,&#10;    color: '#222',&#10;    marginTop: 2,&#10;  },&#10;  disabledCount: {&#10;    color: '#999',&#10;  },&#10;});&#10;&#10;export default InteractionRiskGroups;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface InteractionRiskGroupsProps {&#10;  onGroupPress?: (groupType: 'duplicate' | 'risk' | 'safe') =&gt; void;&#10;  interactable?: boolean;&#10;}&#10;&#10;const InteractionRiskGroups = ({ onGroupPress, interactable = false }: InteractionRiskGroupsProps) =&gt; {&#10;  // Card data configuration&#10;  // Order: 중복, 위험, 안전&#10;  const groups = [&#10;    {&#10;      key: 'duplicate' as const,&#10;      title: '중복',&#10;      count: '1건',&#10;      pillBg: Colors.light.primaryLight,&#10;      pillColor: Colors.light.primary,&#10;    },&#10;    {&#10;      key: 'risk' as const,&#10;      title: '위험',&#10;      count: '1건',&#10;      pillBg: Colors.light.dangerLight,&#10;      pillColor: Colors.light.danger,&#10;    },&#10;    {&#10;      key: 'safe' as const,&#10;      title: '안전',&#10;      count: '1건',&#10;      pillBg: Colors.light.secondaryLight,&#10;      pillColor: Colors.light.secondary,&#10;    },&#10;  ];&#10;&#10;  return (&#10;    &lt;View style={styles.groupsContainer}&gt;&#10;      {groups.map(({ key, title, count, pillBg, pillColor }) =&gt; {&#10;        const countValue = parseInt(count);&#10;        const isClickable = interactable &amp;&amp; countValue &gt; 0;&#10;&#10;        const CardComponent = isClickable ? TouchableOpacity : View;&#10;&#10;        return (&#10;          &lt;CardComponent&#10;            key={key}&#10;            style={[styles.groupCard, isClickable &amp;&amp; styles.clickableCard]}&#10;            onPress={isClickable ? () =&gt; onGroupPress?.(key) : undefined}&#10;            activeOpacity={isClickable ? 0.8 : 1}&#10;          &gt;&#10;            &lt;View style={[styles.pill, { backgroundColor: pillBg }]}&gt;&#10;              &lt;Text style={[styles.pillText, { color: pillColor }]}&gt;{title}&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;Text style={[styles.groupCount, !isClickable &amp;&amp; countValue === 0 &amp;&amp; styles.disabledCount]}&gt;&#10;              {count}&#10;            &lt;/Text&gt;&#10;          &lt;/CardComponent&gt;&#10;        );&#10;      })}&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  groupsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    gap: 12,&#10;    marginVertical: 8,&#10;  },&#10;  groupCard: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 20, // 더 둥글게&#10;    paddingVertical: 16,&#10;    marginHorizontal: 4,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  clickableCard: {&#10;    borderWidth: 1,&#10;    borderColor: 'transparent',&#10;  },&#10;  pill: {&#10;    borderRadius: 999,&#10;    paddingHorizontal: 16,&#10;    paddingVertical: 4,&#10;    marginBottom: 8,&#10;    minWidth: 48,&#10;    alignItems: 'center',&#10;  },&#10;  pillText: {&#10;    fontWeight: 'bold',&#10;    fontSize: 15,&#10;    letterSpacing: 0.5,&#10;  },&#10;  groupCount: {&#10;    fontWeight: 'bold',&#10;    fontSize: 18,&#10;    color: '#222',&#10;    marginTop: 2,&#10;  },&#10;  disabledCount: {&#10;    color: '#999',&#10;  },&#10;});&#10;&#10;export default InteractionRiskGroups;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/SearchBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/SearchBar.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, TextInput, StyleSheet, Image } from 'react-native';&#10;import { Colors } from '../constants/Colors';&#10;&#10;export default function SearchBar({ value, onChangeText, placeholder = '복용하시는 약을 등록해보세요' }: {&#10;  value?: string;&#10;  onChangeText?: (text: string) =&gt; void;&#10;  placeholder?: string;&#10;}) {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Image&#10;        source={{ uri: 'https://img.icons8.com/ios-filled/50/888888/search--v1.png' }}&#10;        style={styles.icon}&#10;        resizeMode=&quot;contain&quot;&#10;      /&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder={placeholder}&#10;        placeholderTextColor={Colors.light.mediumGray}&#10;        value={value}&#10;        onChangeText={onChangeText}&#10;        underlineColorAndroid=&quot;transparent&quot;&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#F5F6FA',&#10;    borderRadius: 16,&#10;    paddingHorizontal: 14,&#10;    paddingVertical: 10,&#10;    marginVertical: 8,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  icon: {&#10;    width: 22,&#10;    height: 22,&#10;    marginRight: 8,&#10;    tintColor: '#888',&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    fontSize: 16,&#10;    color: '#222',&#10;    paddingVertical: 0,&#10;    backgroundColor: 'transparent',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/constants/Colors.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/constants/Colors.ts" />
              <option name="originalContent" value="export const Colors = {&#10;  light: {&#10;    text: '#11181C',&#10;    background: '#fff',&#10;    tint: '#0a7ea4',&#10;    icon: '#687076',&#10;    tabIconDefault: '#687076',&#10;    tabIconSelected: '#0a7ea4',&#10;    primary: '#007aff', // Blue&#10;    primaryLight: '#E6F0FF', // Light Blue&#10;    secondary: '#32cd32', // Green&#10;    secondaryLight: '#E6F4EA', // Light Green&#10;    warning: '#ffa500', // Orange&#10;    danger: '#ff3b30', // Red&#10;    dangerLight: '#FFE6E6', // Light Red&#10;    lightGray: '#f0f0f0',&#10;    mediumGray: '#999',&#10;    darkGray: '#666',&#10;    border: '#ddd',&#10;  },&#10;  dark: {&#10;    text: '#ECEDEE',&#10;    background: '#151515',&#10;    tint: '#fff',&#10;    icon: '#9BA1A6',&#10;    tabIconDefault: '#9BA1A6',&#10;    tabIconSelected: '#fff',&#10;    primary: '#007aff', // Blue&#10;    secondary: '#32cd32', // Green&#10;    warning: '#ffa500', // Orange&#10;    danger: '#ff3b30', // Red&#10;    lightGray: '#333',&#10;    mediumGray: '#666',&#10;    darkGray: '#999',&#10;    border: '#555',&#10;  },&#10;};&#10;" />
              <option name="updatedContent" value="export const Colors = {&#10;  light: {&#10;    text: '#11181C',&#10;    background: '#fff',&#10;    tint: '#0a7ea4',&#10;    icon: '#687076',&#10;    tabIconDefault: '#687076',&#10;    tabIconSelected: '#0a7ea4',&#10;    primary: '#007aff', // Blue&#10;    primaryLight: '#E6F0FF', // Light Blue&#10;    secondary: '#32cd32', // Green&#10;    secondaryLight: '#E6F4EA', // Light Green&#10;    warning: '#ffa500', // Orange&#10;    danger: '#ff3b30', // Red&#10;    dangerLight: '#FFE6E6', // Light Red&#10;    lightGray: '#f0f0f0',&#10;    mediumGray: '#999',&#10;    darkGray: '#666',&#10;    border: '#ddd',&#10;    // 네비게이션 바 관련 색상 추가&#10;    navbarBackground: '#fff',&#10;    navbarTabInactive: '#999',&#10;    navbarTabActive: '#007aff',&#10;    navbarTabActiveBg: 'rgba(37, 99, 235, 0.12)',&#10;    navbarCenterButton: '#007AFF',&#10;    navbarCenterButtonActive: '#0051D0',&#10;    navbarShadow: '#000',&#10;  },&#10;  dark: {&#10;    text: '#ECEDEE',&#10;    background: '#151515',&#10;    tint: '#fff',&#10;    icon: '#9BA1A6',&#10;    tabIconDefault: '#9BA1A6',&#10;    tabIconSelected: '#fff',&#10;    primary: '#007aff', // Blue&#10;    secondary: '#32cd32', // Green&#10;    warning: '#ffa500', // Orange&#10;    danger: '#ff3b30', // Red&#10;    lightGray: '#333',&#10;    mediumGray: '#666',&#10;    darkGray: '#999',&#10;    border: '#555',&#10;    // 네비게이션 바 관련 색상 추가 (다크 모드)&#10;    navbarBackground: '#1c1c1e',&#10;    navbarTabInactive: '#8e8e93',&#10;    navbarTabActive: '#007aff',&#10;    navbarTabActiveBg: 'rgba(0, 122, 255, 0.15)',&#10;    navbarCenterButton: '#007AFF',&#10;    navbarCenterButtonActive: '#0040dd',&#10;    navbarShadow: '#000',&#10;  },&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>