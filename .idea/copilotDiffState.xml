<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/_layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/_layout.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from &quot;react&quot;;&#10;import { Stack, useRouter, useSegments } from &quot;expo-router&quot;;&#10;import { View, ActivityIndicator } from &quot;react-native&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import { DevModeProvider } from &quot;@/contexts/DevModeContext&quot;;&#10;  }, []);&#10;&#10;  // AsyncStorage 변경을 감지하기 위한 interval&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(checkOnboardingStatus, 1000);&#10;    return () =&gt; clearInterval(interval);&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;View&#10;        style={{&#10;          flex: 1,&#10;          justifyContent: &quot;center&quot;,&#10;          alignItems: &quot;center&quot;,&#10;          backgroundColor: Colors.background,&#10;        }}&#10;      &gt;&#10;        &lt;ActivityIndicator size=&quot;large&quot; color={Colors.primary} /&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;Stack screenOptions={{&#10;      headerShown: false,&#10;      animation: &quot;none&quot;,&#10;      presentation: &quot;card&quot;,&#10;      animationDuration: 0,&#10;      gestureEnabled: false&#10;    }}&gt;&#10;      &lt;Stack.Screen name=&quot;onboarding&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;index&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;chat&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;interaction&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;myinfo&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;family/[id]&quot; /&gt;&#10;    &lt;/Stack&gt;&#10;  );&#10;}&#10;&#10;export default function RootLayout() {&#10;  return (&#10;    &lt;DevModeProvider&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;      &lt;RootLayoutNav /&gt;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from &quot;react&quot;;&#10;import { Stack, useRouter, useSegments } from &quot;expo-router&quot;;&#10;import { View, ActivityIndicator } from &quot;react-native&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import { DevModeProvider } from &quot;@/contexts/DevModeContext&quot;;&#10;import { FamilyDataProvider } from '@/contexts/FamilyDataContext';&#10;&#10;const ONBOARDING_COMPLETED_KEY = &quot;onboarding_completed&quot;;&#10;&#10;function RootLayoutNav() {&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [showOnboarding, setShowOnboarding] = useState(false);&#10;  const segments = useSegments();&#10;  const router = useRouter();&#10;&#10;  const checkOnboardingStatus = async () =&gt; {&#10;    try {&#10;      const onboardingCompleted = await AsyncStorage.getItem(ONBOARDING_COMPLETED_KEY);&#10;      const shouldShowOnboarding = onboardingCompleted !== &quot;true&quot;;&#10;      setShowOnboarding(shouldShowOnboarding);&#10;&#10;      // 온보딩 상태에 따라 네비게이션&#10;      if (shouldShowOnboarding &amp;&amp; segments[0] !== &quot;onboarding&quot;) {&#10;        router.replace(&quot;/onboarding&quot;);&#10;      } else if (!shouldShowOnboarding &amp;&amp; segments[0] === &quot;onboarding&quot;) {&#10;        router.replace(&quot;/&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error checking onboarding status:&quot;, error);&#10;      setShowOnboarding(true);&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    checkOnboardingStatus();&#10;  }, []);&#10;&#10;  // AsyncStorage 변경을 감지하기 위한 interval&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(checkOnboardingStatus, 1000);&#10;    return () =&gt; clearInterval(interval);&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;View&#10;        style={{&#10;          flex: 1,&#10;          justifyContent: &quot;center&quot;,&#10;          alignItems: &quot;center&quot;,&#10;          backgroundColor: Colors.background,&#10;        }}&#10;      &gt;&#10;        &lt;ActivityIndicator size=&quot;large&quot; color={Colors.primary} /&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;Stack screenOptions={{&#10;      headerShown: false,&#10;      animation: &quot;none&quot;,&#10;      presentation: &quot;card&quot;,&#10;      animationDuration: 0,&#10;      gestureEnabled: false&#10;    }}&gt;&#10;      &lt;Stack.Screen name=&quot;onboarding&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;index&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;chat&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;interaction&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;myinfo&quot; /&gt;&#10;      &lt;Stack.Screen name=&quot;family/[id]&quot; /&gt;&#10;    &lt;/Stack&gt;&#10;  );&#10;}&#10;&#10;export default function RootLayout() {&#10;  return (&#10;    &lt;DevModeProvider&gt;&#10;      &lt;FamilyDataProvider&gt;&#10;        &lt;RootLayoutNav /&gt;&#10;      &lt;/FamilyDataProvider&gt;&#10;    &lt;/DevModeProvider&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/index.tsx" />
              <option name="originalContent" value="import React, { useEffect, useRef, useState } from 'react';&#10;import { Text, View, ScrollView, StyleSheet, Animated, TouchableOpacity } from &quot;react-native&quot;;&#10;import InteractionRiskGroups from &quot;../components/InteractionRiskGroups&quot;;&#10;import CircularGauge from &quot;../components/CircularGauge&quot;;&#10;import CalendarComponent from &quot;../components/CalendarComponent&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import BottomNavigationBar from &quot;../components/BottomNavigationBar&quot;;&#10;import SearchBar from '../components/SearchBar';&#10;import { useSafeAreaInsets } from 'react-native-safe-area-context';&#10;import * as Haptics from 'expo-haptics';&#10;import { INTERACTION_DATA } from &quot;@/constants/InteractionData&quot;;&#10;import { FAMILY_DATA } from &quot;@/constants/FamilyData&quot;;&#10;import FamilyGroup from &quot;@/components/FamilyGroup&quot;;&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;                useNativeDriver: true,&#10;            }).start();&#10;            Animated.timing(slideAnim, {&#10;                toValue: 0,&#10;                duration: 600,&#10;                delay: index * 150,&#10;                useNativeDriver: true,&#10;            }).start();&#10;        } else {&#10;            fadeAnim.setValue(1);&#10;            slideAnim.setValue(0);&#10;        }&#10;    }, [shouldAnimate, index]);&#10;&#10;    return (&#10;        &lt;Animated.View style={{ opacity: fadeAnim, transform: [{ translateY: slideAnim }] }}&gt;&#10;            {children}&#10;        &lt;/Animated.View&gt;&#10;    );&#10;};&#10;&#10;export default function Index() {&#10;  const insets = useSafeAreaInsets();&#10;  const [selectedId, setSelectedId] = useState&lt;string | null&gt;(null);&#10;&#10;  // 선택된 가족 ID를 AsyncStorage에서 불러오기&#10;  useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;      const savedId = await AsyncStorage.getItem('selected_family_id');&#10;      if (savedId) setSelectedId(savedId);&#10;      else setSelectedId(FAMILY_DATA[1]?.id || null);&#10;    })();&#10;  }, []);&#10;&#10;  // This effect runs only once when the component mounts for the first time in the app session.&#10;  // It sets the flag to true, so subsequent mounts/re-renders won't trigger the animation.&#10;  useEffect(() =&gt; {&#10;    if (!hasAnimatedOnce) {&#10;        hasAnimatedOnce = true;&#10;    }&#10;  }, []);&#10;&#10;  const onQuickActionPress = (action: string) =&gt; {&#10;    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);&#10;    // Add navigation logic here based on the action&#10;    console.log(action, 'pressed');&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 120, paddingTop: insets.top + 10 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;AnimatedSection index={0} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.header}&gt;&#10;                &lt;Text style={styles.headerTitle}&gt;PillLink&lt;/Text&gt;&#10;                &lt;View style={styles.headerIcons}&gt;&#10;                    {/* 상단 프로필 아바타 삭제됨 */}&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Search Bar */}&#10;        &lt;AnimatedSection index={1} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;SearchBar /&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Greeting Text */}&#10;        &lt;AnimatedSection index={2} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.greetingContainer}&gt;&#10;            &lt;Text style={styles.greetingText}&gt;&#10;                안녕하세요, &lt;Text style={styles.greetingHighlight}&gt;유은정님!&lt;/Text&gt;&#10;            &lt;/Text&gt;&#10;            &lt;Text style={styles.greetingSubtext}&gt;&#10;                오늘도 건강한 하루 되세요 ✨&#10;            &lt;/Text&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Quick Actions */}&#10;        &lt;AnimatedSection index={3} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.quickActionsContainer}&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('History')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;복용 기록&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('Settings')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;⏰&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;알림 설정&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('Stats')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;통계 보기&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Calendar Section */}&#10;        &lt;AnimatedSection index={4} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;CalendarComponent /&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Interaction Risk Section */}&#10;        &lt;AnimatedSection index={5} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.sectionContainer}&gt;&#10;                &lt;View style={styles.sectionHeader}&gt;&#10;                    &lt;Text style={styles.sectionTitle}&gt;상호작용 안전도&lt;/Text&gt;&#10;                    &lt;Text style={styles.sectionSubtitle}&gt;현재 복용 중인 약물들의 안전성&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={styles.card}&gt;&#10;                    &lt;View style={styles.interactionRiskContent}&gt;&#10;                        &lt;View style={styles.circularGaugeContainer}&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;CircularGauge value={INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;InteractionRiskGroups /&gt;&#10;              setSelectedId(id);&#10;              await AsyncStorage.setItem('selected_family_id', id);&#10;            }}&#10;                        &lt;InteractionRiskGroups /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;                        &lt;InteractionRiskGroups /&gt;&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;                        &lt;InteractionRiskGroups /&gt;&#10;    fontSize: 22,&#10;    fontWeight: '700',&#10;    color: Colors.text,&#10;    marginBottom: 6,&#10;  },&#10;  greetingHighlight: {&#10;    color: Colors.primary,&#10;    fontWeight: 'bold',&#10;  },&#10;  greetingSubtext: {&#10;    fontSize: 15,&#10;    color: Colors.mediumGray,&#10;  },&#10;                        &lt;InteractionRiskGroups /&gt;&#10;    gap: 12,&#10;  },&#10;  quickActionCard: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    alignItems: 'center',&#10;    shadowColor: '#aab4c1',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 3,&#10;    borderWidth: 1,&#10;    borderColor: '#eef0f3'&#10;  },&#10;  quickActionIcon: {&#10;    fontSize: 28,&#10;    marginBottom: 10,&#10;  },&#10;  quickActionText: {&#10;    fontSize: 13,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    textAlign: 'center',&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 24,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 12,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;  },&#10;  card: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    shadowColor: '#aab4c1',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 3,&#10;    borderWidth: 1,&#10;    borderColor: '#eef0f3'&#10;  },&#10;  interactionRiskContent: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    paddingVertical: 10,&#10;  },&#10;  circularGaugeContainer: {&#10;    alignItems: 'center',&#10;    marginRight: 20,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    flex: 1,&#10;  },&#10;  newsContentWrapper: {&#10;    flexDirection: 'row',&#10;  },&#10;  newsImagePlaceholder: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 12,&#10;    backgroundColor: Colors.lightGray,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginRight: 16,&#10;  },&#10;  newsEmoji: {&#10;    fontSize: 30,&#10;  },&#10;  newsContent: {&#10;    flex: 1,&#10;    justifyContent: 'center',&#10;  },&#10;  newsTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    marginBottom: 6,&#10;  },&#10;  newsSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;    lineHeight: 20,&#10;  },&#10;  newsDate: {&#10;    fontSize: 12,&#10;    color: Colors.mediumGray,&#10;    fontWeight: '500',&#10;    marginTop: 8,&#10;  },&#10;});" />
              <option name="updatedContent" value="import React, { useEffect, useRef, useState } from 'react';&#10;import { Text, View, ScrollView, StyleSheet, Animated, TouchableOpacity } from &quot;react-native&quot;;&#10;import InteractionRiskGroups from &quot;../components/InteractionRiskGroups&quot;;&#10;import CircularGauge from &quot;../components/CircularGauge&quot;;&#10;import CalendarComponent from &quot;../components/CalendarComponent&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import BottomNavigationBar from &quot;../components/BottomNavigationBar&quot;;&#10;import SearchBar from '../components/SearchBar';&#10;import { useSafeAreaInsets } from 'react-native-safe-area-context';&#10;import * as Haptics from 'expo-haptics';&#10;import { INTERACTION_DATA } from &quot;@/constants/InteractionData&quot;;&#10;import { FAMILY_DATA } from &quot;@/constants/FamilyData&quot;;&#10;import FamilyGroup from &quot;@/components/FamilyGroup&quot;;&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;import { FAMILY_INTERACTION_DATA } from &quot;@/constants/InteractionData&quot;;&#10;&#10;// Module-level variable to track if animation has run once per session&#10;let hasAnimatedOnce = false;&#10;&#10;// Animated component for staggered entrance&#10;const AnimatedSection = ({ children, index, shouldAnimate }: { children: React.ReactNode, index: number, shouldAnimate: boolean }) =&gt; {&#10;    const fadeAnim = useRef(new Animated.Value(0)).current;&#10;    const slideAnim = useRef(new Animated.Value(30)).current;&#10;&#10;    useEffect(() =&gt; {&#10;        if (shouldAnimate) {&#10;            Animated.timing(fadeAnim, {&#10;                toValue: 1,&#10;                duration: 600,&#10;                delay: index * 150,&#10;                useNativeDriver: true,&#10;            }).start();&#10;            Animated.timing(slideAnim, {&#10;                toValue: 0,&#10;                duration: 600,&#10;                delay: index * 150,&#10;                useNativeDriver: true,&#10;            }).start();&#10;        } else {&#10;            fadeAnim.setValue(1);&#10;            slideAnim.setValue(0);&#10;        }&#10;    }, [shouldAnimate, index]);&#10;&#10;    return (&#10;        &lt;Animated.View style={{ opacity: fadeAnim, transform: [{ translateY: slideAnim }] }}&gt;&#10;            {children}&#10;        &lt;/Animated.View&gt;&#10;    );&#10;};&#10;&#10;export default function Index() {&#10;  const insets = useSafeAreaInsets();&#10;  const [selectedId, setSelectedId] = useState&lt;string | null&gt;(null);&#10;&#10;  // 선택된 가족 ID를 AsyncStorage에서 불러오기&#10;  useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;      const savedId = await AsyncStorage.getItem('selected_family_id');&#10;      if (savedId) setSelectedId(savedId);&#10;      else setSelectedId(FAMILY_DATA[1]?.id || null);&#10;    })();&#10;  }, []);&#10;&#10;  // This effect runs only once when the component mounts for the first time in the app session.&#10;  // It sets the flag to true, so subsequent mounts/re-renders won't trigger the animation.&#10;  useEffect(() =&gt; {&#10;    if (!hasAnimatedOnce) {&#10;        hasAnimatedOnce = true;&#10;    }&#10;  }, []);&#10;&#10;  const onQuickActionPress = (action: string) =&gt; {&#10;    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);&#10;    // Add navigation logic here based on the action&#10;    console.log(action, 'pressed');&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 120, paddingTop: insets.top + 10 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;AnimatedSection index={0} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.header}&gt;&#10;                &lt;Text style={styles.headerTitle}&gt;PillLink&lt;/Text&gt;&#10;                &lt;View style={styles.headerIcons}&gt;&#10;                    {/* 상단 프로필 아바타 삭제됨 */}&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Search Bar */}&#10;        &lt;AnimatedSection index={1} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;SearchBar /&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Greeting Text */}&#10;        &lt;AnimatedSection index={2} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.greetingContainer}&gt;&#10;            &lt;Text style={styles.greetingText}&gt;&#10;                안녕하세요, &lt;Text style={styles.greetingHighlight}&gt;유은정님!&lt;/Text&gt;&#10;            &lt;/Text&gt;&#10;            &lt;Text style={styles.greetingSubtext}&gt;&#10;                오늘도 건강한 하루 되세요 ✨&#10;            &lt;/Text&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Quick Actions */}&#10;        &lt;AnimatedSection index={3} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.quickActionsContainer}&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('History')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;복용 기록&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('Settings')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;⏰&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;알림 설정&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.quickActionCard} onPress={() =&gt; onQuickActionPress('Stats')} activeOpacity={0.8}&gt;&#10;                    &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;                    &lt;Text style={styles.quickActionText}&gt;통계 보기&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Calendar Section */}&#10;        &lt;AnimatedSection index={4} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;CalendarComponent /&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Interaction Risk Section */}&#10;        &lt;AnimatedSection index={5} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.sectionContainer}&gt;&#10;                &lt;View style={styles.sectionHeader}&gt;&#10;                    &lt;Text style={styles.sectionTitle}&gt;상호작용 안전도&lt;/Text&gt;&#10;                    &lt;Text style={styles.sectionSubtitle}&gt;현재 복용 중인 약물들의 안전성&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={styles.card}&gt;&#10;                    &lt;View style={styles.interactionRiskContent}&gt;&#10;                        &lt;View style={styles.circularGaugeContainer}&gt;&#10;                        &lt;CircularGauge value={selectedId &amp;&amp; FAMILY_INTERACTION_DATA[selectedId] ? FAMILY_INTERACTION_DATA[selectedId].riskScore : INTERACTION_DATA.riskScore} size={100} /&gt;&#10;                        &lt;/View&gt;&#10;                        &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;                        &lt;InteractionRiskGroups&#10;                          dangerousCount={selectedId &amp;&amp; FAMILY_INTERACTION_DATA[selectedId] ? FAMILY_INTERACTION_DATA[selectedId].dangerousCount : INTERACTION_DATA.dangerousCount}&#10;                          safeCount={selectedId &amp;&amp; FAMILY_INTERACTION_DATA[selectedId] ? FAMILY_INTERACTION_DATA[selectedId].safeCount : INTERACTION_DATA.safeCount}&#10;                        /&gt;&#10;                        &lt;/View&gt;&#10;                    &lt;/View&gt;&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* Health News Section */}&#10;        &lt;AnimatedSection index={6} shouldAnimate={!hasAnimatedOnce}&gt;&#10;            &lt;View style={styles.sectionContainer}&gt;&#10;                &lt;View style={styles.sectionHeader}&gt;&#10;                    &lt;Text style={styles.sectionTitle}&gt;건강 뉴스&lt;/Text&gt;&#10;                    &lt;Text style={styles.sectionSubtitle}&gt;��은정님을 위한 맞춤 정보&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;TouchableOpacity style={styles.card} activeOpacity={0.8}&gt;&#10;                    &lt;View style={styles.newsContentWrapper}&gt;&#10;                        &lt;View style={styles.newsImagePlaceholder}&gt;&#10;                            &lt;Text style={styles.newsEmoji}&gt;&lt;/Text&gt;&#10;                        &lt;/View&gt;&#10;                        &lt;View style={styles.newsContent}&gt;&#10;                            &lt;Text style={styles.newsTitle}&gt;겨울철 감기 예방을 위한 영양제 복용법&lt;/Text&gt;&#10;                            &lt;Text style={styles.newsSubtitle}&gt;면역력 강화를 위한 비타민 D, C 섭취 가이드&lt;/Text&gt;&#10;                            &lt;Text style={styles.newsDate}&gt;2시간 전&lt;/Text&gt;&#10;                        &lt;/View&gt;&#10;                    &lt;/View&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;        &lt;/AnimatedSection&gt;&#10;&#10;        {/* FamilyGroup Section */}&#10;        {/* 가족 목록(프로필에서만 사용) - 홈에서는 제거됨 */}&#10;        {/* &lt;AnimatedSection index={7} shouldAnimate={!hasAnimatedOnce}&gt;&#10;          &lt;FamilyGroup&#10;            data={FAMILY_DATA}&#10;            onSelectMember={async (id) =&gt; {&#10;              setSelectedId(id);&#10;              await AsyncStorage.setItem('selected_family_id', id);&#10;            }}&#10;          /&gt;&#10;        &lt;/AnimatedSection&gt; */}&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    backgroundColor: '#f7f8fa', // Slightly off-white background&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingBottom: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.primary,&#10;  },&#10;  headerIcons: {&#10;    flexDirection: 'row',&#10;    gap: 12,&#10;  },&#10;  greetingContainer: {&#10;    marginVertical: 20,&#10;  },&#10;  greetingText: {&#10;    fontSize: 22,&#10;    fontWeight: '700',&#10;    color: Colors.text,&#10;    marginBottom: 6,&#10;  },&#10;  greetingHighlight: {&#10;    color: Colors.primary,&#10;    fontWeight: 'bold',&#10;  },&#10;  greetingSubtext: {&#10;    fontSize: 15,&#10;    color: Colors.mediumGray,&#10;  },&#10;  quickActionsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    marginBottom: 24,&#10;    gap: 12,&#10;  },&#10;  quickActionCard: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    alignItems: 'center',&#10;    shadowColor: '#aab4c1',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 3,&#10;    borderWidth: 1,&#10;    borderColor: '#eef0f3'&#10;  },&#10;  quickActionIcon: {&#10;    fontSize: 28,&#10;    marginBottom: 10,&#10;  },&#10;  quickActionText: {&#10;    fontSize: 13,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    textAlign: 'center',&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 24,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 12,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;  },&#10;  card: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    shadowColor: '#aab4c1',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 3,&#10;    borderWidth: 1,&#10;    borderColor: '#eef0f3'&#10;  },&#10;  interactionRiskContent: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    paddingVertical: 10,&#10;  },&#10;  circularGaugeContainer: {&#10;    alignItems: 'center',&#10;    marginRight: 20,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    flex: 1,&#10;  },&#10;  newsContentWrapper: {&#10;    flexDirection: 'row',&#10;  },&#10;  newsImagePlaceholder: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 12,&#10;    backgroundColor: Colors.lightGray,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginRight: 16,&#10;  },&#10;  newsEmoji: {&#10;    fontSize: 30,&#10;  },&#10;  newsContent: {&#10;    flex: 1,&#10;    justifyContent: 'center',&#10;  },&#10;  newsTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    marginBottom: 6,&#10;  },&#10;  newsSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;    lineHeight: 20,&#10;  },&#10;  newsDate: {&#10;    fontSize: 12,&#10;    color: Colors.mediumGray,&#10;    fontWeight: '500',&#10;    marginTop: 8,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/interaction.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/interaction.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Platform } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import InteractionWarning from '../components/InteractionWarning';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;import { INTERACTION_DATA, FAMILY_INTERACTION_DATA } from '@/constants/InteractionData';&#10;import { useRouter } from 'expo-router';&#10;}&#10;  gaugeSection: {&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Platform } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import InteractionWarning from '../components/InteractionWarning';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;import { INTERACTION_DATA, FAMILY_INTERACTION_DATA } from '@/constants/InteractionData';&#10;import { useRouter } from 'expo-router';&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;&#10;export default function InteractionScreen() {&#10;  const [selectedGroup, setSelectedGroup] = useState&lt;'risk' | 'safe' | null&gt;(null);&#10;  // 구성원 선택 상태 추가 (기본값: 첫 번째 실제 구성원)&#10;  const familyMembers = FAMILY_DATA.filter(m =&gt; m.id !== 'invite');&#10;  const [selectedMemberId, setSelectedMemberId] = useState(familyMembers[0]?.id || '1');&#10;  const router = useRouter();&#10;&#10;  // AsyncStorage에서 선택된 가족 id를 불러와서 사용&#10;  useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;      const storedId = await AsyncStorage.getItem('selected_family_id');&#10;      if (storedId &amp;&amp; storedId !== selectedMemberId) {&#10;        setSelectedMemberId(storedId);&#10;      }&#10;    })();&#10;  }, []);&#10;&#10;  // 그룹 버튼 클릭 핸들러&#10;  const handleGroupPress = (groupType: 'risk' | 'safe') =&gt; {&#10;    const newSelection = selectedGroup === groupType ? null : groupType;&#10;    setSelectedGroup(newSelection);&#10;  };&#10;&#10;  // 선택된 구성원의 상호작용 데이터&#10;  const memberData = FAMILY_INTERACTION_DATA[selectedMemberId] || FAMILY_INTERACTION_DATA['1'];&#10;&#10;  // 기존 요소에서 위험/안전 데이터만 연결 (선택된 구성원의 데이터 사용)&#10;  const groupData = {&#10;    risk: [&#10;      { name: '위험/주의 상호작용', description: `위험: ${memberData.dangerousCount}건`, type: '위험' },&#10;    ],&#10;    safe: [&#10;      { name: '안전 상호작용', description: `안전: ${memberData.safeCount}건`, type: '안전' },&#10;    ],&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100, paddingTop: Platform.OS === 'ios' ? 48 : 20 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;{familyMembers.find(m =&gt; m.id === selectedMemberId)?.name || ''}님의 약물 복용 리포트&lt;/Text&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;복용 중인 약물들의 상호작용을 확인하세요&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        {/* 상호작용 안전도 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.gaugeSection}&gt;&#10;            &lt;CircularGauge value={memberData.riskScore} size={180} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;            &lt;InteractionRiskGroups&#10;              interactable={true}&#10;              onGroupPress={handleGroupPress}&#10;              selectedGroup={selectedGroup}&#10;              dangerousCount={memberData.dangerousCount}&#10;              safeCount={memberData.safeCount}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;        {/* 경고 문구 */}&#10;        &lt;InteractionWarning riskScore={memberData.riskScore} /&gt;&#10;        {/* 선택된 그룹의 상세 정보 표시 */}&#10;        {selectedGroup &amp;&amp; (&#10;          &lt;View style={styles.detailContainer}&gt;&#10;            &lt;Text style={styles.detailTitle}&gt;&#10;              {selectedGroup === 'risk' &amp;&amp; '위험/주의 상호작용 상세'}&#10;              {selectedGroup === 'safe' &amp;&amp; '안전 상호작용 상세'}&#10;            &lt;/Text&gt;&#10;            {groupData[selectedGroup].map((item, index) =&gt; (&#10;              &lt;View key={index} style={styles.detailItem}&gt;&#10;                &lt;Text style={styles.detailItemName}&gt;{item.name}&lt;/Text&gt;&#10;                &lt;Text style={styles.detailItemDescription}&gt;{item.description}&lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            ))}&#10;          &lt;/View&gt;&#10;        )}&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar activeIndex={1} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    // paddingTop 제거 (상단 여백은 contentContainerStyle에서 처리)&#10;  },&#10;  memberSelectorWrapper: {&#10;    marginBottom: 18,&#10;    marginTop: 4,&#10;  },&#10;  memberSelectorScroll: {&#10;    flexDirection: 'row',&#10;    gap: 10,&#10;    alignItems: 'center',&#10;    paddingHorizontal: 2,&#10;  },&#10;  memberButton: {&#10;    backgroundColor: '#F2F4F7',&#10;    borderRadius: 16,&#10;    paddingHorizontal: 20,&#10;    paddingVertical: 10,&#10;    marginRight: 8,&#10;    borderWidth: 1,&#10;    borderColor: 'transparent',&#10;  },&#10;  memberButtonSelected: {&#10;    backgroundColor: Colors.primary,&#10;    borderColor: Colors.primary,&#10;  },&#10;  memberButtonText: {&#10;    color: Colors.text,&#10;    fontWeight: '600',&#10;    fontSize: 16,&#10;  },&#10;  memberButtonTextSelected: {&#10;    color: '#fff',&#10;  },&#10;  header: {&#10;    marginBottom: 20,&#10;    marginTop: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 16,&#10;    color: Colors.mediumGray,&#10;  },&#10;  sectionContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  gaugeSection: {&#10;    alignItems: 'center',&#10;    marginBottom: 20,&#10;  },&#10;  gaugeLabel: {&#10;    textAlign: 'center',&#10;    color: Colors.mediumGray,&#10;    fontSize: 15,&#10;    marginTop: 8,&#10;    marginBottom: 4,&#10;    fontWeight: '500',&#10;    letterSpacing: 0.2,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    marginTop: 10,&#10;  },&#10;  detailContainer: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 20,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;  },&#10;  detailTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 16,&#10;  },&#10;  detailItem: {&#10;    marginBottom: 12,&#10;    paddingBottom: 12,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.border,&#10;  },&#10;  detailItemName: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  detailItemDescription: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/login.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/login.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, TextInput, TouchableOpacity, StyleSheet, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function LoginScreen() {&#10;  const [email, setEmail] = useState('');&#10;  const [password, setPassword] = useState('');&#10;  const [error, setError] = useState('');&#10;  const router = useRouter();&#10;&#10;  const handleLogin = () =&gt; {&#10;    // 실제 로그인 로직은 서버 연동 필요&#10;    if (!email || !password) {&#10;      setError('이메일과 비밀번호를 입력하세요.');&#10;      return;&#10;    }&#10;    setError('');&#10;    // 로그인 성공 시 홈으로 이동 (예시)&#10;    router.replace('/');&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* 상단 로고/타이틀 */}&#10;      &lt;Image source={require('@/../assets/images/icon.png')} style={styles.logo} /&gt;&#10;      &lt;Text style={styles.title}&gt;로그인&lt;/Text&gt;&#10;      &lt;Text style={styles.subtitle}&gt;PillLink에 오신 것을 환영합니다!&lt;/Text&gt;&#10;      {/* 입력 폼 */}&#10;      &lt;View style={styles.inputSection}&gt;&#10;        &lt;TextInput&#10;          style={styles.input}&#10;          placeholder=&quot;이메일&quot;&#10;          placeholderTextColor={Colors.mediumGray}&#10;          value={email}&#10;          onChangeText={setEmail}&#10;          keyboardType=&quot;email-address&quot;&#10;          autoCapitalize=&quot;none&quot;&#10;        /&gt;&#10;        &lt;TextInput&#10;          style={styles.input}&#10;          placeholder=&quot;비밀번호&quot;&#10;          placeholderTextColor={Colors.mediumGray}&#10;          value={password}&#10;          onChangeText={setPassword}&#10;          secureTextEntry&#10;        /&gt;&#10;        {error ? &lt;Text style={styles.error}&gt;{error}&lt;/Text&gt; : null}&#10;        &lt;TouchableOpacity style={styles.loginButton} onPress={handleLogin}&gt;&#10;          &lt;Text style={styles.loginButtonText}&gt;로그인&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;      {/* 하단 링크 */}&#10;      &lt;View style={styles.bottomLinks}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.push('/signup')}&gt;&#10;          &lt;Text style={styles.linkText}&gt;회원가입&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.linkDivider}&gt;|&lt;/Text&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.push('/find-password')}&gt;&#10;          &lt;Text style={styles.linkText}&gt;비밀번호 찾기&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingHorizontal: 24,&#10;  },&#10;  logo: {&#10;    width: 64,&#10;    height: 64,&#10;    marginBottom: 16,&#10;    resizeMode: 'contain',&#10;  },&#10;  title: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;  },&#10;  subtitle: {&#10;    fontSize: 16,&#10;    color: Colors.mediumGray,&#10;    marginBottom: 32,&#10;  },&#10;  inputSection: {&#10;    width: '100%',&#10;    marginBottom: 24,&#10;  },&#10;  input: {&#10;    width: '100%',&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;    borderRadius: 10,&#10;    padding: 14,&#10;    fontSize: 16,&#10;    marginBottom: 12,&#10;    backgroundColor: '#F9FAFB',&#10;    color: Colors.text,&#10;  },&#10;  loginButton: {&#10;    backgroundColor: Colors.primary,&#10;    borderRadius: 10,&#10;    paddingVertical: 14,&#10;    alignItems: 'center',&#10;    marginTop: 8,&#10;  },&#10;  loginButtonText: {&#10;    color: '#fff',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;  error: {&#10;    color: '#EF4444',&#10;    marginBottom: 8,&#10;    textAlign: 'center',&#10;  },&#10;  bottomLinks: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 12,&#10;  },&#10;  linkText: {&#10;    color: Colors.primary,&#10;    fontSize: 15,&#10;    fontWeight: '500',&#10;    paddingHorizontal: 8,&#10;  },&#10;  linkDivider: {&#10;    color: '#B0B0B0',&#10;    fontSize: 15,&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/search-result.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/search-result.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, TextInput, StyleSheet, Text, TouchableOpacity, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;&#10;const MOCK_RESULTS = [&#10;  '아토르바스틴', '암로디핀', '로사르탄',&#10;  '아스피린', '탐스로신', '멜록시캄', '세티리진',&#10;  '타이레놀', '메트포르민',&#10;];&#10;&#10;export default function SearchResultScreen() {&#10;  const [search, setSearch] = useState('');&#10;&#10;  // 실제 검색 결과는 search 값에 따라 필터링해서 보여주면 됩니다.&#10;  const filtered = search&#10;    ? MOCK_RESULTS.filter(item =&gt; item.includes(search))&#10;    : MOCK_RESULTS;&#10;&#10;  return (&#10;    &lt;KeyboardAvoidingView&#10;      style={{ flex: 1, backgroundColor: '#fff' }}&#10;      behavior={Platform.OS === 'ios' ? 'padding' : undefined}&#10;    &gt;&#10;      {/* 상단 바 대체 */}&#10;      &lt;View style={styles.statusBar} /&gt;&#10;      {/* 검색창 */}&#10;      &lt;View style={styles.searchBarContainer}&gt;&#10;        &lt;TextInput&#10;          style={styles.searchBar}&#10;          placeholder=&quot;복용하시는 약알을 검색해보세요&quot;&#10;          placeholderTextColor=&quot;#B0B0B0&quot;&#10;          value={search}&#10;          onChangeText={setSearch}&#10;          returnKeyType=&quot;search&quot;&#10;          autoFocus&#10;        /&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;magnify&quot; size={28} color=&quot;#888&quot; style={styles.searchIcon} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 검색 결과 */}&#10;      &lt;ScrollView contentContainerStyle={styles.suggestionContainer} keyboardShouldPersistTaps=&quot;handled&quot;&gt;&#10;        &lt;View style={styles.suggestionWrap}&gt;&#10;          {filtered.length === 0 ? (&#10;            &lt;Text style={styles.noResultText}&gt;검색 결과가 없습니다.&lt;/Text&gt;&#10;          ) : (&#10;            filtered.map((item) =&gt; (&#10;              &lt;TouchableOpacity key={item} style={styles.suggestionButton}&gt;&#10;                &lt;Text style={styles.suggestionText}&gt;{item}&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            ))&#10;          )}&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;    &lt;/KeyboardAvoidingView&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  statusBar: {&#10;    height: 56,&#10;    backgroundColor: '#1877F2',&#10;    justifyContent: 'flex-end',&#10;  },&#10;  searchBarContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 16,&#10;    marginHorizontal: 16,&#10;    marginBottom: 8,&#10;  },&#10;  searchBar: {&#10;    flex: 1,&#10;    height: 48,&#10;    backgroundColor: '#F7F7F7',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 20,&#10;    fontSize: 16,&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    color: '#222',&#10;  },&#10;  searchIcon: {&#10;    position: 'absolute',&#10;    right: 20,&#10;    top: 10,&#10;  },&#10;  suggestionContainer: {&#10;    paddingHorizontal: 16,&#10;    paddingTop: 16,&#10;    flexGrow: 1,&#10;  },&#10;  suggestionWrap: {&#10;    flexDirection: 'row',&#10;    flexWrap: 'wrap',&#10;    gap: 12,&#10;    justifyContent: 'flex-start',&#10;  },&#10;  suggestionButton: {&#10;    borderWidth: 1.5,&#10;    borderColor: '#1877F2',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 18,&#10;    paddingVertical: 8,&#10;    marginRight: 8,&#10;    marginBottom: 12,&#10;    backgroundColor: '#fff',&#10;  },&#10;  suggestionText: {&#10;    color: '#1877F2',&#10;    fontSize: 16,&#10;    fontWeight: '500',&#10;  },&#10;  noResultText: {&#10;    color: '#888',&#10;    fontSize: 16,&#10;    marginTop: 32,&#10;    textAlign: 'center',&#10;    width: '100%',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/search.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/search.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, TextInput, StyleSheet, Text, TouchableOpacity, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const SUGGESTIONS = [&#10;  '아토르바스틴', '암로디핀', '로사르탄',&#10;  '아스피린', '탐스로신', '멜록시캄', '세티리진',&#10;  '타이레놀', '메트포르민',&#10;];&#10;&#10;export default function SearchScreen() {&#10;  const [search, setSearch] = useState('');&#10;&#10;  return (&#10;    &lt;KeyboardAvoidingView&#10;      style={{ flex: 1, backgroundColor: '#fff' }}&#10;      behavior={Platform.OS === 'ios' ? 'padding' : undefined}&#10;    &gt;&#10;      {/* 상단 바 대체 */}&#10;      &lt;View style={styles.statusBar} /&gt;&#10;      {/* 검색창 */}&#10;      &lt;View style={styles.searchBarContainer}&gt;&#10;        &lt;TextInput&#10;          style={styles.searchBar}&#10;          placeholder=&quot;복용하시는 약알을 검색해보세요&quot;&#10;          placeholderTextColor=&quot;#B0B0B0&quot;&#10;          value={search}&#10;          onChangeText={setSearch}&#10;          returnKeyType=&quot;search&quot;&#10;        /&gt;&#10;        &lt;MaterialCommunityIcons name=&quot;magnify&quot; size={28} color=&quot;#888&quot; style={styles.searchIcon} /&gt;&#10;      &lt;/View&gt;&#10;      {/* 추천 약물 */}&#10;      &lt;ScrollView contentContainerStyle={styles.suggestionContainer} keyboardShouldPersistTaps=&quot;handled&quot;&gt;&#10;        &lt;View style={styles.suggestionWrap}&gt;&#10;          {SUGGESTIONS.map((item) =&gt; (&#10;            &lt;TouchableOpacity key={item} style={styles.suggestionButton}&gt;&#10;              &lt;Text style={styles.suggestionText}&gt;{item}&lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          ))}&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;    &lt;/KeyboardAvoidingView&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  statusBar: {&#10;    height: 56,&#10;    backgroundColor: '#1877F2',&#10;    justifyContent: 'flex-end',&#10;  },&#10;  searchBarContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginTop: 16,&#10;    marginHorizontal: 16,&#10;    marginBottom: 8,&#10;  },&#10;  searchBar: {&#10;    flex: 1,&#10;    height: 48,&#10;    backgroundColor: '#F7F7F7',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 20,&#10;    fontSize: 16,&#10;    borderWidth: 1,&#10;    borderColor: '#D0D0D0',&#10;    color: '#222',&#10;  },&#10;  searchIcon: {&#10;    position: 'absolute',&#10;    right: 20,&#10;    top: 10,&#10;  },&#10;  suggestionContainer: {&#10;    paddingHorizontal: 16,&#10;    paddingTop: 16,&#10;    flexGrow: 1,&#10;  },&#10;  suggestionWrap: {&#10;    flexDirection: 'row',&#10;    flexWrap: 'wrap',&#10;    gap: 12,&#10;    justifyContent: 'flex-start',&#10;  },&#10;  suggestionButton: {&#10;    borderWidth: 1.5,&#10;    borderColor: '#1877F2',&#10;    borderRadius: 24,&#10;    paddingHorizontal: 18,&#10;    paddingVertical: 8,&#10;    marginRight: 8,&#10;    marginBottom: 12,&#10;    backgroundColor: '#fff',&#10;  },&#10;  suggestionText: {&#10;    color: '#1877F2',&#10;    fontSize: 16,&#10;    fontWeight: '500',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup-allergy.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup-allergy.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;const ALLERGIES = [&#10;  '게', '대두', '꽃가루', '땅콩',&#10;  '계란', '석류', '벌', '꿀',&#10;  '카페인 민감', 'MSG 민감',&#10;];&#10;&#10;export default function SignupAllergy() {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;정보입력&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '95%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Title */}&#10;      &lt;Text style={styles.title}&gt;가지고 계신 &lt;Text style={styles.blue}&gt;알러지&lt;/Text&gt;가 있다면{'&#10;'}선택해주세요&lt;/Text&gt;&#10;      {/* Allergy Buttons */}&#10;      &lt;View style={styles.grid}&gt;&#10;        {ALLERGIES.map((a, i) =&gt; (&#10;          &lt;TouchableOpacity key={i} style={styles.allergyBtn}&gt;&#10;            &lt;Text style={styles.allergyText}&gt;{a}&lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        ))}&#10;      &lt;/View&gt;&#10;      &lt;Text style={styles.subText}&gt;찾는 알러지가 없나요?&lt;/Text&gt;&#10;      {/* Next Button */}&#10;      &lt;TouchableOpacity style={styles.nextBtn}&gt;&#10;        &lt;Text style={styles.nextBtnText}&gt;다음&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '95%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  title: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;    marginTop: 24,&#10;    marginBottom: 32,&#10;    alignSelf: 'flex-start',&#10;    marginLeft: 20,&#10;  },&#10;  blue: {&#10;    color: '#1976F7',&#10;  },&#10;  grid: {&#10;    flexDirection: 'row',&#10;    flexWrap: 'wrap',&#10;    justifyContent: 'center',&#10;    marginHorizontal: 10,&#10;    marginBottom: 24,&#10;  },&#10;  allergyBtn: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    paddingVertical: 18,&#10;    paddingHorizontal: 32,&#10;    margin: 8,&#10;    minWidth: 140,&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  allergyText: {&#10;    fontSize: 18,&#10;    color: '#222',&#10;    fontWeight: 'bold',&#10;  },&#10;  subText: {&#10;    fontSize: 16,&#10;    color: '#888',&#10;    alignSelf: 'center',&#10;    marginBottom: 18,&#10;    marginTop: 8,&#10;    textDecorationLine: 'underline',&#10;  },&#10;  nextBtn: {&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 18,&#10;    paddingVertical: 22,&#10;    marginHorizontal: 20,&#10;    marginTop: 8,&#10;    alignItems: 'center',&#10;  },&#10;  nextBtnText: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#fff',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup-auth.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup-auth.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;export default function SignupAuth() {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;본인인증&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '50%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Title */}&#10;      &lt;Text style={styles.title}&gt;본인인증 방법을 선택해주세요&lt;/Text&gt;&#10;      {/* 인증 버튼 */}&#10;      &lt;TouchableOpacity style={styles.authBtn}&gt;&#10;        &lt;Text style={styles.authBtnSub}&gt;본인 명의로 가입된&lt;/Text&gt;&#10;        &lt;Text style={styles.authBtnMain}&gt;휴대폰 인증&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      &lt;TouchableOpacity style={styles.authBtn}&gt;&#10;        &lt;Text style={styles.authBtnMain}&gt;아이핀 인증&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 0,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '50%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  title: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;    marginTop: 24,&#10;    marginBottom: 48,&#10;    alignSelf: 'center',&#10;  },&#10;  authBtn: {&#10;    backgroundColor: '#F5F6F8',&#10;    borderRadius: 18,&#10;    paddingVertical: 28,&#10;    marginHorizontal: 20,&#10;    marginBottom: 28,&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  authBtnSub: {&#10;    fontSize: 15,&#10;    color: '#6B7280',&#10;    marginBottom: 2,&#10;  },&#10;  authBtnMain: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#222',&#10;  },&#10;});&#10;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;export default function SignupAuth() {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;본인인증&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '50%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Title */}&#10;      &lt;Text style={styles.title}&gt;본인인증 방법을 선택해주세요&lt;/Text&gt;&#10;      {/* 인증 버튼 */}&#10;      &lt;TouchableOpacity style={styles.authBtn} onPress={() =&gt; router.push('/signup-info')}&gt;&#10;        &lt;Text style={styles.authBtnSub}&gt;본인 명의로 가입된&lt;/Text&gt;&#10;        &lt;Text style={styles.authBtnMain}&gt;휴대폰 인증&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      &lt;TouchableOpacity style={styles.authBtn} onPress={() =&gt; router.push('/signup-info')}&gt;&#10;        &lt;Text style={styles.authBtnMain}&gt;아이핀 인증&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 0,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '50%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  title: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;    marginTop: 24,&#10;    marginBottom: 48,&#10;    alignSelf: 'center',&#10;  },&#10;  authBtn: {&#10;    backgroundColor: '#F5F6F8',&#10;    borderRadius: 18,&#10;    paddingVertical: 28,&#10;    marginHorizontal: 20,&#10;    marginBottom: 28,&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  authBtnSub: {&#10;    fontSize: 15,&#10;    color: '#6B7280',&#10;    marginBottom: 2,&#10;  },&#10;  authBtnMain: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#222',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup-complete.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup-complete.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;export default function SignupComplete() {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;가입완료&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '100%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Complete Icon &amp; Text */}&#10;      &lt;View style={styles.centerContent}&gt;&#10;        &lt;View style={styles.checkCircle}&gt;&#10;          &lt;Ionicons name=&quot;checkmark&quot; size={80} color=&quot;#fff&quot; /&gt;&#10;        &lt;/View&gt;&#10;        &lt;Text style={styles.nameText}&gt;유은정님&lt;/Text&gt;&#10;        &lt;Text style={styles.completeText}&gt;가입이 완료되었습니다&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      {/* 확인 버튼 */}&#10;      &lt;TouchableOpacity style={styles.nextBtn}&gt;&#10;        &lt;Text style={styles.nextBtnText}&gt;확인&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '100%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  centerContent: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;  },&#10;  checkCircle: {&#10;    width: 120,&#10;    height: 120,&#10;    borderRadius: 60,&#10;    backgroundColor: '#1976F7',&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginBottom: 32,&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.10,&#10;    shadowRadius: 8,&#10;    elevation: 4,&#10;  },&#10;  nameText: {&#10;    fontSize: 28,&#10;    color: '#1976F7',&#10;    fontWeight: 'bold',&#10;    marginBottom: 8,&#10;  },&#10;  completeText: {&#10;    fontSize: 22,&#10;    color: '#111',&#10;    fontWeight: '500',&#10;    marginBottom: 32,&#10;  },&#10;  nextBtn: {&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 18,&#10;    paddingVertical: 22,&#10;    marginHorizontal: 20,&#10;    marginBottom: 40,&#10;    alignItems: 'center',&#10;  },&#10;  nextBtnText: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#fff',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup-disease.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup-disease.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;const DISEASES = [&#10;  '당뇨병', '고혈압', '무릎관절증', '만성요통',&#10;  '만성위염', '시력감퇴', '만성심질환', '알레르기',&#10;  '전립선 비대증', '치매',&#10;];&#10;&#10;export default function SignupDisease() {&#10;  const router = useRouter();&#10;  const [selected, setSelected] = useState([]);&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;정보입력&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '85%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Title */}&#10;      &lt;Text style={styles.title}&gt;가지고 계신 &lt;Text style={styles.blue}&gt;질환&lt;/Text&gt;이 있다면{'&#10;'}선택해주세요&lt;/Text&gt;&#10;      {/* Disease Buttons */}&#10;      &lt;View style={styles.grid}&gt;&#10;        {DISEASES.map((d, i) =&gt; (&#10;          &lt;TouchableOpacity key={i} style={styles.diseaseBtn}&gt;&#10;            &lt;Text style={styles.diseaseText}&gt;{d}&lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        ))}&#10;      &lt;/View&gt;&#10;      &lt;Text style={styles.subText}&gt;찾는 질환이 없나요?&lt;/Text&gt;&#10;      {/* Next Button */}&#10;      &lt;TouchableOpacity style={styles.nextBtn}&gt;&#10;        &lt;Text style={styles.nextBtnText}&gt;다음&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '85%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  title: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;    marginTop: 24,&#10;    marginBottom: 32,&#10;    alignSelf: 'flex-start',&#10;    marginLeft: 20,&#10;  },&#10;  blue: {&#10;    color: '#1976F7',&#10;  },&#10;  grid: {&#10;    flexDirection: 'row',&#10;    flexWrap: 'wrap',&#10;    justifyContent: 'center',&#10;    marginHorizontal: 10,&#10;    marginBottom: 24,&#10;  },&#10;  diseaseBtn: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    paddingVertical: 18,&#10;    paddingHorizontal: 32,&#10;    margin: 8,&#10;    minWidth: 140,&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  diseaseText: {&#10;    fontSize: 18,&#10;    color: '#222',&#10;    fontWeight: 'bold',&#10;  },&#10;  subText: {&#10;    fontSize: 16,&#10;    color: '#888',&#10;    alignSelf: 'center',&#10;    marginBottom: 18,&#10;    marginTop: 8,&#10;    textDecorationLine: 'underline',&#10;  },&#10;  nextBtn: {&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 18,&#10;    paddingVertical: 22,&#10;    marginHorizontal: 20,&#10;    marginTop: 8,&#10;    alignItems: 'center',&#10;  },&#10;  nextBtnText: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#fff',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup-info.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup-info.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, TextInput } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;export default function SignupInfo() {&#10;  const router = useRouter();&#10;  const [name, setName] = useState('');&#10;  const [rrn1, setRrn1] = useState('');&#10;  const [rrn2, setRrn2] = useState('');&#10;  const [phone, setPhone] = useState('');&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;정보입력&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '70%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Input Fields */}&#10;      &lt;View style={{ marginTop: 32 }}&gt;&#10;        &lt;Text style={styles.labelActive}&gt;이름&lt;/Text&gt;&#10;        &lt;TextInput&#10;          style={styles.input}&#10;          placeholder=&quot;이름을 입력하세요&quot;&#10;          placeholderTextColor=&quot;#C4C4C4&quot;&#10;          value={name}&#10;          onChangeText={setName}&#10;        /&gt;&#10;        &lt;Text style={styles.labelActive}&gt;주민등록번호&lt;/Text&gt;&#10;        &lt;View style={styles.rrnRow}&gt;&#10;          &lt;TextInput&#10;            style={[styles.input, { flex: 1 }]}&#10;            placeholder=&quot;&quot;&#10;            value={rrn1}&#10;            onChangeText={setRrn1}&#10;            keyboardType=&quot;number-pad&quot;&#10;            maxLength={6}&#10;          /&gt;&#10;          &lt;Text style={styles.rrnDash}&gt;-&lt;/Text&gt;&#10;          &lt;TextInput&#10;            style={[styles.input, { flex: 1 }]}&#10;            placeholder=&quot;&quot;&#10;            value={rrn2}&#10;            onChangeText={setRrn2}&#10;            keyboardType=&quot;number-pad&quot;&#10;            maxLength={7}&#10;            secureTextEntry&#10;          /&gt;&#10;        &lt;/View&gt;&#10;        &lt;Text style={styles.labelActive}&gt;휴대전화번호&lt;/Text&gt;&#10;        &lt;TextInput&#10;          style={styles.input}&#10;          placeholder=&quot;ex) 01012345678&quot;&#10;          placeholderTextColor=&quot;#C4C4C4&quot;&#10;          value={phone}&#10;          onChangeText={setPhone}&#10;          keyboardType=&quot;phone-pad&quot;&#10;        /&gt;&#10;      &lt;/View&gt;&#10;      {/* Next Button */}&#10;      &lt;TouchableOpacity style={styles.nextBtn} disabled&gt;&#10;        &lt;Text style={styles.nextBtnText}&gt;다음&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 0,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '70%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  labelActive: {&#10;    fontSize: 18,&#10;    color: '#1976F7',&#10;    fontWeight: 'bold',&#10;    marginTop: 24,&#10;    marginBottom: 4,&#10;  },&#10;  input: {&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: '#C4C4C4',&#10;    fontSize: 18,&#10;    paddingVertical: 10,&#10;    marginBottom: 8,&#10;    color: '#222',&#10;  },&#10;  rrnRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 8,&#10;  },&#10;  rrnDash: {&#10;    fontSize: 22,&#10;    color: '#888',&#10;    marginHorizontal: 8,&#10;  },&#10;  nextBtn: {&#10;    backgroundColor: '#ddd',&#10;    borderRadius: 18,&#10;    paddingVertical: 22,&#10;    marginHorizontal: 20,&#10;    marginTop: 40,&#10;    alignItems: 'center',&#10;  },&#10;  nextBtnText: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#fff',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup-service.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup-service.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;export default function SignupServiceSelect() {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;회원가입&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '25%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Title */}&#10;      &lt;Text style={styles.title}&gt;시작할 서비스를 선택해주세요&lt;/Text&gt;&#10;      {/* Buttons */}&#10;      &lt;TouchableOpacity style={styles.roleBtn} onPress={() =&gt; router.push('/signup-terms')}&gt;&#10;        &lt;Text style={styles.roleBtnText}&gt;보호자&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      &lt;TouchableOpacity style={styles.roleBtn} onPress={() =&gt; router.push('/signup-terms')}&gt;&#10;        &lt;Text style={styles.roleBtnText}&gt;보호 대상자&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 0,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '25%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  title: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;    marginTop: 24,&#10;    marginBottom: 48,&#10;    alignSelf: 'center',&#10;  },&#10;  roleBtn: {&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 18,&#10;    paddingVertical: 28,&#10;    marginHorizontal: 20,&#10;    marginBottom: 28,&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  roleBtnText: {&#10;    fontSize: 22,&#10;    fontWeight: 'bold',&#10;    color: '#fff',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup-social.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup-social.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, SafeAreaView } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import PrimaryButton from '../components/PrimaryButton';&#10;&#10;export default function SignupSocialScreen() {&#10;  const router = useRouter();&#10;  const [selected, setSelected] = React.useState(null); // selected 상태 추가&#10;&#10;  return (&#10;    &lt;SafeAreaView style={[styles.container, { paddingTop: 36, paddingBottom: 24, paddingHorizontal: 24 }]}&gt;&#10;      &lt;Text style={styles.title}&gt;회원가입&lt;/Text&gt;&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '20%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      &lt;Text style={styles.subtitle}&gt;로그인할 방식을 선택해주세요&lt;/Text&gt;&#10;      &lt;View style={styles.buttonGroup}&gt;&#10;        &lt;PrimaryButton&#10;          title=&quot;카카오톡으로 로그인&quot;&#10;          onPress={() =&gt; {&#10;            setSelected('kakao');&#10;            router.push('/signup');&#10;          }}&#10;          backgroundColor=&quot;#FEE500&quot;&#10;          textStyle={{ color: '#191600', fontWeight: '700', fontSize: 18 }}&#10;          style={styles.kakaoBtn}&#10;        /&gt;&#10;        &lt;PrimaryButton&#10;          title=&quot;Google로 로그인&quot;&#10;          onPress={() =&gt; {&#10;            setSelected('google');&#10;            router.push('/signup');&#10;          }}&#10;          backgroundColor=&quot;#fff&quot;&#10;          textStyle={{ color: '#191600', fontWeight: '700', fontSize: 18 }}&#10;          style={styles.googleBtn}&#10;        /&gt;&#10;      &lt;/View&gt;&#10;      {/* &lt;PrimaryButton&#10;        title=&quot;다음&quot;&#10;        onPress={() =&gt; router.push('/signup')}&#10;        disabled={!selected}&#10;        style={[styles.nextBtn, { marginTop: 28 }]} // 버튼 위 간격 넉넉하게&#10;      /&gt; */}&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#F8FAFC',&#10;    paddingHorizontal: 24,&#10;    paddingTop: 36,&#10;  },&#10;  title: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    alignSelf: 'center',&#10;    marginBottom: 16, // 간격 확대&#10;    color: '#222',&#10;    letterSpacing: 0.2,&#10;  },&#10;  progressBarBg: {&#10;    height: 8,&#10;    backgroundColor: '#E5E8EC',&#10;    borderRadius: 4,&#10;    marginVertical: 20, // 소폭 증가&#10;    overflow: 'hidden',&#10;  },&#10;  progressBar: {&#10;    height: 8,&#10;    backgroundColor: '#1476FF',&#10;    borderRadius: 4,&#10;  },&#10;  subtitle: {&#10;    fontSize: 19,&#10;    fontWeight: '600',&#10;    marginVertical: 24, // 간격 축소&#10;    color: '#222',&#10;    textAlign: 'center',&#10;    letterSpacing: 0.1,&#10;  },&#10;  buttonGroup: {&#10;    gap: 16, // gap 소폭 축소&#10;    marginTop: 12, // marginTop 소폭 증가&#10;    marginBottom: 24, // marginBottom 소폭 축소&#10;  },&#10;  kakaoBtn: {&#10;    backgroundColor: '#FEE500',&#10;    marginBottom: 10,&#10;    borderWidth: 0,&#10;  },&#10;  googleBtn: {&#10;    backgroundColor: '#fff',&#10;    borderWidth: 1.5,&#10;    borderColor: '#E5E8EC',&#10;    marginBottom: 10,&#10;  },&#10;  nextBtn: {&#10;    marginTop: 18,&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, SafeAreaView, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import PrimaryButton from '../components/PrimaryButton';&#10;import { MaterialIcons } from '@expo/vector-icons';&#10;&#10;export default function SignupSocialScreen() {&#10;  const router = useRouter();&#10;  const [selected, setSelected] = React.useState(null); // selected 상태 추가&#10;&#10;  return (&#10;    &lt;SafeAreaView style={[styles.container, { paddingTop: 36, paddingBottom: 24, paddingHorizontal: 24 }]}&gt;&#10;      &lt;TouchableOpacity onPress={() =&gt; router.back()} style={{ position: 'absolute', left: 16, top: 36, zIndex: 10 }}&gt;&#10;        &lt;MaterialIcons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      &lt;Text style={styles.title}&gt;회원가입&lt;/Text&gt;&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '20%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      &lt;Text style={styles.subtitle}&gt;로그인할 방식을 선택해주세요&lt;/Text&gt;&#10;      &lt;View style={styles.buttonGroup}&gt;&#10;        &lt;PrimaryButton&#10;          title=&quot;카카오톡으로 로그인&quot;&#10;          onPress={() =&gt; {&#10;            setSelected('kakao');&#10;            router.push('/signup');&#10;          }}&#10;          backgroundColor=&quot;#FEE500&quot;&#10;          textStyle={{ color: '#191600', fontWeight: '700', fontSize: 18 }}&#10;          style={styles.kakaoBtn}&#10;        /&gt;&#10;        &lt;PrimaryButton&#10;          title=&quot;Google로 로그인&quot;&#10;          onPress={() =&gt; {&#10;            setSelected('google');&#10;            router.push('/signup');&#10;          }}&#10;          backgroundColor=&quot;#fff&quot;&#10;          textStyle={{ color: '#191600', fontWeight: '700', fontSize: 18 }}&#10;          style={styles.googleBtn}&#10;        /&gt;&#10;      &lt;/View&gt;&#10;      {/* &lt;PrimaryButton&#10;        title=&quot;다음&quot;&#10;        onPress={() =&gt; router.push('/signup')}&#10;        disabled={!selected}&#10;        style={[styles.nextBtn, { marginTop: 28 }]} // 버튼 위 간격 넉넉하게&#10;      /&gt; */}&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#F8FAFC',&#10;    paddingHorizontal: 24,&#10;    paddingTop: 36,&#10;  },&#10;  title: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    alignSelf: 'center',&#10;    marginBottom: 16, // 간격 확대&#10;    color: '#222',&#10;    letterSpacing: 0.2,&#10;  },&#10;  progressBarBg: {&#10;    height: 8,&#10;    backgroundColor: '#E5E8EC',&#10;    borderRadius: 4,&#10;    marginVertical: 20, // 소폭 증가&#10;    overflow: 'hidden',&#10;  },&#10;  progressBar: {&#10;    height: 8,&#10;    backgroundColor: '#1476FF',&#10;    borderRadius: 4,&#10;  },&#10;  subtitle: {&#10;    fontSize: 19,&#10;    fontWeight: '600',&#10;    marginVertical: 24, // 간격 축소&#10;    color: '#222',&#10;    textAlign: 'center',&#10;    letterSpacing: 0.1,&#10;  },&#10;  buttonGroup: {&#10;    gap: 16, // gap 소폭 축소&#10;    marginTop: 12, // marginTop 소폭 증가&#10;    marginBottom: 24, // marginBottom 소폭 축소&#10;  },&#10;  kakaoBtn: {&#10;    backgroundColor: '#FEE500',&#10;    marginBottom: 10,&#10;    borderWidth: 0,&#10;  },&#10;  googleBtn: {&#10;    backgroundColor: '#fff',&#10;    borderWidth: 1.5,&#10;    borderColor: '#E5E8EC',&#10;    marginBottom: 10,&#10;  },&#10;  nextBtn: {&#10;    marginTop: 18,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup-terms.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup-terms.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;export default function SignupTerms() {&#10;  const router = useRouter();&#10;  const [allAgreed, setAllAgreed] = useState(false);&#10;&#10;  const terms = [&#10;    '개인정보 처리 목적',&#10;    '개인정보처리및보유기간',&#10;    '이용기간',&#10;    '처리하는 개인정보의 항목',&#10;  ];&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;약관동의&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={[styles.progressBar, { width: '35%' }]} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Card */}&#10;      &lt;View style={styles.card}&gt;&#10;        &lt;View style={styles.termRow}&gt;&#10;          &lt;Ionicons name=&quot;checkmark&quot; size={22} color=&quot;#1976F7&quot; style={{ marginRight: 8 }} /&gt;&#10;          &lt;Text style={styles.allAgreeText}&gt;&lt;Text style={{ fontWeight: 'bold' }}&gt;전체 동의합니다.&lt;/Text&gt;&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        {terms.map((t, i) =&gt; (&#10;          &lt;View style={styles.termRow} key={i}&gt;&#10;            &lt;Ionicons name=&quot;checkmark&quot; size={20} color=&quot;#1976F7&quot; style={{ marginRight: 8 }} /&gt;&#10;            &lt;Text style={styles.termText}&gt;(필수) {t}&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;        ))}&#10;      &lt;/View&gt;&#10;      {/* Next Button */}&#10;      &lt;TouchableOpacity style={styles.nextBtn} disabled&gt;&#10;        &lt;Text style={styles.nextBtnText}&gt;다음&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '35%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  card: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 24,&#10;    marginHorizontal: 20,&#10;    padding: 28,&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 3,&#10;    marginBottom: 32,&#10;  },&#10;  termRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 14,&#10;  },&#10;  allAgreeText: {&#10;    fontSize: 18,&#10;    color: '#222',&#10;  },&#10;  termText: {&#10;    fontSize: 16,&#10;    color: '#222',&#10;  },&#10;  nextBtn: {&#10;    backgroundColor: '#ddd',&#10;    borderRadius: 18,&#10;    paddingVertical: 22,&#10;    marginHorizontal: 20,&#10;    marginTop: 24,&#10;    alignItems: 'center',&#10;  },&#10;  nextBtnText: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#fff',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;export default function SignupScreen() {&#10;  const router = useRouter();&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;회원가입&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={styles.progressBar} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Title */}&#10;      &lt;Text style={styles.title}&gt;로그인할 방식을 선택해주세요&lt;/Text&gt;&#10;      {/* Kakao Login Button */}&#10;      &lt;TouchableOpacity style={styles.kakaoBtn}&gt;&#10;        &lt;Image source={require('../assets/images/kakao.png')} style={styles.kakaoIcon} /&gt;&#10;        &lt;Text style={styles.kakaoText}&gt;카카오톡으로 로그인&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      {/* Google Login Button */}&#10;      &lt;TouchableOpacity style={styles.googleBtn}&gt;&#10;        &lt;Image source={require('../assets/images/google.png')} style={styles.googleIcon} /&gt;&#10;        &lt;Text style={styles.googleText}&gt;Google로 로그인&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 0,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '25%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  title: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;    marginTop: 24,&#10;    marginBottom: 48,&#10;    alignSelf: 'center',&#10;  },&#10;  kakaoBtn: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#FEE500',&#10;    borderRadius: 18,&#10;    paddingVertical: 24,&#10;    paddingHorizontal: 24,&#10;    marginHorizontal: 20,&#10;    marginBottom: 24,&#10;    justifyContent: 'center',&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.04,&#10;    shadowRadius: 2,&#10;    elevation: 2,&#10;  },&#10;  kakaoIcon: {&#10;    width: 28,&#10;    height: 28,&#10;    marginRight: 12,&#10;    resizeMode: 'contain',&#10;  },&#10;  kakaoText: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: '#3C1E1E',&#10;  },&#10;  googleBtn: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 18,&#10;    paddingVertical: 24,&#10;    paddingHorizontal: 24,&#10;    marginHorizontal: 20,&#10;    borderWidth: 1.5,&#10;    borderColor: '#D1D5DB',&#10;    justifyContent: 'center',&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.04,&#10;    shadowRadius: 2,&#10;    elevation: 2,&#10;  },&#10;  googleIcon: {&#10;    width: 28,&#10;    height: 28,&#10;    marginRight: 12,&#10;    resizeMode: 'contain',&#10;  },&#10;  googleText: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: '#222',&#10;  },&#10;});&#10;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;&#10;export default function SignupScreen() {&#10;  const router = useRouter();&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* Header */}&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;TouchableOpacity onPress={() =&gt; router.back()}&gt;&#10;          &lt;Ionicons name=&quot;arrow-back&quot; size={28} color=&quot;#222&quot; /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;회원가입&lt;/Text&gt;&#10;        &lt;View style={{ width: 28 }} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Progress Bar */}&#10;      &lt;View style={styles.progressBarBg}&gt;&#10;        &lt;View style={styles.progressBar} /&gt;&#10;      &lt;/View&gt;&#10;      {/* Title */}&#10;      &lt;Text style={styles.title}&gt;로그인할 방식을 선택해주세요&lt;/Text&gt;&#10;      {/* Kakao Login Button */}&#10;      &lt;TouchableOpacity style={styles.kakaoBtn}&gt;&#10;        &lt;Text style={styles.kakaoText}&gt;카카오톡으로 로그인&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      {/* Google Login Button */}&#10;      &lt;TouchableOpacity style={styles.googleBtn}&gt;&#10;        &lt;Text style={styles.googleText}&gt;Google로 로그인&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    paddingHorizontal: 0,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingTop: 56,&#10;    paddingHorizontal: 20,&#10;    marginBottom: 16,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;  },&#10;  progressBarBg: {&#10;    height: 10,&#10;    backgroundColor: '#F1F3F6',&#10;    borderRadius: 5,&#10;    marginHorizontal: 20,&#10;    marginBottom: 36,&#10;    marginTop: 0,&#10;  },&#10;  progressBar: {&#10;    width: '25%',&#10;    height: 10,&#10;    backgroundColor: '#1976F7',&#10;    borderRadius: 5,&#10;  },&#10;  title: {&#10;    fontSize: 20,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;    marginTop: 24,&#10;    marginBottom: 48,&#10;    alignSelf: 'center',&#10;  },&#10;  kakaoBtn: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#FEE500',&#10;    borderRadius: 18,&#10;    paddingVertical: 24,&#10;    paddingHorizontal: 24,&#10;    marginHorizontal: 20,&#10;    marginBottom: 24,&#10;    justifyContent: 'center',&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.04,&#10;    shadowRadius: 2,&#10;    elevation: 2,&#10;  },&#10;  kakaoText: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: '#3C1E1E',&#10;  },&#10;  googleBtn: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 18,&#10;    paddingVertical: 24,&#10;    paddingHorizontal: 24,&#10;    marginHorizontal: 20,&#10;    borderWidth: 1.5,&#10;    borderColor: '#D1D5DB',&#10;    justifyContent: 'center',&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.04,&#10;    shadowRadius: 2,&#10;    elevation: 2,&#10;  },&#10;  googleText: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: '#222',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup/complete.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup/complete.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;import StepHeader from '@/components/signup/StepHeader';&#10;import ProgressBar from '@/components/signup/ProgressBar';&#10;import PrimaryButton from '@/components/PrimaryButton';&#10;import {Colors} from '@/constants/Colors';&#10;&#10;export default function SignupComplete() {&#10;  const router = useRouter();&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;StepHeader title=&quot;가입완료&quot; subtitle=&quot;환영합니다! 회원가입이 성공적으로 완료되었습니다&quot; /&gt;&#10;      &lt;ProgressBar progress={100} steps={[&quot;역할&quot;, &quot;약관&quot;, &quot;정보&quot;, &quot;완료&quot;]} currentStep={4} /&gt;&#10;&#10;      &lt;View style={styles.content}&gt;&#10;        &lt;View style={styles.centerContent}&gt;&#10;          &lt;View style={styles.checkCircle}&gt;&#10;            &lt;Ionicons name=&quot;checkmark&quot; size={80} color=&quot;#fff&quot; /&gt;&#10;            &lt;View style={styles.confetti} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;Text style={styles.nameText}&gt;환영합니다!&lt;/Text&gt;&#10;          &lt;Text style={styles.completeText}&gt;가입이 완료되었습니다&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;PrimaryButton title=&quot;홈으로 이동&quot; onPress={() =&gt; router.push('/')} style={styles.homeBtn} /&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#f8f9fb',&#10;  },&#10;  content: {&#10;    flex: 1,&#10;    justifyContent: 'space-between',&#10;    paddingHorizontal: 20,&#10;    paddingBottom: 40,&#10;  },&#10;  centerContent: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;  },&#10;  checkCircle: {&#10;    width: 140,&#10;    height: 140,&#10;    borderRadius: 70,&#10;    backgroundColor: Colors.primary,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginBottom: 32,&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 12,&#10;    elevation: 4,&#10;  },&#10;  confetti: {&#10;    position: 'absolute',&#10;    width: 140,&#10;    height: 140,&#10;    borderRadius: 70,&#10;    borderWidth: 2,&#10;    borderColor: '#ffe066',&#10;    opacity: 0.3,&#10;  },&#10;  nameText: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.primary,&#10;    marginBottom: 8,&#10;  },&#10;  completeText: {&#10;    fontSize: 18,&#10;    color: '#333',&#10;    marginBottom: 24,&#10;  },&#10;  homeBtn: {&#10;    backgroundColor: Colors.primary,&#10;    borderRadius: 12,&#10;    minHeight: 48,&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;import StepHeader from '@/components/signup/StepHeader';&#10;import ProgressBar from '@/components/signup/ProgressBar';&#10;import PrimaryButton from '@/components/PrimaryButton';&#10;import {Colors} from '@/constants/Colors';&#10;&#10;export default function SignupComplete() {&#10;  const router = useRouter();&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;StepHeader title=&quot;가입완료&quot; subtitle=&quot;환영합니다! 회원가입이 성공적으로 완료되었습니다&quot; /&gt;&#10;      &lt;ProgressBar progress={100} steps={[&quot;역할&quot;, &quot;약관&quot;, &quot;정보&quot;, &quot;완료&quot;]} currentStep={4} /&gt;&#10;&#10;      &lt;View style={styles.content}&gt;&#10;        &lt;View style={styles.centerContent}&gt;&#10;          &lt;View style={styles.checkCircle}&gt;&#10;            &lt;Ionicons name=&quot;checkmark&quot; size={80} color=&quot;#fff&quot; /&gt;&#10;            &lt;View style={styles.confetti} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;Text style={styles.nameText}&gt;환영합니다!&lt;/Text&gt;&#10;          &lt;Text style={styles.completeText}&gt;가입이 완료되었습니다&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;PrimaryButton title=&quot;홈으로 이동&quot; onPress={() =&gt; router.push('/')} style={styles.homeBtn} /&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Colors.background,&#10;  },&#10;  content: {&#10;    flex: 1,&#10;    justifyContent: 'space-between',&#10;    paddingHorizontal: 20,&#10;    paddingBottom: 40,&#10;  },&#10;  centerContent: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;  },&#10;  checkCircle: {&#10;    width: 140,&#10;    height: 140,&#10;    borderRadius: 70,&#10;    backgroundColor: Colors.primary,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginBottom: 32,&#10;    shadowColor: Colors.shadow,&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 12,&#10;    elevation: 4,&#10;  },&#10;  confetti: {&#10;    position: 'absolute',&#10;    width: 140,&#10;    height: 140,&#10;    borderRadius: 70,&#10;    borderWidth: 2,&#10;    borderColor: Colors.secondary,&#10;    opacity: 0.3,&#10;  },&#10;  nameText: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.primary,&#10;    marginBottom: 8,&#10;  },&#10;  completeText: {&#10;    fontSize: 18,&#10;    color: Colors.text,&#10;    marginBottom: 24,&#10;  },&#10;  homeBtn: {&#10;    backgroundColor: Colors.primary,&#10;    borderRadius: 12,&#10;    minHeight: 48,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup/index.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import StepHeader from '@/components/signup/StepHeader';&#10;import ProgressBar from '@/components/signup/ProgressBar';&#10;import PrimaryButton from '@/components/PrimaryButton';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function Signup() {&#10;  const router = useRouter();&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;StepHeader title=&quot;회원가입&quot; subtitle=&quot;역할을 선택하고 간편하게 시작하세요&quot; /&gt;&#10;      &lt;ProgressBar progress={25} steps={[&quot;역할&quot;, &quot;약관&quot;, &quot;정보&quot;, &quot;완료&quot;]} currentStep={1} /&gt;&#10;&#10;      &lt;View style={styles.content}&gt;&#10;        {/* Role Selection */}&#10;        &lt;View style={styles.sectionCard}&gt;&#10;          &lt;Text style={styles.title}&gt;시작할 서비스를 선택해주세요&lt;/Text&gt;&#10;          &lt;View style={styles.roleBtnRow}&gt;&#10;            &lt;PrimaryButton title=&quot;보호자&quot; onPress={() =&gt; router.push('/signup/terms')} style={styles.roleBtn} icon=&quot;person&quot; /&gt;&#10;            &lt;PrimaryButton title=&quot;보호 대상자&quot; onPress={() =&gt; router.push('/signup/terms')} style={styles.roleBtn} icon=&quot;people&quot; /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Divider */}&#10;        &lt;View style={styles.dividerRow}&gt;&#10;          &lt;View style={styles.divider} /&gt;&#10;          &lt;Text style={styles.dividerText}&gt;또는&lt;/Text&gt;&#10;          &lt;View style={styles.divider} /&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Social Login */}&#10;        &lt;View style={styles.sectionCard}&gt;&#10;          &lt;Text style={styles.socialTitle}&gt;아래 방법으로 간편하게 가입할 수 있습니다&lt;/Text&gt;&#10;          &lt;PrimaryButton title=&quot;카카오톡으로 로그인&quot; style={styles.socialBtnKakao} icon=&quot;chatbubble-ellipses&quot; /&gt;&#10;          &lt;PrimaryButton title=&quot;Google로 로그인&quot; style={styles.socialBtnGoogle} icon=&quot;logo-google&quot; /&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#f8f9fb',&#10;  },&#10;  content: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    paddingVertical: 32,&#10;    justifyContent: 'center',&#10;  },&#10;  sectionCard: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 24,&#10;    marginBottom: 28,&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  roleBtnRow: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    gap: 16,&#10;  },&#10;  roleBtn: {&#10;    flex: 1,&#10;    marginHorizontal: 4,&#10;    minHeight: 48,&#10;  },&#10;  dividerRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginVertical: 16,&#10;  },&#10;  divider: {&#10;    flex: 1,&#10;    height: 1,&#10;    backgroundColor: '#e0e0e0',&#10;  },&#10;  dividerText: {&#10;    marginHorizontal: 12,&#10;    color: '#aaa',&#10;    fontSize: 14,&#10;  },&#10;  title: {&#10;    fontSize: 22,&#10;    fontWeight: 'bold',&#10;    color: '#111',&#10;    marginBottom: 18,&#10;    textAlign: 'center',&#10;  },&#10;  socialTitle: {&#10;    fontSize: 16,&#10;    color: '#555',&#10;    marginBottom: 18,&#10;    textAlign: 'center',&#10;  },&#10;  socialBtnKakao: {&#10;    backgroundColor: '#FEE500',&#10;    marginBottom: 12,&#10;  },&#10;  socialBtnGoogle: {&#10;    backgroundColor: '#fff',&#10;    borderWidth: 1,&#10;    borderColor: '#eee',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import StepHeader from '@/components/signup/StepHeader';&#10;import ProgressBar from '@/components/signup/ProgressBar';&#10;import PrimaryButton from '@/components/PrimaryButton';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function Signup() {&#10;  const router = useRouter();&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;StepHeader title=&quot;회원가입&quot; subtitle=&quot;역할을 선택하고 간편하게 시작하세요&quot; /&gt;&#10;      &lt;ProgressBar progress={25} steps={[&quot;역할&quot;, &quot;약관&quot;, &quot;정보&quot;, &quot;완료&quot;]} currentStep={1} /&gt;&#10;&#10;      &lt;View style={styles.content}&gt;&#10;        {/* Role Selection */}&#10;        &lt;View style={styles.sectionCard}&gt;&#10;          &lt;Text style={styles.title}&gt;시작할 서비스를 선택해주세요&lt;/Text&gt;&#10;          &lt;View style={styles.roleBtnRow}&gt;&#10;            &lt;PrimaryButton title=&quot;보호자&quot; onPress={() =&gt; router.push('/signup/terms')} style={styles.roleBtn} icon=&quot;person&quot; /&gt;&#10;            &lt;PrimaryButton title=&quot;보호 대상자&quot; onPress={() =&gt; router.push('/signup/terms')} style={styles.roleBtn} icon=&quot;people&quot; /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Divider */}&#10;        &lt;View style={styles.dividerRow}&gt;&#10;          &lt;View style={styles.divider} /&gt;&#10;          &lt;Text style={styles.dividerText}&gt;또는&lt;/Text&gt;&#10;          &lt;View style={styles.divider} /&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Social Login */}&#10;        &lt;View style={styles.sectionCard}&gt;&#10;          &lt;Text style={styles.socialTitle}&gt;아래 방법으로 간편하게 가입할 수 있습니다&lt;/Text&gt;&#10;          &lt;PrimaryButton title=&quot;카카오톡으로 로그인&quot; style={styles.socialBtnKakao} icon=&quot;chatbubble-ellipses&quot; /&gt;&#10;          &lt;PrimaryButton title=&quot;Google로 로그인&quot; style={styles.socialBtnGoogle} icon=&quot;logo-google&quot; /&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Colors.background,&#10;  },&#10;  content: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    paddingVertical: 32,&#10;    justifyContent: 'center',&#10;  },&#10;  sectionCard: {&#10;    backgroundColor: Colors.card,&#10;    borderRadius: 16,&#10;    padding: 24,&#10;    marginBottom: 28,&#10;    shadowColor: Colors.shadow,&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  roleBtnRow: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    gap: 16,&#10;  },&#10;  roleBtn: {&#10;    flex: 1,&#10;    marginHorizontal: 4,&#10;    minHeight: 48,&#10;    backgroundColor: Colors.primary,&#10;  },&#10;  dividerRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginVertical: 16,&#10;  },&#10;  divider: {&#10;    flex: 1,&#10;    height: 1,&#10;    backgroundColor: Colors.border,&#10;  },&#10;  dividerText: {&#10;    marginHorizontal: 12,&#10;    color: Colors.mediumGray,&#10;    fontSize: 14,&#10;  },&#10;  title: {&#10;    fontSize: 22,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 18,&#10;    textAlign: 'center',&#10;  },&#10;  socialTitle: {&#10;    fontSize: 16,&#10;    color: Colors.textSecondary,&#10;    marginBottom: 18,&#10;    textAlign: 'center',&#10;  },&#10;  socialBtnKakao: {&#10;    backgroundColor: '#FEE500',&#10;    marginBottom: 12,&#10;  },&#10;  socialBtnGoogle: {&#10;    backgroundColor: '#fff',&#10;    borderWidth: 1,&#10;    borderColor: Colors.border,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup/terms.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup/terms.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;import StepHeader from '@/components/signup/StepHeader';&#10;import ProgressBar from '@/components/signup/ProgressBar';&#10;import PrimaryButton from '@/components/PrimaryButton';&#10;import {Colors} from '@/constants/Colors';&#10;&#10;export default function SignupTerms() {&#10;  const router = useRouter();&#10;  const [allAgreed, setAllAgreed] = useState(false);&#10;  const [agreed, setAgreed] = useState([false, false, false, false]);&#10;  const terms = [&#10;    '개인정보 처리 목적',&#10;    '개인정보처리및보유기간',&#10;    '이용기간',&#10;    '처리하는 개인정보의 항목',&#10;  ];&#10;&#10;  const handleAllAgree = () =&gt; {&#10;    const newValue = !allAgreed;&#10;    setAllAgreed(newValue);&#10;    setAgreed(agreed.map(() =&gt; newValue));&#10;  };&#10;  const handleAgree = idx =&gt; {&#10;    const newAgreed = [...agreed];&#10;    newAgreed[idx] = !newAgreed[idx];&#10;    setAgreed(newAgreed);&#10;    setAllAgreed(newAgreed.every(Boolean));&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;StepHeader title=&quot;약관동의&quot; subtitle=&quot;서비스 이용을 위해 약관에 동의해주세요&quot; /&gt;&#10;      &lt;ProgressBar progress={35} steps={[&quot;역할&quot;, &quot;약관&quot;, &quot;정보&quot;, &quot;완료&quot;]} currentStep={2} /&gt;&#10;&#10;      &lt;ScrollView style={styles.content}&gt;&#10;        &lt;View style={styles.card}&gt;&#10;          &lt;TouchableOpacity style={styles.termRow} onPress={handleAllAgree}&gt;&#10;            &lt;Ionicons name={allAgreed ? &quot;checkbox&quot; : &quot;checkbox-outline&quot;} size={28} color={Colors.primary} style={{ marginRight: 16 }} /&gt;&#10;            &lt;Text style={[styles.allAgreeText, { color: Colors.primary, fontWeight: 'bold' }]}&gt;전체 약관에 동의합니다&lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;          &lt;View style={styles.divider} /&gt;&#10;          {terms.map((t, i) =&gt; (&#10;            &lt;View style={styles.termRow} key={i}&gt;&#10;              &lt;TouchableOpacity onPress={() =&gt; handleAgree(i)} style={styles.checkBoxBtn}&gt;&#10;                &lt;Ionicons name={agreed[i] ? &quot;checkbox&quot; : &quot;checkbox-outline&quot;} size={24} color={Colors.primary} /&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;              &lt;Text style={styles.termText}&gt;(필수) {t}&lt;/Text&gt;&#10;              &lt;TouchableOpacity style={styles.detailBtn}&gt;&lt;Text style={styles.detailBtnText}&gt;상세보기&lt;/Text&gt;&lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;          ))}&#10;        &lt;/View&gt;&#10;        &lt;Text style={styles.guideText}&gt;모든 약관에 동의해야 다음 단계로 이동할 수 있습니다.&lt;/Text&gt;&#10;      &lt;/ScrollView&gt;&#10;&#10;      &lt;View style={styles.bottomContainer}&gt;&#10;        &lt;PrimaryButton title=&quot;다음&quot; onPress={() =&gt; router.push('/signup/user-info')} disabled={!allAgreed} style={allAgreed ? styles.nextBtn : styles.nextBtnDisabled} /&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#f8f9fb',&#10;  },&#10;  content: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    paddingTop: 24,&#10;  },&#10;  card: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 24,&#10;    marginBottom: 20,&#10;    shadowColor: '#000',&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  termRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 16,&#10;  },&#10;  checkBoxBtn: {&#10;    marginRight: 12,&#10;    padding: 4,&#10;  },&#10;  allAgreeText: {&#10;    fontSize: 18,&#10;  },&#10;  termText: {&#10;    fontSize: 15,&#10;    color: Colors.primary,&#10;    flex: 1,&#10;  },&#10;  detailBtn: {&#10;    paddingHorizontal: 8,&#10;    paddingVertical: 2,&#10;  },&#10;  detailBtnText: {&#10;    color: '#888',&#10;    fontSize: 13,&#10;    textDecorationLine: 'underline',&#10;  },&#10;  divider: {&#10;    height: 1,&#10;    backgroundColor: '#eee',&#10;    marginVertical: 10,&#10;  },&#10;  guideText: {&#10;    color: '#888',&#10;    fontSize: 13,&#10;    textAlign: 'center',&#10;    marginBottom: 12,&#10;  },&#10;  bottomContainer: {&#10;    padding: 20,&#10;    backgroundColor: 'transparent',&#10;  },&#10;  nextBtn: {&#10;    backgroundColor: Colors.primary,&#10;  },&#10;  nextBtnDisabled: {&#10;    backgroundColor: '#e0e0e0',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;import StepHeader from '@/components/signup/StepHeader';&#10;import ProgressBar from '@/components/signup/ProgressBar';&#10;import PrimaryButton from '@/components/PrimaryButton';&#10;import {Colors} from '@/constants/Colors';&#10;&#10;export default function SignupTerms() {&#10;  const router = useRouter();&#10;  const [allAgreed, setAllAgreed] = useState(false);&#10;  const [agreed, setAgreed] = useState([false, false, false, false]);&#10;  const terms = [&#10;    '개인정보 처리 목적',&#10;    '개인정보처리및보유기간',&#10;    '이용기간',&#10;    '처리하는 개인정보의 항목',&#10;  ];&#10;&#10;  const handleAllAgree = () =&gt; {&#10;    const newValue = !allAgreed;&#10;    setAllAgreed(newValue);&#10;    setAgreed(agreed.map(() =&gt; newValue));&#10;  };&#10;  const handleAgree = idx =&gt; {&#10;    const newAgreed = [...agreed];&#10;    newAgreed[idx] = !newAgreed[idx];&#10;    setAgreed(newAgreed);&#10;    setAllAgreed(newAgreed.every(Boolean));&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;StepHeader title=&quot;약관동의&quot; subtitle=&quot;서비스 이용을 위해 약관에 동의해주세요&quot; /&gt;&#10;      &lt;ProgressBar progress={35} steps={[&quot;역할&quot;, &quot;약관&quot;, &quot;정보&quot;, &quot;완료&quot;]} currentStep={2} /&gt;&#10;&#10;      &lt;ScrollView style={styles.content}&gt;&#10;        &lt;View style={styles.card}&gt;&#10;          &lt;TouchableOpacity style={styles.termRow} onPress={handleAllAgree}&gt;&#10;            &lt;Ionicons name={allAgreed ? &quot;checkbox&quot; : &quot;checkbox-outline&quot;} size={28} color={Colors.primary} style={{ marginRight: 16 }} /&gt;&#10;            &lt;Text style={[styles.allAgreeText, { color: Colors.primary, fontWeight: 'bold' }]}&gt;전체 약관에 동의합니다&lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;          &lt;View style={styles.divider} /&gt;&#10;          {terms.map((t, i) =&gt; (&#10;            &lt;View style={styles.termRow} key={i}&gt;&#10;              &lt;TouchableOpacity onPress={() =&gt; handleAgree(i)} style={styles.checkBoxBtn}&gt;&#10;                &lt;Ionicons name={agreed[i] ? &quot;checkbox&quot; : &quot;checkbox-outline&quot;} size={24} color={Colors.primary} /&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;              &lt;Text style={styles.termText}&gt;(필수) {t}&lt;/Text&gt;&#10;              &lt;TouchableOpacity style={styles.detailBtn}&gt;&lt;Text style={styles.detailBtnText}&gt;상세보기&lt;/Text&gt;&lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;          ))}&#10;        &lt;/View&gt;&#10;        &lt;Text style={styles.guideText}&gt;모든 약관에 동의해야 다음 단계로 이동할 수 있습니다.&lt;/Text&gt;&#10;      &lt;/ScrollView&gt;&#10;&#10;      &lt;View style={styles.bottomContainer}&gt;&#10;        &lt;PrimaryButton title=&quot;다음&quot; onPress={() =&gt; router.push('/signup/user-info')} disabled={!allAgreed} style={allAgreed ? styles.nextBtn : styles.nextBtnDisabled} /&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Colors.background,&#10;  },&#10;  content: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    paddingTop: 24,&#10;  },&#10;  card: {&#10;    backgroundColor: Colors.card,&#10;    borderRadius: 16,&#10;    padding: 24,&#10;    marginBottom: 20,&#10;    shadowColor: Colors.shadow,&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  termRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 16,&#10;  },&#10;  checkBoxBtn: {&#10;    marginRight: 12,&#10;    padding: 4,&#10;  },&#10;  allAgreeText: {&#10;    fontSize: 18,&#10;    color: Colors.primary,&#10;  },&#10;  termText: {&#10;    fontSize: 15,&#10;    color: Colors.primary,&#10;    flex: 1,&#10;  },&#10;  detailBtn: {&#10;    paddingHorizontal: 8,&#10;    paddingVertical: 2,&#10;  },&#10;  detailBtnText: {&#10;    color: Colors.mediumGray,&#10;    fontSize: 13,&#10;    textDecorationLine: 'underline',&#10;  },&#10;  divider: {&#10;    height: 1,&#10;    backgroundColor: Colors.border,&#10;    marginVertical: 10,&#10;  },&#10;  guideText: {&#10;    color: Colors.textSecondary,&#10;    fontSize: 13,&#10;    textAlign: 'center',&#10;    marginBottom: 12,&#10;  },&#10;  bottomContainer: {&#10;    padding: 20,&#10;    backgroundColor: 'transparent',&#10;  },&#10;  nextBtn: {&#10;    backgroundColor: Colors.primary,&#10;  },&#10;  nextBtnDisabled: {&#10;    backgroundColor: Colors.lightGray,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/signup/user-info.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/signup/user-info.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, TextInput, ScrollView } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;import StepHeader from '@/components/signup/StepHeader';&#10;import ProgressBar from '@/components/signup/ProgressBar';&#10;import PrimaryButton from '@/components/PrimaryButton';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const DISEASES = [&#10;  '당뇨병', '고혈압', '무릎관절증', '만성요통',&#10;  '만성위염', '시력감퇴', '만성심질환', '알레르기',&#10;  '전립선 비대증', '치매',&#10;];&#10;&#10;const ALLERGIES = [&#10;  '게', '대두', '꽃가루', '땅콩',&#10;  '계란', '석류', '벌', '꿀',&#10;  '카페인 민감', 'MSG 민감',&#10;];&#10;&#10;export default function SignupUserInfo() {&#10;  const router = useRouter();&#10;  const [name, setName] = useState('');&#10;  const [rrn1, setRrn1] = useState('');&#10;  const [rrn2, setRrn2] = useState('');&#10;  const [phone, setPhone] = useState('');&#10;  const [focus, setFocus] = useState('');&#10;  const isValid = name &amp;&amp; rrn1.length === 6 &amp;&amp; rrn2.length === 1 &amp;&amp; phone.length &gt;= 10;&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;StepHeader title=&quot;정보입력&quot; subtitle=&quot;정확한 정보를 입력해주세요&quot; /&gt;&#10;      &lt;ProgressBar progress={70} steps={[&quot;역할&quot;, &quot;약관&quot;, &quot;정보&quot;, &quot;완료&quot;]} currentStep={3} /&gt;&#10;&#10;      &lt;ScrollView style={styles.content}&gt;&#10;        &lt;View style={styles.card}&gt;&#10;          &lt;Text style={styles.label}&gt;이름&lt;/Text&gt;&#10;          &lt;View style={styles.inputRow}&gt;&#10;            &lt;Ionicons name=&quot;person-outline&quot; size={20} color={focus==='name'?Colors.primary:'#bbb'} style={styles.inputIcon} /&gt;&#10;            &lt;TextInput&#10;              style={[styles.input, name ? styles.inputActive : null, focus==='name'&amp;&amp;styles.inputFocus]}&#10;              placeholder=&quot;이름을 입력하세요&quot;&#10;              placeholderTextColor={Colors.primaryLight}&#10;              value={name}&#10;              onChangeText={setName}&#10;              onFocus={()=&gt;setFocus('name')}&#10;              onBlur={()=&gt;setFocus('')}&#10;              selectionColor={Colors.primary}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;          &lt;Text style={styles.label}&gt;주민등록번호&lt;/Text&gt;&#10;          &lt;View style={styles.rrnRow}&gt;&#10;            &lt;View style={styles.inputRow}&gt;&#10;              &lt;Ionicons name=&quot;key-outline&quot; size={20} color={focus==='rrn1'?Colors.primary:'#bbb'} style={styles.inputIcon} /&gt;&#10;              &lt;TextInput&#10;                style={[styles.input, { flex: 1 }, rrn1 ? styles.inputActive : null, focus==='rrn1'&amp;&amp;styles.inputFocus]}&#10;                placeholder=&quot;앞 6자리&quot;&#10;                placeholderTextColor={Colors.primaryLight}&#10;                value={rrn1}&#10;                onChangeText={setRrn1}&#10;                keyboardType=&quot;number-pad&quot;&#10;                maxLength={6}&#10;                onFocus={()=&gt;setFocus('rrn1')}&#10;                onBlur={()=&gt;setFocus('')}&#10;                selectionColor={Colors.primary}&#10;              /&gt;&#10;            &lt;/View&gt;&#10;            &lt;Text style={styles.rrnDash}&gt;-&lt;/Text&gt;&#10;            &lt;View style={styles.inputRow}&gt;&#10;              &lt;Ionicons name=&quot;key-outline&quot; size={20} color={focus==='rrn2'?Colors.primary:'#bbb'} style={styles.inputIcon} /&gt;&#10;              &lt;TextInput&#10;                style={[styles.input, { flex: 1 }, rrn2 ? styles.inputActive : null, focus==='rrn2'&amp;&amp;styles.inputFocus]}&#10;                placeholder=&quot;뒤 1자리&quot;&#10;                placeholderTextColor={Colors.primaryLight}&#10;                value={rrn2}&#10;                onChangeText={setRrn2}&#10;                keyboardType=&quot;number-pad&quot;&#10;                maxLength={1}&#10;                onFocus={()=&gt;setFocus('rrn2')}&#10;                onBlur={()=&gt;setFocus('')}&#10;                selectionColor={Colors.primary}&#10;              /&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;          &lt;Text style={styles.label}&gt;휴대폰 번호&lt;/Text&gt;&#10;          &lt;View style={styles.inputRow}&gt;&#10;            &lt;Ionicons name=&quot;call-outline&quot; size={20} color={focus==='phone'?Colors.primary:'#bbb'} style={styles.inputIcon} /&gt;&#10;            &lt;TextInput&#10;              style={[styles.input, phone ? styles.inputActive : null, focus==='phone'&amp;&amp;styles.inputFocus]}&#10;              placeholder=&quot;- 없이 숫자만 입력&quot;&#10;              placeholderTextColor={Colors.primaryLight}&#10;              value={phone}&#10;              onChangeText={setPhone}&#10;              keyboardType=&quot;phone-pad&quot;&#10;              maxLength={13}&#10;              onFocus={()=&gt;setFocus('phone')}&#10;              onBlur={()=&gt;setFocus('')}&#10;              selectionColor={Colors.primary}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;          {!isValid &amp;&amp; &lt;Text style={styles.errorText}&gt;모든 정보를 올바르게 입력해주세요.&lt;/Text&gt;}&#10;        &lt;/View&gt;&#10;        &lt;Text style={styles.guideText}&gt;입력하신 정보는 안전하게 보호됩니다.&lt;/Text&gt;&#10;      &lt;/ScrollView&gt;&#10;&#10;      &lt;View style={styles.bottomContainer}&gt;&#10;        &lt;PrimaryButton title=&quot;다음&quot; onPress={() =&gt; router.push('/signup/complete')} disabled={!isValid} style={isValid ? styles.nextBtn : styles.nextBtnDisabled} /&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Colors.background,&#10;  },&#10;  content: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    paddingTop: 24,&#10;  },&#10;  card: {&#10;    backgroundColor: Colors.card,&#10;    borderRadius: 16,&#10;    padding: 24,&#10;    marginBottom: 20,&#10;    shadowColor: Colors.shadow,&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  label: {&#10;    fontSize: 15,&#10;    color: Colors.text,&#10;    marginBottom: 6,&#10;    marginTop: 12,&#10;  },&#10;  inputRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 8,&#10;    backgroundColor: Colors.primaryLight,&#10;    borderRadius: 8,&#10;    paddingHorizontal: 8,&#10;  },&#10;  inputIcon: {&#10;    marginRight: 6,&#10;    color: Colors.icon,&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    height: 44,&#10;    fontSize: 16,&#10;    color: Colors.text,&#10;    backgroundColor: 'transparent',&#10;  },&#10;  inputActive: {&#10;    color: Colors.primary,&#10;  },&#10;  inputFocus: {&#10;    borderBottomWidth: 2,&#10;    borderBottomColor: Colors.primary,&#10;  },&#10;  rrnRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 8,&#10;  },&#10;  rrnDash: {&#10;    fontSize: 18,&#10;    color: Colors.mediumGray,&#10;    marginHorizontal: 6,&#10;  },&#10;  errorText: {&#10;    color: Colors.danger,&#10;    fontSize: 13,&#10;    marginTop: 4,&#10;    marginBottom: 0,&#10;  },&#10;  guideText: {&#10;    color: Colors.textSecondary,&#10;    fontSize: 13,&#10;    textAlign: 'center',&#10;    marginBottom: 12,&#10;  },&#10;  bottomContainer: {&#10;    padding: 20,&#10;    backgroundColor: 'transparent',&#10;  },&#10;  nextBtn: {&#10;    backgroundColor: Colors.primary,&#10;  },&#10;  nextBtnDisabled: {&#10;    backgroundColor: Colors.lightGray,&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, TextInput, ScrollView } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;import { Ionicons } from '@expo/vector-icons';&#10;import StepHeader from '@/components/signup/StepHeader';&#10;import ProgressBar from '@/components/signup/ProgressBar';&#10;import PrimaryButton from '@/components/PrimaryButton';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const DISEASES = [&#10;  '당뇨병', '고혈압', '무릎관절증', '만성요통',&#10;  '만성위염', '시력감퇴', '만성심질환', '알레르기',&#10;  '전립선 비대증', '치매',&#10;];&#10;&#10;const ALLERGIES = [&#10;  '게', '대두', '꽃가루', '땅콩',&#10;  '계란', '석류', '벌', '꿀',&#10;  '카페인 민감', 'MSG 민감',&#10;];&#10;&#10;export default function SignupUserInfo() {&#10;  const router = useRouter();&#10;  const [name, setName] = useState('');&#10;  const [rrn1, setRrn1] = useState('');&#10;  const [rrn2, setRrn2] = useState('');&#10;  const [phone, setPhone] = useState('');&#10;  const [focus, setFocus] = useState('');&#10;  const isValid = name &amp;&amp; rrn1.length === 6 &amp;&amp; rrn2.length === 1 &amp;&amp; phone.length &gt;= 10;&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;StepHeader title=&quot;정보입력&quot; subtitle=&quot;정확한 정보를 입력해주세요&quot; /&gt;&#10;      &lt;ProgressBar progress={70} steps={[&quot;역할&quot;, &quot;약관&quot;, &quot;정보&quot;, &quot;완료&quot;]} currentStep={3} /&gt;&#10;&#10;      &lt;ScrollView style={styles.content}&gt;&#10;        &lt;View style={styles.card}&gt;&#10;          &lt;Text style={styles.label}&gt;이름&lt;/Text&gt;&#10;          &lt;View style={styles.inputRow}&gt;&#10;            &lt;Ionicons name=&quot;person-outline&quot; size={20} color={focus==='name'?Colors.primary:'#bbb'} style={styles.inputIcon} /&gt;&#10;            &lt;TextInput&#10;              style={[styles.input, name ? styles.inputActive : null, focus==='name'&amp;&amp;styles.inputFocus]}&#10;              placeholder=&quot;이름을 입력하세요&quot;&#10;              placeholderTextColor={Colors.primaryLight}&#10;              value={name}&#10;              onChangeText={setName}&#10;              onFocus={()=&gt;setFocus('name')}&#10;              onBlur={()=&gt;setFocus('')}&#10;              selectionColor={Colors.primary}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;          &lt;Text style={styles.label}&gt;주민등록번호&lt;/Text&gt;&#10;          &lt;View style={styles.rrnRow}&gt;&#10;            &lt;View style={styles.inputRow}&gt;&#10;              &lt;Ionicons name=&quot;key-outline&quot; size={20} color={focus==='rrn1'?Colors.primary:'#bbb'} style={styles.inputIcon} /&gt;&#10;              &lt;TextInput&#10;                style={[styles.input, { flex: 1 }, rrn1 ? styles.inputActive : null, focus==='rrn1'&amp;&amp;styles.inputFocus]}&#10;                placeholder=&quot;앞 6자리&quot;&#10;                placeholderTextColor={Colors.primaryLight}&#10;                value={rrn1}&#10;                onChangeText={setRrn1}&#10;                keyboardType=&quot;number-pad&quot;&#10;                maxLength={6}&#10;                onFocus={()=&gt;setFocus('rrn1')}&#10;                onBlur={()=&gt;setFocus('')}&#10;                selectionColor={Colors.primary}&#10;              /&gt;&#10;            &lt;/View&gt;&#10;            &lt;Text style={styles.rrnDash}&gt;-&lt;/Text&gt;&#10;            &lt;View style={styles.inputRow}&gt;&#10;              &lt;Ionicons name=&quot;key-outline&quot; size={20} color={focus==='rrn2'?Colors.primary:'#bbb'} style={styles.inputIcon} /&gt;&#10;              &lt;TextInput&#10;                style={[styles.input, { flex: 1 }, rrn2 ? styles.inputActive : null, focus==='rrn2'&amp;&amp;styles.inputFocus]}&#10;                placeholder=&quot;뒤 1자리&quot;&#10;                placeholderTextColor={Colors.primaryLight}&#10;                value={rrn2}&#10;                onChangeText={setRrn2}&#10;                keyboardType=&quot;number-pad&quot;&#10;                maxLength={1}&#10;                onFocus={()=&gt;setFocus('rrn2')}&#10;                onBlur={()=&gt;setFocus('')}&#10;                selectionColor={Colors.primary}&#10;              /&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;          &lt;Text style={styles.label}&gt;휴대폰 번호&lt;/Text&gt;&#10;          &lt;View style={styles.inputRow}&gt;&#10;            &lt;Ionicons name=&quot;call-outline&quot; size={20} color={focus==='phone'?Colors.primary:'#bbb'} style={styles.inputIcon} /&gt;&#10;            &lt;TextInput&#10;              style={[styles.input, phone ? styles.inputActive : null, focus==='phone'&amp;&amp;styles.inputFocus]}&#10;              placeholder=&quot;- 없이 숫자만 입력&quot;&#10;              placeholderTextColor={Colors.primaryLight}&#10;              value={phone}&#10;              onChangeText={setPhone}&#10;              keyboardType=&quot;phone-pad&quot;&#10;              maxLength={13}&#10;              onFocus={()=&gt;setFocus('phone')}&#10;              onBlur={()=&gt;setFocus('')}&#10;              selectionColor={Colors.primary}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;          {!isValid &amp;&amp; &lt;Text style={styles.errorText}&gt;모든 정보를 올바르게 입력해주세요.&lt;/Text&gt;}&#10;        &lt;/View&gt;&#10;        &lt;Text style={styles.guideText}&gt;입력하신 정보는 안전하게 보호됩니다.&lt;/Text&gt;&#10;      &lt;/ScrollView&gt;&#10;&#10;      &lt;View style={styles.bottomContainer}&gt;&#10;        &lt;PrimaryButton title=&quot;다음&quot; onPress={() =&gt; router.push('/signup/complete')} disabled={!isValid} style={isValid ? styles.nextBtn : styles.nextBtnDisabled} /&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Colors.background,&#10;  },&#10;  content: {&#10;    flex: 1,&#10;    paddingHorizontal: 20,&#10;    paddingTop: 24,&#10;  },&#10;  card: {&#10;    backgroundColor: Colors.card,&#10;    borderRadius: 16,&#10;    padding: 28, // 여백 증가&#10;    marginBottom: 24,&#10;    shadowColor: Colors.shadow,&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 12,&#10;    elevation: 3,&#10;  },&#10;  label: {&#10;    fontSize: 16,&#10;    color: Colors.text,&#10;    marginBottom: 8,&#10;    marginTop: 16,&#10;    fontWeight: 'bold', // 라벨 강조&#10;  },&#10;  inputRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 12,&#10;    backgroundColor: Colors.primaryLight,&#10;    borderRadius: 8,&#10;    paddingHorizontal: 12,&#10;    borderWidth: 1,&#10;    borderColor: Colors.border,&#10;  },&#10;  inputIcon: {&#10;    marginRight: 6,&#10;    color: Colors.icon,&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    height: 44,&#10;    fontSize: 16,&#10;    color: Colors.text, // 검은색 계열로 변경&#10;    backgroundColor: 'transparent',&#10;  },&#10;  inputActive: {&#10;    color: Colors.text, // 파란색에서 검은색으로 변경&#10;  },&#10;  inputFocus: {&#10;    borderBottomWidth: 2,&#10;    borderBottomColor: Colors.primary, // 강조색은 초록 유지&#10;  },&#10;  rrnRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    marginBottom: 8,&#10;  },&#10;  rrnDash: {&#10;    fontSize: 18,&#10;    color: Colors.mediumGray,&#10;    marginHorizontal: 8,&#10;  },&#10;  errorText: {&#10;    color: Colors.danger,&#10;    fontSize: 14,&#10;    marginTop: 8,&#10;    marginBottom: 0,&#10;    textAlign: 'right',&#10;  },&#10;  guideText: {&#10;    color: Colors.textSecondary,&#10;    fontSize: 14,&#10;    textAlign: 'center',&#10;    marginBottom: 16,&#10;  },&#10;  bottomContainer: {&#10;    padding: 20,&#10;    backgroundColor: 'transparent',&#10;  },&#10;  nextBtn: {&#10;    backgroundColor: Colors.primary,&#10;    borderRadius: 10,&#10;    minHeight: 48,&#10;  },&#10;  nextBtnDisabled: {&#10;    backgroundColor: Colors.lightGray,&#10;    borderRadius: 10,&#10;    minHeight: 48,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/AuthInput.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/AuthInput.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { View, TextInput, Text, StyleSheet, TextInputProps } from 'react-native';&#10;import { Ionicons } from '@expo/vector-icons';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface AuthInputProps extends TextInputProps {&#10;  label: string;&#10;  icon?: keyof typeof Ionicons.glyphMap;&#10;  error?: string | null;&#10;  isFocused?: boolean;&#10;}&#10;&#10;const AuthInput: React.FC&lt;AuthInputProps&gt; = ({ label, icon, error, isFocused, secureTextEntry, ...props }) =&gt; {&#10;  const [showPassword, setShowPassword] = useState(false);&#10;  const isPassword = !!secureTextEntry;&#10;&#10;  const iconColor = error ? Colors.danger : isFocused ? Colors.primary : Colors.mediumGray;&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {!!label &amp;&amp; &lt;Text style={styles.label}&gt;{label}&lt;/Text&gt;}&#10;      &lt;View&#10;        style={[&#10;          styles.inputContainer,&#10;          isFocused &amp;&amp; styles.inputContainerFocused,&#10;          error &amp;&amp; styles.inputContainerError,&#10;        ]}&#10;      &gt;&#10;        {icon &amp;&amp; &lt;Ionicons name={icon} size={20} color={iconColor} style={styles.icon} /&gt;}&#10;        &lt;TextInput&#10;          style={styles.input}&#10;          placeholderTextColor={Colors.placeholder}&#10;          secureTextEntry={isPassword &amp;&amp; !showPassword}&#10;          {...props}&#10;        /&gt;&#10;        {isPassword &amp;&amp; (&#10;          &lt;Ionicons&#10;            name={showPassword ? 'eye-off' : 'eye'}&#10;            size={20}&#10;            color={Colors.mediumGray}&#10;            style={styles.eyeIcon}&#10;            onPress={() =&gt; setShowPassword((prev) =&gt; !prev)}&#10;          /&gt;&#10;        )}&#10;      &lt;/View&gt;&#10;      {error &amp;&amp; &lt;Text style={styles.errorText}&gt;{error}&lt;/Text&gt;}&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    marginBottom: 20,&#10;  },&#10;  label: {&#10;    fontSize: 14,&#10;    fontWeight: '500',&#10;    color: Colors.darkGray,&#10;    marginBottom: 8,&#10;  },&#10;  inputContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: Colors.lightGray,&#10;    borderRadius: 14,&#10;    borderWidth: 1.5,&#10;    borderColor: 'transparent',&#10;    paddingHorizontal: 16,&#10;    height: 54,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 2,&#10;  },&#10;  inputContainerFocused: {&#10;    borderColor: Colors.primary,&#10;    backgroundColor: '#fff',&#10;    shadowOpacity: 0.12,&#10;    shadowRadius: 4,&#10;  },&#10;  inputContainerError: {&#10;    borderColor: Colors.danger,&#10;  },&#10;  icon: {&#10;    marginRight: 10,&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    fontSize: 16,&#10;    color: Colors.text,&#10;    paddingVertical: 10,&#10;  },&#10;  eyeIcon: {&#10;    marginLeft: 8,&#10;  },&#10;  errorText: {&#10;    marginTop: 6,&#10;    fontSize: 12,&#10;    color: Colors.danger,&#10;    fontWeight: '500',&#10;  },&#10;});&#10;&#10;export default AuthInput;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { View, TextInput, Text, StyleSheet, TextInputProps } from 'react-native';&#10;import { Ionicons } from '@expo/vector-icons';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface AuthInputProps extends TextInputProps {&#10;  label: string;&#10;  icon?: keyof typeof Ionicons.glyphMap;&#10;  error?: string | null;&#10;  isFocused?: boolean;&#10;}&#10;&#10;const AuthInput: React.FC&lt;AuthInputProps&gt; = ({ label, icon, error, isFocused, secureTextEntry, ...props }) =&gt; {&#10;  const [showPassword, setShowPassword] = useState(false);&#10;  const isPassword = !!secureTextEntry;&#10;&#10;  const iconColor = error ? Colors.danger : isFocused ? Colors.primary : Colors.mediumGray;&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {!!label &amp;&amp; &lt;Text style={styles.label}&gt;{label}&lt;/Text&gt;}&#10;      &lt;View&#10;        style={[&#10;          styles.inputContainer,&#10;          isFocused &amp;&amp; styles.inputContainerFocused,&#10;          error &amp;&amp; styles.inputContainerError,&#10;        ]}&#10;      &gt;&#10;        {icon &amp;&amp; &lt;Ionicons name={icon} size={22} color={iconColor} style={styles.icon} /&gt;}&#10;        &lt;TextInput&#10;          style={styles.input}&#10;          placeholderTextColor={Colors.placeholder || '#B0B8C1'}&#10;          secureTextEntry={isPassword &amp;&amp; !showPassword}&#10;          {...props}&#10;        /&gt;&#10;        {isPassword &amp;&amp; (&#10;          &lt;Ionicons&#10;            name={showPassword ? 'eye-off' : 'eye'}&#10;            size={20}&#10;            color={Colors.mediumGray}&#10;            style={styles.eyeIcon}&#10;            onPress={() =&gt; setShowPassword((prev) =&gt; !prev)}&#10;          /&gt;&#10;        )}&#10;      &lt;/View&gt;&#10;      {error &amp;&amp; &lt;Text style={styles.errorText}&gt;{error}&lt;/Text&gt;}&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    marginBottom: 22,&#10;  },&#10;  label: {&#10;    fontSize: 15,&#10;    fontWeight: '600',&#10;    color: Colors.darkGray,&#10;    marginBottom: 7,&#10;    marginLeft: 2,&#10;  },&#10;  inputContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#F7F8FA',&#10;    borderRadius: 14,&#10;    borderWidth: 1.5,&#10;    borderColor: 'transparent',&#10;    paddingHorizontal: 16,&#10;    height: 54,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.04,&#10;    shadowRadius: 2,&#10;    transitionProperty: 'border-color, box-shadow',&#10;    transitionDuration: '0.2s',&#10;  },&#10;  inputContainerFocused: {&#10;    borderColor: Colors.primary,&#10;    backgroundColor: '#fff',&#10;    shadowOpacity: 0.10,&#10;    shadowRadius: 4,&#10;  },&#10;  inputContainerError: {&#10;    borderColor: Colors.danger,&#10;    backgroundColor: '#FFF6F6',&#10;  },&#10;  icon: {&#10;    marginRight: 10,&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    fontSize: 17,&#10;    color: Colors.text,&#10;    paddingVertical: 10,&#10;    backgroundColor: 'transparent',&#10;  },&#10;  eyeIcon: {&#10;    marginLeft: 8,&#10;  },&#10;  errorText: {&#10;    marginTop: 6,&#10;    fontSize: 13,&#10;    color: Colors.danger,&#10;    fontWeight: '500',&#10;    marginLeft: 2,&#10;  },&#10;});&#10;&#10;export default AuthInput;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CalendarComponent.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CalendarComponent.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet } from 'react-native';&#10;import { Calendar, LocaleConfig } from 'react-native-calendars';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;// 한국어 로케일 설정&#10;LocaleConfig.locales['ko'] = {&#10;  monthNames: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  monthNamesShort: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],&#10;  dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'],&#10;  today: '오늘'&#10;};&#10;LocaleConfig.defaultLocale = 'ko';&#10;&#10;interface CalendarComponentProps {&#10;  markedDates?: any;&#10;  onDayPress?: (day: any) =&gt; void;&#10;}&#10;&#10;const CalendarComponent: React.FC&lt;CalendarComponentProps&gt; = ({&#10;  markedDates,&#10;  onDayPress&#10;}) =&gt; {&#10;  const defaultMarkedDates = {&#10;    &quot;2024-08-05&quot;: { selected: true, selectedColor: Colors.primary },&#10;    &quot;2024-08-06&quot;: { marked: true, dotColor: Colors.danger },&#10;    &quot;2024-08-07&quot;: { marked: true, dotColor: Colors.secondary },&#10;    &quot;2024-08-08&quot;: { marked: true, dotColor: Colors.warning },&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.sectionContainer}&gt;&#10;      &lt;View style={styles.sectionHeader}&gt;&#10;        &lt;Text style={styles.sectionTitle}&gt;복용 캘린더&lt;/Text&gt;&#10;        &lt;Text style={styles.sectionSubtitle}&gt;이번 달 복용 현황&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;Calendar&#10;        style={styles.calendar}&#10;        markedDates={markedDates || defaultMarkedDates}&#10;        theme={{&#10;          todayTextColor: Colors.primary,&#10;          arrowColor: Colors.primary,&#10;          selectedDayBackgroundColor: Colors.primary,&#10;          selectedDayTextColor: Colors.background,&#10;          monthTextColor: Colors.text,&#10;          textDayFontWeight: '500',&#10;          textMonthFontWeight: 'bold',&#10;          textDayHeaderFontWeight: '600',&#10;        }}&#10;        firstDay={1}&#10;        monthFormat={'yyyy년 M월'}&#10;        onDayPress={onDayPress}&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  calendar: {&#10;    borderRadius: 16,&#10;    backgroundColor: '#fff',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;});&#10;&#10;export default CalendarComponent;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet } from 'react-native';&#10;import { Calendar, LocaleConfig } from 'react-native-calendars';&#10;import { Colors, CalendarStatus, CalendarStatusColors, CalendarPillData } from '@/constants/Colors';&#10;&#10;// 한국어 로케일 설정&#10;LocaleConfig.locales['ko'] = {&#10;  monthNames: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  monthNamesShort: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],&#10;  dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'],&#10;  today: '오늘'&#10;};&#10;LocaleConfig.defaultLocale = 'ko';&#10;&#10;interface CalendarComponentProps {&#10;  markedDates?: any;&#10;  onDayPress?: (day: any) =&gt; void;&#10;}&#10;&#10;const getMarkedDatesFromPillData = (pillData: any) =&gt; {&#10;  const marked: any = {};&#10;  Object.entries(pillData).forEach(([date, { status }]: any) =&gt; {&#10;    if (status === CalendarStatus.all) {&#10;      marked[date] = { selected: true, selectedColor: CalendarStatusColors.all };&#10;    } else if (status === CalendarStatus.partial) {&#10;      marked[date] = { marked: true, dotColor: CalendarStatusColors.partial };&#10;    } else if (status === CalendarStatus.none) {&#10;      marked[date] = { marked: true, dotColor: CalendarStatusColors.none };&#10;    }&#10;  });&#10;  return marked;&#10;};&#10;&#10;const CalendarComponent: React.FC&lt;CalendarComponentProps&gt; = ({&#10;  markedDates,&#10;  onDayPress&#10;}) =&gt; {&#10;  // Constants에서 가져온 pillData를 사용&#10;  const pillData = CalendarPillData;&#10;  const dynamicMarkedDates = getMarkedDatesFromPillData(pillData);&#10;&#10;  return (&#10;    &lt;View style={styles.sectionContainer}&gt;&#10;      &lt;View style={styles.sectionHeader}&gt;&#10;        &lt;Text style={styles.sectionTitle}&gt;복용 캘린더&lt;/Text&gt;&#10;        &lt;Text style={styles.sectionSubtitle}&gt;이번 달 복용 현황&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;Calendar&#10;        style={styles.calendar}&#10;        markedDates={markedDates || dynamicMarkedDates}&#10;        theme={{&#10;          todayTextColor: Colors.primary,&#10;          arrowColor: Colors.primary,&#10;          selectedDayBackgroundColor: CalendarStatusColors.all,&#10;          selectedDayTextColor: Colors.background,&#10;          dotColor: CalendarStatusColors.partial,&#10;          textDayFontWeight: '500',&#10;          textMonthFontWeight: 'bold',&#10;        }}&#10;        onDayPress={onDayPress}&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  calendar: {&#10;    borderRadius: 16,&#10;    backgroundColor: '#fff',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;});&#10;&#10;export default CalendarComponent;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CustomNavbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CustomNavbar.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;&#10;// 네비바 아이콘 예시 (실제 경로에 맞게 수정 필요)&#10;const icons = [&#10;  require('../assets/images/home.png'),&#10;  require('../assets/images/search.png'),&#10;  require('../assets/images/plus.png'),&#10;  require('../assets/images/alert.png'),&#10;  require('../assets/images/user.png'),&#10;];&#10;&#10;const labels = ['홈', '검색', '추가', '알림', '내정보'];&#10;&#10;export default function CustomNavbar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; (&#10;        &lt;TouchableOpacity&#10;          key={idx}&#10;          style={[styles.tab, activeIndex === idx &amp;&amp; styles.activeTab]}&#10;          onPress={() =&gt; {&#10;            if (onTabPress) onTabPress(idx);&#10;            // router.push(...) 등 라우팅 처리 가능&#10;          }}&#10;          activeOpacity={0.7}&#10;        &gt;&#10;          &lt;Image source={icon} style={[styles.icon, activeIndex === idx &amp;&amp; styles.activeIcon]} /&gt;&#10;          &lt;Text style={[styles.label, activeIndex === idx &amp;&amp; styles.activeLabel]}&gt;{labels[idx]}&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      ))}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: '#fff',&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: -2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 8,&#10;    paddingBottom: 12,&#10;    paddingTop: 8,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 4,&#10;    borderRadius: 16,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: '#F5F5F5',&#10;  },&#10;  icon: {&#10;    width: 28,&#10;    height: 28,&#10;    marginBottom: 2,&#10;    opacity: 0.7,&#10;  },&#10;  activeIcon: {&#10;    opacity: 1,&#10;  },&#10;  label: {&#10;    fontSize: 12,&#10;    color: '#888',&#10;    fontWeight: '500',&#10;  },&#10;  activeLabel: {&#10;    color: '#222',&#10;    fontWeight: 'bold',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/LargeButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/LargeButton.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { TouchableOpacity, Text, StyleSheet, View, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface LargeButtonProps {&#10;  label: string;&#10;  onPress: () =&gt; void;&#10;  iconType?: 'kakao' | 'google';&#10;}&#10;&#10;export default function LargeButton({ label, onPress, iconType }: LargeButtonProps) {&#10;  let icon = null;&#10;  let buttonStyle = [styles.button];&#10;  let textStyle = [styles.text];&#10;&#10;  if (iconType === 'kakao') {&#10;    buttonStyle.push(styles.kakaoButton);&#10;    textStyle.push(styles.kakaoText);&#10;    icon = (&#10;      &lt;View style={styles.kakaoIconWrap}&gt;&lt;Text style={styles.kakaoIcon}&gt;TALK&lt;/Text&gt;&lt;/View&gt;&#10;    );&#10;  } else if (iconType === 'google') {&#10;    buttonStyle.push(styles.googleButton);&#10;    icon = (&#10;      &lt;Image source={{uri: 'https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg'}} style={styles.googleIcon} /&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;TouchableOpacity style={buttonStyle} onPress={onPress}&gt;&#10;      {icon}&#10;      &lt;Text style={textStyle}&gt;{label}&lt;/Text&gt;&#10;    &lt;/TouchableOpacity&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  button: {&#10;    width: '100%',&#10;    backgroundColor: Colors.primary,&#10;    borderRadius: 20,&#10;    paddingVertical: 32,&#10;    alignItems: 'center',&#10;    flexDirection: 'row',&#10;    justifyContent: 'center',&#10;    marginBottom: 32,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.12,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  text: {&#10;    color: '#fff',&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;  },&#10;  kakaoButton: {&#10;    backgroundColor: '#FEE500',&#10;    marginBottom: 24,&#10;  },&#10;  kakaoText: {&#10;    color: '#3C1E1E',&#10;  },&#10;  kakaoIconWrap: {&#10;    backgroundColor: '#3C1E1E',&#10;    borderRadius: 12,&#10;    paddingHorizontal: 10,&#10;    paddingVertical: 2,&#10;    marginRight: 10,&#10;  },&#10;  kakaoIcon: {&#10;    color: '#fff',&#10;    fontWeight: 'bold',&#10;    fontSize: 14,&#10;  },&#10;  googleButton: {&#10;    backgroundColor: '#fff',&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;    marginBottom: 24,&#10;  },&#10;  googleIcon: {&#10;    width: 24,&#10;    height: 24,&#10;    marginRight: 10,&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/NavigationButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/NavigationButton.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/SearchBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/SearchBar.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, TextInput, StyleSheet, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function SearchBar({ value, onChangeText, placeholder = '복용하시는 약을 등록해보세요' }: {&#10;  value?: string;&#10;  onChangeText?: (text: string) =&gt; void;&#10;  placeholder?: string;&#10;}) {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Image&#10;        source={{ uri: 'https://img.icons8.com/ios-filled/50/888888/search--v1.png' }}&#10;        style={styles.icon}&#10;        resizeMode=&quot;contain&quot;&#10;      /&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder={placeholder}&#10;        placeholderTextColor={Colors.mediumGray}&#10;        value={value}&#10;        onChangeText={onChangeText}&#10;        underlineColorAndroid=&quot;transparent&quot;&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  icon: {&#10;    width: 22,&#10;    height: 22,&#10;    marginRight: 8,&#10;    tintColor: '#888',&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    fontSize: 16,&#10;    color: '#222',&#10;    paddingVertical: 0,&#10;    backgroundColor: 'transparent',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, TextInput, StyleSheet, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function SearchBar({ value, onChangeText, placeholder = '복용하시는 약을 등록해보세요' }: {&#10;  value?: string;&#10;  onChangeText?: (text: string) =&gt; void;&#10;  placeholder?: string;&#10;}) {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Image&#10;        source={{ uri: 'https://img.icons8.com/ios-filled/50/888888/search--v1.png' }}&#10;        style={styles.icon}&#10;        resizeMode=&quot;contain&quot;&#10;      /&gt;&#10;      &lt;TextInput&#10;        style={styles.input}&#10;        placeholder={placeholder}&#10;        placeholderTextColor={Colors.mediumGray}&#10;        value={value}&#10;        onChangeText={onChangeText}&#10;        underlineColorAndroid=&quot;transparent&quot;&#10;        returnKeyType=&quot;search&quot;&#10;        clearButtonMode=&quot;while-editing&quot;&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#F5F6FA',&#10;    borderRadius: 16,&#10;    paddingHorizontal: 14,&#10;    paddingVertical: 10,&#10;    marginVertical: 8,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  icon: {&#10;    width: 22,&#10;    height: 22,&#10;    marginRight: 8,&#10;    tintColor: '#888',&#10;  },&#10;  input: {&#10;    flex: 1,&#10;    fontSize: 16,&#10;    color: '#222',&#10;    paddingVertical: 0,&#10;    backgroundColor: 'transparent',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/SocialLoginButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/SocialLoginButton.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { TouchableOpacity, View, Text, Image, StyleSheet } from 'react-native';&#10;&#10;interface SocialLoginButtonProps {&#10;  type: 'kakao' | 'google';&#10;  onPress: () =&gt; void;&#10;}&#10;&#10;export default function SocialLoginButton({ type, onPress }: SocialLoginButtonProps) {&#10;  if (type === 'kakao') {&#10;    return (&#10;      &lt;TouchableOpacity style={styles.kakaoButton} onPress={onPress}&gt;&#10;        &lt;View style={styles.kakaoIconWrap}&gt;&lt;Text style={styles.kakaoIcon}&gt;TALK&lt;/Text&gt;&lt;/View&gt;&#10;        &lt;Text style={styles.kakaoText}&gt;카카오톡으로 로그인&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    );&#10;  }&#10;  if (type === 'google') {&#10;    return (&#10;      &lt;TouchableOpacity style={styles.googleButton} onPress={onPress}&gt;&#10;        &lt;Image source={{uri: 'https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg'}} style={styles.googleIcon} /&gt;&#10;        &lt;Text style={styles.googleText}&gt;Google로 로그인&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    );&#10;  }&#10;  return null;&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  kakaoButton: {&#10;    width: '100%',&#10;    backgroundColor: '#FEE500',&#10;    borderRadius: 16,&#10;    paddingVertical: 24,&#10;    alignItems: 'center',&#10;    flexDirection: 'row',&#10;    justifyContent: 'center',&#10;    marginBottom: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 1,&#10;  },&#10;  kakaoIconWrap: {&#10;    backgroundColor: '#3C1E1E',&#10;    borderRadius: 12,&#10;    paddingHorizontal: 10,&#10;    paddingVertical: 2,&#10;    marginRight: 10,&#10;  },&#10;  kakaoIcon: {&#10;    color: '#fff',&#10;    fontWeight: 'bold',&#10;    fontSize: 14,&#10;  },&#10;  kakaoText: {&#10;    color: '#3C1E1E',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;  googleButton: {&#10;    width: '100%',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    paddingVertical: 24,&#10;    alignItems: 'center',&#10;    flexDirection: 'row',&#10;    justifyContent: 'center',&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;    marginBottom: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 1,&#10;  },&#10;  googleIcon: {&#10;    width: 24,&#10;    height: 24,&#10;    marginRight: 10,&#10;  },&#10;  googleText: {&#10;    color: '#222',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;});&#10;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { TouchableOpacity, View, Text, Image, StyleSheet } from 'react-native';&#10;&#10;interface SocialLoginButtonProps {&#10;  type: 'kakao' | 'google' | 'guardian' | 'ward';&#10;  onPress: () =&gt; void;&#10;}&#10;&#10;export default function SocialLoginButton({ type, onPress }: SocialLoginButtonProps) {&#10;  if (type === 'kakao') {&#10;    return (&#10;      &lt;TouchableOpacity style={styles.kakaoButton} onPress={onPress}&gt;&#10;        &lt;View style={styles.kakaoIconWrap}&gt;&lt;Text style={styles.kakaoIcon}&gt;TALK&lt;/Text&gt;&lt;/View&gt;&#10;        &lt;Text style={styles.kakaoText}&gt;카카오톡으로 로그인&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    );&#10;  }&#10;  if (type === 'google') {&#10;    return (&#10;      &lt;TouchableOpacity style={styles.googleButton} onPress={onPress}&gt;&#10;        &lt;Image source={{uri: 'https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg'}} style={styles.googleIcon} /&gt;&#10;        &lt;Text style={styles.googleText}&gt;Google로 로그인&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    );&#10;  }&#10;  if (type === 'guardian' || type === 'ward') {&#10;    return (&#10;      &lt;TouchableOpacity&#10;        style={styles.roleButton}&#10;        onPress={onPress}&#10;      &gt;&#10;        &lt;Text style={styles.roleButtonText}&gt;{type === 'guardian' ? '보호자' : '보호 대상자'}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    );&#10;  }&#10;  return null;&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  kakaoButton: {&#10;    width: '100%',&#10;    backgroundColor: '#FEE500',&#10;    borderRadius: 16,&#10;    paddingVertical: 24,&#10;    alignItems: 'center',&#10;    flexDirection: 'row',&#10;    justifyContent: 'center',&#10;    marginBottom: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 1,&#10;  },&#10;  kakaoIconWrap: {&#10;    backgroundColor: '#3C1E1E',&#10;    borderRadius: 12,&#10;    paddingHorizontal: 10,&#10;    paddingVertical: 2,&#10;    marginRight: 10,&#10;  },&#10;  kakaoIcon: {&#10;    color: '#fff',&#10;    fontWeight: 'bold',&#10;    fontSize: 14,&#10;  },&#10;  kakaoText: {&#10;    color: '#3C1E1E',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;  googleButton: {&#10;    width: '100%',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    paddingVertical: 24,&#10;    alignItems: 'center',&#10;    flexDirection: 'row',&#10;    justifyContent: 'center',&#10;    borderWidth: 1,&#10;    borderColor: '#E5E7EB',&#10;    marginBottom: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 1,&#10;  },&#10;  googleIcon: {&#10;    width: 24,&#10;    height: 24,&#10;    marginRight: 10,&#10;  },&#10;  googleText: {&#10;    color: '#222',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;  roleButton: {&#10;    width: '100%',&#10;    backgroundColor: '#007AFF',&#10;    borderRadius: 20,&#10;    paddingVertical: 32,&#10;    alignItems: 'center',&#10;    marginBottom: 32,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 4 },&#10;    shadowOpacity: 0.12,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  roleButtonText: {&#10;    color: '#fff',&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/SocialLoginButtons.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/SocialLoginButtons.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, TouchableOpacity, StyleSheet, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const SocialLoginButton = ({ onPress, logo, text, style, textStyle }) =&gt; (&#10;  &lt;TouchableOpacity onPress={onPress} style={[styles.button, style]} activeOpacity={0.8}&gt;&#10;    &lt;Image source={logo} style={styles.logo} /&gt;&#10;    &lt;Text style={[styles.text, textStyle]}&gt;{text}&lt;/Text&gt;&#10;  &lt;/TouchableOpacity&gt;&#10;);&#10;&#10;const SocialLoginButtons = () =&gt; {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;SocialLoginButton&#10;        onPress={() =&gt; console.log('Kakao Login')}&#10;        // logo={require('@/assets/images/kakao_logo.png')} // Add your logo paths&#10;        text=&quot;카카오로 시작하기&quot;&#10;        style={styles.kakaoButton}&#10;        textStyle={styles.kakaoText}&#10;      /&gt;&#10;      &lt;SocialLoginButton&#10;        onPress={() =&gt; console.log('Naver Login')}&#10;        // logo={require('@/assets/images/naver_logo.png'))}&#10;        text=&quot;네이버로 시작하기&quot;&#10;        style={styles.naverButton}&#10;        textStyle={styles.naverText}&#10;      /&gt;&#10;      &lt;SocialLoginButton&#10;        onPress={() =&gt; console.log('Google Login')}&#10;        // logo={require('@/assets/images/google_logo.png'))}&#10;        text=&quot;구글로 시작하기&quot;&#10;        style={styles.googleButton}&#10;        textStyle={styles.googleText}&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    marginTop: 24,&#10;  },&#10;  button: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    height: 52,&#10;    borderRadius: 12,&#10;    marginBottom: 12,&#10;    paddingHorizontal: 16,&#10;  },&#10;  logo: {&#10;    width: 24,&#10;    height: 24,&#10;    marginRight: 12,&#10;  },&#10;  text: {&#10;    fontSize: 16,&#10;    fontWeight: '500',&#10;  },&#10;  kakaoButton: {&#10;    backgroundColor: '#FEE500',&#10;  },&#10;  kakaoText: {&#10;    color: '#191919',&#10;  },&#10;  naverButton: {&#10;    backgroundColor: '#03C75A',&#10;  },&#10;  naverText: {&#10;    color: '#FFFFFF',&#10;  },&#10;  googleButton: {&#10;    backgroundColor: '#FFFFFF',&#10;    borderWidth: 1,&#10;    borderColor: Colors.lightGray,&#10;  },&#10;  googleText: {&#10;    color: '#1F1F1F',&#10;  },&#10;});&#10;&#10;export default SocialLoginButtons;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const SocialLoginButton = ({ onPress, text, style, textStyle }) =&gt; (&#10;  &lt;TouchableOpacity onPress={onPress} style={[styles.button, style]} activeOpacity={0.8}&gt;&#10;    &lt;Text style={[styles.text, textStyle]}&gt;{text}&lt;/Text&gt;&#10;  &lt;/TouchableOpacity&gt;&#10;);&#10;&#10;const SocialLoginButtons = () =&gt; {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;SocialLoginButton&#10;        onPress={() =&gt; console.log('Kakao Login')}&#10;        text=&quot;카카오로 시작하기&quot;&#10;        style={styles.kakaoButton}&#10;        textStyle={styles.kakaoText}&#10;      /&gt;&#10;      &lt;SocialLoginButton&#10;        onPress={() =&gt; console.log('Naver Login')}&#10;        text=&quot;네이버로 시작하기&quot;&#10;        style={styles.naverButton}&#10;        textStyle={styles.naverText}&#10;      /&gt;&#10;      &lt;SocialLoginButton&#10;        onPress={() =&gt; console.log('Google Login')}&#10;        text=&quot;구글로 시작하기&quot;&#10;        style={styles.googleButton}&#10;        textStyle={styles.googleText}&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    marginTop: 24,&#10;  },&#10;  button: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    height: 52,&#10;    borderRadius: 12,&#10;    marginBottom: 12,&#10;    paddingHorizontal: 16,&#10;  },&#10;  text: {&#10;    fontSize: 16,&#10;    fontWeight: '500',&#10;  },&#10;  kakaoButton: {&#10;    backgroundColor: '#FEE500',&#10;  },&#10;  kakaoText: {&#10;    color: '#191919',&#10;  },&#10;  naverButton: {&#10;    backgroundColor: '#03C75A',&#10;  },&#10;  naverText: {&#10;    color: '#FFFFFF',&#10;  },&#10;  googleButton: {&#10;    backgroundColor: '#FFFFFF',&#10;    borderWidth: 1,&#10;    borderColor: Colors.lightGray,&#10;  },&#10;  googleText: {&#10;    color: '#1F1F1F',&#10;  },&#10;});&#10;&#10;export default SocialLoginButtons;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/constants/Colors.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/constants/Colors.ts" />
              <option name="originalContent" value="const tintColorLight = '#0a7ea4';&#10;&#10;export const Colors = {&#10;  text: '#11181C',&#10;  background: '#fff',&#10;  tint: tintColorLight,&#10;  icon: '#687076',&#10;  tabIconDefault: '#687076',&#10;  tabIconSelected: tintColorLight,&#10;  primary: '#007aff', // Blue&#10;  primaryLight: '#E6F2FF', // Light blue background&#10;  secondary: '#32cd32', // Green&#10;  secondaryLight: '#E6F9E6', // Light green background&#10;  warning: '#ffa500', // Orange&#10;  danger: '#ff3b30', // Red&#10;  dangerLight: '#FFE6E6', // Light red background&#10;  lightGray: '#f5f5f5',&#10;  mediumGray: '#999',&#10;  darkGray: '#333',&#10;  border: '#e5e5e5',&#10;  // 네비게이션 바 관련 색상 추가&#10;  navbarBackground: '#fff',&#10;  navbarTabInactive: '#999',&#10;  navbarTabActive: '#007aff',&#10;  navbarTabActiveBg: 'rgba(37, 99, 235, 0.12)',&#10;  navbarCenterButton: '#007AFF',&#10;  navbarCenterButtonActive: '#0051D0',&#10;  navbarShadow: '#000',&#10;  textSecondary: '#6B7280',&#10;  card: '#FFFFFF',&#10;  shadow: 'rgba(0, 0, 0, 0.1)',&#10;};&#10;&#10;export const CalendarStatus = {&#10;  NONE: 'none', // 복용 안함&#10;  PARTIAL: 'partial', // 일부 복용&#10;  ALL: 'all', // 모두 복용&#10;};&#10;&#10;export const CalendarStatusColors = {&#10;  none: '#E0E1DD', // 연회색(빼먹은 날)&#10;  partial: '#FFB703', // 옐로우(일부 복용)&#10;  all: '#40916C', // 초록(모두 복용)&#10;};&#10;&#10;// 예시: 날짜별 복용 상태 데이터&#10;export const CalendarPillData = {&#10;  '2024-08-05': { status: CalendarStatus.all },&#10;  '2024-08-06': { status: CalendarStatus.partial },&#10;  '2024-08-07': { status: CalendarStatus.none },&#10;  // ...추가 데이터&#10;};&#10;" />
              <option name="updatedContent" value="const tintColorLight = '#0a7ea4';&#10;&#10;export const Colors = {&#10;  text: '#11181C',&#10;  background: '#fff',&#10;  tint: tintColorLight,&#10;  icon: '#687076',&#10;  tabIconDefault: '#687076',&#10;  tabIconSelected: tintColorLight,&#10;  primary: '#007aff', // Blue&#10;  primaryLight: '#E6F2FF', // Light blue background&#10;  secondary: '#32cd32', // Green&#10;  secondaryLight: '#E6F9E6', // Light green background&#10;  warning: '#ffa500', // Orange&#10;  danger: '#ff3b30', // Red&#10;  dangerLight: '#FFE6E6', // Light red background&#10;  lightGray: '#f5f5f5',&#10;  mediumGray: '#999',&#10;  darkGray: '#333',&#10;  border: '#e5e5e5',&#10;  // 네비게이션 바 관련 색상 추가&#10;  navbarBackground: '#fff',&#10;  navbarTabInactive: '#999',&#10;  navbarTabActive: '#007aff',&#10;  navbarTabActiveBg: 'rgba(37, 99, 235, 0.12)',&#10;  navbarCenterButton: '#007AFF',&#10;  navbarCenterButtonActive: '#0051D0',&#10;  navbarShadow: '#000',&#10;  textSecondary: '#6B7280',&#10;  card: '#FFFFFF',&#10;  shadow: 'rgba(0, 0, 0, 0.1)',&#10;};&#10;&#10;export const CalendarStatus = {&#10;  NONE: 'none', // 복용 안함&#10;  PARTIAL: 'partial', // 일부 복용&#10;  ALL: 'all', // 모두 복용&#10;};&#10;&#10;export const CalendarStatusColors = {&#10;  none: '#E0E1DD', // 연회색(빼먹은 날)&#10;  partial: '#FFB703', // 옐로우(일부 복용)&#10;  all: '#40916C', // 초록(모두 복용)&#10;};&#10;&#10;// 예시: 날짜별 복용 상태 데이터&#10;export const CalendarPillData = {&#10;  '2024-08-05': { status: CalendarStatus.all },&#10;  '2024-08-06': { status: CalendarStatus.partial },&#10;  '2024-08-07': { status: CalendarStatus.none },&#10;  // ...추가 데이터&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/constants/FamilyData.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/constants/FamilyData.ts" />
              <option name="originalContent" value="export interface MedicationInfo {&#10;  id: string;&#10;  medicationName: string;&#10;  time: string;&#10;  dosage: string;&#10;  enabled: boolean;&#10;  frequency: 'daily' | 'weekly' | 'as-needed';&#10;  notes?: string;&#10;  icon: string;&#10;}&#10;&#10;export interface FamilyMember {&#10;  id: string;&#10;  name: string;&#10;  active: boolean;&#10;  phone?: string;&#10;  relation?: string;&#10;  relation?: string;&#10;  relation?: string;&#10;    relation: '어머니',&#10;    relation: '어머니',&#10;  relation?: string;&#10;    relation: '어머니',&#10;  relation?: string;&#10;  relation?: string;&#10;    relation: '어머니',&#10;    relation: '어머니',&#10;  relation?: string;&#10;    relation: '어머니',&#10;  relation?: string;&#10;  relation?: string;&#10;    relation: '어머니',&#10;    relation: '어머니',&#10;  relation?: string;&#10;  relation?: string;&#10;  relation?: string;&#10;  relation?: string;&#10;  relation?: string;&#10;  relation?: string;&#10;  relation?: string;&#10;  email?: string;&#10;    relation: '어머니',&#10;  medications?: MedicationInfo[];&#10;}&#10;    relation: '어머니',&#10;    relation: '어머니',&#10;&#10;    relation: '어머니',&#10;    relation: '배우자',&#10;    relation: '배우자',&#10;// 가족 구성원 데이터&#10;    relation: '배우자',&#10;    relation: '배우자',&#10;export const FAMILY_DATA: FamilyMember[] = [&#10;  { id: 'invite', type: 'invite' } as any, // 초대하기 특수 항목&#10;  {&#10;    relation: '어머니',&#10;    id: '1',&#10;    relation: '어머니',&#10;    name: '오말숙',&#10;    active: true,&#10;    relation: '배우자',&#10;    relation: '배우자',&#10;    relation: '아들',&#10;    relation: '어머니',&#10;    relation: '아들',&#10;    phone: '010-1234-5678',&#10;    relation: '배우자',&#10;    relation: '배우자',&#10;    relation: '어머니',&#10;    relation: '아들',&#10;    relation: '딸',&#10;    email: 'omalsook@example.com',&#10;    relation: '아들',&#10;    medications: [&#10;    relation: '딸',&#10;      {&#10;        id: '1-1',&#10;        medicationName: '혈압약',&#10;        time: '08:00',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;    relation: '아들',&#10;    relation: '딸',&#10;        notes: '식후 복용',&#10;    relation: '딸',&#10;    relation: '아들',&#10;        icon: 'medical-services'&#10;      },&#10;      {&#10;        id: '1-2',&#10;        medicationName: '당뇨약',&#10;        time: '12:00',&#10;        dosage: '2정',&#10;    relation: '아들',&#10;        enabled: true,&#10;    relation: '아들',&#10;    relation: '딸',&#10;    relation: '배우자',&#10;    relation: '배우자',&#10;    relation: '딸',&#10;        frequency: 'daily',&#10;        notes: '식전 30분',&#10;        icon: 'medication'&#10;    relation: '배우자',&#10;    relation: '배우자',&#10;      },&#10;      {&#10;        id: '1-3',&#10;        medicationName: '종합비타민',&#10;        time: '09:00',&#10;    relation: '딸',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;    relation: '딸',&#10;        notes: '아침 식사 후',&#10;        icon: 'local-pharmacy'&#10;    relation: '배우자',&#10;    relation: '배우자',&#10;      }&#10;    ]&#10;  },&#10;    relation: '아들',&#10;  {&#10;    relation: '아들',&#10;    id: '2',&#10;    name: '남지윤',&#10;    relation: '배우자',&#10;    active: false,&#10;    phone: '010-2345-6789',&#10;    relation: '배우자',&#10;    email: 'namjiyoon@example.com',&#10;    medications: [&#10;    relation: '아들',&#10;      {&#10;    relation: '아들',&#10;    relation: '딸',&#10;        id: '2-1',&#10;        medicationName: '철분제',&#10;    relation: '딸',&#10;        time: '19:00',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'health-and-safety'&#10;      },&#10;      {&#10;        id: '2-2',&#10;        medicationName: '비타민 C',&#10;    relation: '딸',&#10;        time: '08:30',&#10;    relation: '아들',&#10;        dosage: '1정',&#10;    relation: '딸',&#10;    relation: '아들',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '아침 식사 후',&#10;        icon: 'local-pharmacy'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '3',&#10;    relation: '아들',&#10;    name: '홍준우',&#10;    active: false,&#10;    phone: '010-3456-7890',&#10;    relation: '아들',&#10;    relation: '딸',&#10;    email: 'hongjunwoo@example.com',&#10;    medications: [&#10;      {&#10;    relation: '딸',&#10;        id: '3-1',&#10;        medicationName: '비타민 D',&#10;        time: '20:00',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'health-and-safety'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    relation: '딸',&#10;    id: '4',&#10;    name: '이수아',&#10;    active: false,&#10;    phone: '010-4567-8901',&#10;    relation: '딸',&#10;    email: 'isooa@example.com',&#10;    medications: [&#10;      {&#10;        id: '4-1',&#10;        medicationName: '오메가3',&#10;        time: '21:00',&#10;        dosage: '2정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'local-pharmacy'&#10;      },&#10;      {&#10;        id: '4-2',&#10;        medicationName: '프로바이오틱스',&#10;        time: '07:30',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '아침 공복',&#10;        icon: 'health-and-safety'&#10;      }&#10;    ]&#10;  },&#10;];&#10;&#10;// 특정 가족 구성원 조회 함수&#10;export const getFamilyMemberById = (id: string): FamilyMember | undefined =&gt; {&#10;  return FAMILY_DATA.find(member =&gt; member.id === id &amp;&amp; member.id !== 'invite');&#10;};&#10;&#10;// 초대하기 제외한 실제 가족 구성원만 반환&#10;export const getFamilyMembers = (): FamilyMember[] =&gt; {&#10;  return FAMILY_DATA.filter(member =&gt; member.id !== 'invite');&#10;};&#10;&#10;// 특정 가족 구성원의 약물 정보 조회&#10;export const getMedicationsByMemberId = (memberId: string): MedicationInfo[] =&gt; {&#10;  const member = getFamilyMemberById(memberId);&#10;  return member?.medications || [];&#10;};&#10;&#10;// 모든 가족의 활성화된 약물 알림 수 조회&#10;export const getActiveMedicationAlarmsCount = (): number =&gt; {&#10;  return getFamilyMembers().reduce((count, member) =&gt; {&#10;    const activeMedications = member.medications?.filter(med =&gt; med.enabled) || [];&#10;    return count + activeMedications.length;&#10;  }, 0);&#10;};&#10;" />
              <option name="updatedContent" value="export interface MedicationInfo {&#10;  id: string;&#10;  medicationName: string;&#10;  time: string;&#10;  dosage: string;&#10;  enabled: boolean;&#10;  frequency: 'daily' | 'weekly' | 'as-needed';&#10;  notes?: string;&#10;  icon: string;&#10;}&#10;&#10;export interface FamilyMember {&#10;  id: string;&#10;  name: string;&#10;  active: boolean;&#10;  phone?: string;&#10;  email?: string;&#10;  medications?: MedicationInfo[];&#10;}&#10;&#10;// 가족 구성원 데이터&#10;export const FAMILY_DATA: FamilyMember[] = [&#10;  { id: 'invite', type: 'invite' } as any, // 초대하기 특수 항목&#10;  {&#10;    id: '1',&#10;    name: '오말숙',&#10;    active: true,&#10;    phone: '010-1234-5678',&#10;    email: 'omalsook@example.com',&#10;    medications: [&#10;      {&#10;        id: '1-1',&#10;        medicationName: '혈압약',&#10;        time: '08:00',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '식후 복용',&#10;        icon: 'medical-services'&#10;      },&#10;      {&#10;        id: '1-2',&#10;        medicationName: '당뇨약',&#10;        time: '12:00',&#10;        dosage: '2정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '식전 30분',&#10;        icon: 'medication'&#10;      },&#10;      {&#10;        id: '1-3',&#10;        medicationName: '종합비타민',&#10;        time: '09:00',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '아침 식사 후',&#10;        icon: 'local-pharmacy'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '2',&#10;    name: '남지윤',&#10;    active: false,&#10;    phone: '010-2345-6789',&#10;    email: 'namjiyoon@example.com',&#10;    medications: [&#10;      {&#10;        id: '2-1',&#10;        medicationName: '철분제',&#10;        time: '19:00',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'health-and-safety'&#10;      },&#10;      {&#10;        id: '2-2',&#10;        medicationName: '비타민 C',&#10;        time: '08:30',&#10;        dosage: '1정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '아침 식사 후',&#10;        icon: 'local-pharmacy'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '3',&#10;    name: '홍준우',&#10;    active: false,&#10;    phone: '010-3456-7890',&#10;    email: 'hongjunwoo@example.com',&#10;    medications: [&#10;      {&#10;        id: '3-1',&#10;        medicationName: '비타민 D',&#10;        time: '20:00',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'health-and-safety'&#10;      }&#10;    ]&#10;  },&#10;  {&#10;    id: '4',&#10;    name: '이수아',&#10;    active: false,&#10;    phone: '010-4567-8901',&#10;    email: 'isooa@example.com',&#10;    medications: [&#10;      {&#10;        id: '4-1',&#10;        medicationName: '오메가3',&#10;        time: '21:00',&#10;        dosage: '2정',&#10;        enabled: true,&#10;        frequency: 'daily',&#10;        notes: '저녁 식사 후',&#10;        icon: 'local-pharmacy'&#10;      },&#10;      {&#10;        id: '4-2',&#10;        medicationName: '프로바이오틱스',&#10;        time: '07:30',&#10;        dosage: '1정',&#10;        enabled: false,&#10;        frequency: 'daily',&#10;        notes: '아침 공복',&#10;        icon: 'health-and-safety'&#10;      }&#10;    ]&#10;  },&#10;];&#10;&#10;// 특정 가족 구성원 조회 함수&#10;export const getFamilyMemberById = (id: string): FamilyMember | undefined =&gt; {&#10;  return FAMILY_DATA.find(member =&gt; member.id === id &amp;&amp; member.id !== 'invite');&#10;};&#10;&#10;// 초대하기 제외한 실제 가족 구성원만 반환&#10;export const getFamilyMembers = (): FamilyMember[] =&gt; {&#10;  return FAMILY_DATA.filter(member =&gt; member.id !== 'invite');&#10;};&#10;&#10;// 특정 가족 구성원의 약물 정보 조회&#10;export const getMedicationsByMemberId = (memberId: string): MedicationInfo[] =&gt; {&#10;  const member = getFamilyMemberById(memberId);&#10;  return member?.medications || [];&#10;};&#10;&#10;// 모든 가족의 활성화된 약물 알림 수 조회&#10;export const getActiveMedicationAlarmsCount = (): number =&gt; {&#10;  return getFamilyMembers().reduce((count, member) =&gt; {&#10;    const activeMedications = member.medications?.filter(med =&gt; med.enabled) || [];&#10;    return count + activeMedications.length;&#10;  }, 0);&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/contexts/FamilyDataContext.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/contexts/FamilyDataContext.tsx" />
              <option name="originalContent" value="import React, { createContext, useContext, useState } from 'react';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;&#10;// 타입 정의&#10;interface MedicationInfo {&#10;  id: string;&#10;  medicationName: string;&#10;  enabled: boolean;&#10;  [key: string]: any;&#10;}&#10;interface FamilyMember {&#10;  id: string;&#10;  name: string;&#10;  medications?: MedicationInfo[];&#10;  [key: string]: any;&#10;}&#10;interface FamilyDataContextType {&#10;  familyData: FamilyMember[];&#10;  updateMedicationEnabled: (userId: string, medicationName: string, enabled: boolean) =&gt; void;&#10;}&#10;&#10;const defaultContext: FamilyDataContextType = {&#10;  familyData: FAMILY_DATA,&#10;" />
              <option name="updatedContent" value="import React, { createContext, useContext, useState } from 'react';&#10;import { FAMILY_DATA } from '@/constants/FamilyData';&#10;&#10;// 타입 정의&#10;interface MedicationInfo {&#10;  id: string;&#10;  medicationName: string;&#10;  enabled: boolean;&#10;  [key: string]: any;&#10;}&#10;interface FamilyMember {&#10;  id: string;&#10;  name: string;&#10;  medications?: MedicationInfo[];&#10;  [key: string]: any;&#10;}&#10;interface FamilyDataContextType {&#10;  familyData: FamilyMember[];&#10;  updateMedicationEnabled: (userId: string, medicationName: string, enabled: boolean) =&gt; void;&#10;}&#10;&#10;const defaultContext: FamilyDataContextType = {&#10;  familyData: FAMILY_DATA,&#10;  updateMedicationEnabled: () =&gt; {},&#10;};&#10;&#10;const FamilyDataContext = createContext&lt;FamilyDataContextType&gt;(defaultContext);&#10;&#10;export const FamilyDataProvider = ({ children }: { children: React.ReactNode }) =&gt; {&#10;  const [familyData, setFamilyData] = useState(FAMILY_DATA);&#10;&#10;  // 약물 알림 설정(스위치) 변경 함수&#10;  const updateMedicationEnabled = (userId: string, medicationName: string, enabled: boolean) =&gt; {&#10;    setFamilyData(prev =&gt; prev.map(user =&gt; {&#10;      if (user.id !== userId) return user;&#10;      return {&#10;        ...user,&#10;        medications: user.medications?.map(med =&gt;&#10;          med.medicationName === medicationName ? { ...med, enabled } : med&#10;        )&#10;      };&#10;    }));&#10;  };&#10;&#10;  return (&#10;    &lt;FamilyDataContext.Provider value={{ familyData, updateMedicationEnabled }}&gt;&#10;      {children}&#10;    &lt;/FamilyDataContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export const useFamilyData = () =&gt; useContext(FamilyDataContext);&#10;export { FamilyDataContextType };" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>