<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/_layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/_layout.tsx" />
              <option name="originalContent" value="import { Stack } from &quot;expo-router&quot;;&#10;&#10;export default function RootLayout() {&#10;  return (&#10;    &lt;Stack&#10;      screenOptions={{&#10;        animation: &quot;none&quot;, // iOS 슬라이드 애니메이션 비활성화&#10;        animationDuration: 0, // 애니메이션 지속시간을 0으로 설정&#10;      }}&#10;    /&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { Stack } from &quot;expo-router&quot;;&#10;&#10;export default function RootLayout() {&#10;  return (&#10;    &lt;Stack&#10;      screenOptions={{&#10;        headerShown: false, // 상단 헤더 완전히 숨김&#10;        animation: &quot;none&quot;, // 애니메이션 없음&#10;        presentation: &quot;card&quot;, // 카드 스타일로 설정&#10;        animationDuration: 0, // 애니메이션 지속시간 0&#10;        gestureEnabled: false, // 스와이프 제스처 비활성화&#10;      }}&#10;    /&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/chat.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/chat.tsx" />
              <option name="updatedContent" value="import React, { useState, useRef, useEffect } from 'react';&#10;import { &#10;  View, &#10;  Text, &#10;  StyleSheet, &#10;  TextInput, &#10;  TouchableOpacity, &#10;  ScrollView, &#10;  KeyboardAvoidingView, &#10;  Platform,&#10;  Animated,&#10;  Dimensions&#10;} from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;&#10;const { height: screenHeight } = Dimensions.get('window');&#10;&#10;interface Message {&#10;  id: string;&#10;  text: string;&#10;  isUser: boolean;&#10;  timestamp: Date;&#10;}&#10;&#10;export default function ChatScreen() {&#10;  const [messages, setMessages] = useState&lt;Message[]&gt;([&#10;    {&#10;      id: '1',&#10;      text: '안녕하세요! 저는 PillLink AI입니다 \n약물 복용, 부작용, 상호작용에 대해 궁금한 점이 있으시면 언제든 물어보세요!',&#10;      isUser: false,&#10;      timestamp: new Date(),&#10;    }&#10;  ]);&#10;  const [inputText, setInputText] = useState('');&#10;  const [isTyping, setIsTyping] = useState(false);&#10;  const scrollViewRef = useRef&lt;ScrollView&gt;(null);&#10;  const fadeAnim = useRef(new Animated.Value(0)).current;&#10;  const scaleAnim = useRef(new Animated.Value(0.8)).current;&#10;&#10;  useEffect(() =&gt; {&#10;    // 초기 애니메이션&#10;    Animated.parallel([&#10;      Animated.timing(fadeAnim, {&#10;        toValue: 1,&#10;        duration: 800,&#10;        useNativeDriver: true,&#10;      }),&#10;      Animated.spring(scaleAnim, {&#10;        toValue: 1,&#10;        tension: 100,&#10;        friction: 8,&#10;        useNativeDriver: true,&#10;      }),&#10;    ]).start();&#10;  }, []);&#10;&#10;  const quickQuestions = [&#10;    ' 약물 상호작용이 궁금해요',&#10;    '⚠️ 부작용 증상을 확인하고 싶어요',&#10;    '⏰ 복용 시간을 조정하고 싶어요',&#10;    '️ 음식과 함께 먹어도 되나요?',&#10;  ];&#10;&#10;  const sendMessage = (text: string) =&gt; {&#10;    if (!text.trim()) return;&#10;&#10;    const userMessage: Message = {&#10;      id: Date.now().toString(),&#10;      text: text.trim(),&#10;      isUser: true,&#10;      timestamp: new Date(),&#10;    };&#10;&#10;    setMessages(prev =&gt; [...prev, userMessage]);&#10;    setInputText('');&#10;    setIsTyping(true);&#10;&#10;    // AI 응답 시뮬레이션&#10;    setTimeout(() =&gt; {&#10;      const aiResponse: Message = {&#10;        id: (Date.now() + 1).toString(),&#10;        text: getAIResponse(text),&#10;        isUser: false,&#10;        timestamp: new Date(),&#10;      };&#10;      setMessages(prev =&gt; [...prev, aiResponse]);&#10;      setIsTyping(false);&#10;    }, 1500);&#10;&#10;    // 스크롤을 맨 아래로&#10;    setTimeout(() =&gt; {&#10;      scrollViewRef.current?.scrollToEnd({ animated: true });&#10;    }, 100);&#10;  };&#10;&#10;  const getAIResponse = (userText: string): string =&gt; {&#10;    const text = userText.toLowerCase();&#10;    &#10;    if (text.includes('상호작용') || text.includes('같이') || text.includes('함께')) {&#10;      return '약물 상호작용에 대해 문의해주셨네요! \n\n현재 복용 중인 약물들을 알려주시면 더 정확한 상호작용 정보를 제공해드릴 수 있습니다.\n\n⚠️ 중요: 이 정보는 참고용이며, 정확한 진단과 처방은 의사나 약사와 상담하시기 바랍니다.';&#10;    }&#10;    &#10;    if (text.includes('부작용') || text.includes('증상')) {&#10;      return '부작용 증상에 대해 궁금하시군요! \n\n어떤 약물의 부작용이 궁금하신가요? 구체적인 약물명을 알려주시면 해당 약물의 주요 부작용과 대처법을 안내해드리겠습니다.\n\n 심각한 부작용이 의심되시면 즉시 의료진과 상담하세요.';&#10;    }&#10;    &#10;    if (text.includes('시간') || text.includes('언제')) {&#10;      return '복용 시간에 대해 문의해주셨네요! ⏰\n\n대부분의 약물은 일정한 시간 간격으로 복용하는 것이 중요합니다.\n\n• 하루 1회: 매일 같은 시간\n• 하루 2회: 12시간 간격\n• 하루 3회: 8시간 간격\n\n구체적인 약물명을 알려주시면 더 정확한 복용법을 안내해드릴게요!';&#10;    }&#10;    &#10;    if (text.includes('음식') || text.includes('식사')) {&#10;      return '음식과의 복용에 대해 궁금하시군요! ️\n\n약물마다 음식과의 상호작용이 다릅니다:\n\n• 식전 복용: 위산 분비 전, 흡수율 높임\n• 식후 복용: 위장 보호, 부작용 감소\n• 공복 복용: 빠른 흡수 필요시\n\n어떤 약물에 대해 궁금하신가요?';&#10;    }&#10;    &#10;    return '질문해주셔서 감사합니다! \n\n더 정확한 답변을 위해 구체적인 약물명이나 상황을 알려주시면 좋겠어요.\n\n약물 상호작용, 부작용, 복용법 등 무엇이든 물어보세요!\n\n 언제나 전문의와의 상담을 우선으로 하시기 바랍니다.';&#10;  };&#10;&#10;  const formatTime = (date: Date) =&gt; {&#10;    return date.toLocaleTimeString('ko-KR', { &#10;      hour: '2-digit', &#10;      minute: '2-digit',&#10;      hour12: false &#10;    });&#10;  };&#10;&#10;  return (&#10;    &lt;KeyboardAvoidingView &#10;      style={styles.container} &#10;      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}&#10;      keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 25}&#10;    &gt;&#10;      {/* Header */}&#10;      &lt;Animated.View &#10;        style={[&#10;          styles.header,&#10;          {&#10;            opacity: fadeAnim,&#10;            transform: [{ scale: scaleAnim }],&#10;          }&#10;        ]}&#10;      &gt;&#10;        &lt;View style={styles.aiAvatar}&gt;&#10;          &lt;Text style={styles.aiAvatarText}&gt;&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View style={styles.headerInfo}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;PillLink AI&lt;/Text&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;약물 상담 전문 AI • 온라인&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;      &lt;/Animated.View&gt;&#10;&#10;      {/* Messages */}&#10;      &lt;ScrollView &#10;        ref={scrollViewRef}&#10;        style={styles.messagesContainer}&#10;        contentContainerStyle={styles.messagesContent}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {messages.map((message) =&gt; (&#10;          &lt;Animated.View&#10;            key={message.id}&#10;            style={[&#10;              styles.messageWrapper,&#10;              message.isUser ? styles.userMessageWrapper : styles.aiMessageWrapper,&#10;            ]}&#10;          &gt;&#10;            &lt;View&#10;              style={[&#10;                styles.messageBubble,&#10;                message.isUser ? styles.userMessage : styles.aiMessage,&#10;              ]}&#10;            &gt;&#10;              &lt;Text style={[&#10;                styles.messageText,&#10;                message.isUser ? styles.userMessageText : styles.aiMessageText,&#10;              ]}&gt;&#10;                {message.text}&#10;              &lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;Text style={[&#10;              styles.messageTime,&#10;              message.isUser ? styles.userMessageTime : styles.aiMessageTime,&#10;            ]}&gt;&#10;              {formatTime(message.timestamp)}&#10;            &lt;/Text&gt;&#10;          &lt;/Animated.View&gt;&#10;        ))}&#10;        &#10;        {isTyping &amp;&amp; (&#10;          &lt;View style={[styles.messageWrapper, styles.aiMessageWrapper]}&gt;&#10;            &lt;View style={[styles.messageBubble, styles.aiMessage, styles.typingMessage]}&gt;&#10;              &lt;View style={styles.typingIndicator}&gt;&#10;                &lt;View style={styles.typingDot} /&gt;&#10;                &lt;View style={styles.typingDot} /&gt;&#10;                &lt;View style={styles.typingDot} /&gt;&#10;              &lt;/View&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        )}&#10;      &lt;/ScrollView&gt;&#10;&#10;      {/* Quick Questions */}&#10;      {messages.length === 1 &amp;&amp; (&#10;        &lt;Animated.View &#10;          style={[&#10;            styles.quickQuestionsContainer,&#10;            {&#10;              opacity: fadeAnim,&#10;              transform: [{ scale: scaleAnim }],&#10;            }&#10;          ]}&#10;        &gt;&#10;          &lt;Text style={styles.quickQuestionsTitle}&gt;자주 묻는 질문&lt;/Text&gt;&#10;          {quickQuestions.map((question, index) =&gt; (&#10;            &lt;TouchableOpacity&#10;              key={index}&#10;              style={styles.quickQuestionButton}&#10;              onPress={() =&gt; sendMessage(question.replace(/^[⚠️⏰️]\s/, ''))}&#10;              activeOpacity={0.7}&#10;            &gt;&#10;              &lt;Text style={styles.quickQuestionText}&gt;{question}&lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          ))}&#10;        &lt;/Animated.View&gt;&#10;      )}&#10;&#10;      {/* Input Area */}&#10;      &lt;Animated.View &#10;        style={[&#10;          styles.inputContainer,&#10;          {&#10;            opacity: fadeAnim,&#10;          }&#10;        ]}&#10;      &gt;&#10;        &lt;View style={styles.inputWrapper}&gt;&#10;          &lt;TextInput&#10;            style={styles.textInput}&#10;            value={inputText}&#10;            onChangeText={setInputText}&#10;            placeholder=&quot;약물에 대해 궁금한 점을 물어보세요...&quot;&#10;            placeholderTextColor={Colors.light.mediumGray}&#10;            multiline&#10;            maxLength={500}&#10;          /&gt;&#10;          &lt;TouchableOpacity&#10;            style={[&#10;              styles.sendButton,&#10;              { backgroundColor: inputText.trim() ? Colors.light.primary : Colors.light.lightGray }&#10;            ]}&#10;            onPress={() =&gt; sendMessage(inputText)}&#10;            disabled={!inputText.trim()}&#10;            activeOpacity={0.7}&#10;          &gt;&#10;            &lt;Text style={[&#10;              styles.sendButtonText,&#10;              { color: inputText.trim() ? '#fff' : Colors.light.mediumGray }&#10;            ]}&gt;&#10;              전송&#10;            &lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        &lt;/View&gt;&#10;      &lt;/Animated.View&gt;&#10;&#10;      &lt;BottomNavigationBar activeIndex={3} /&gt;&#10;    &lt;/KeyboardAvoidingView&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    padding: 20,&#10;    paddingTop: 60,&#10;    backgroundColor: '#fff',&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.light.border,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 4,&#10;  },&#10;  aiAvatar: {&#10;    width: 50,&#10;    height: 50,&#10;    borderRadius: 25,&#10;    backgroundColor: Colors.light.primaryLight,&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;    marginRight: 15,&#10;  },&#10;  aiAvatarText: {&#10;    fontSize: 24,&#10;  },&#10;  headerInfo: {&#10;    flex: 1,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 2,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.secondary,&#10;    fontWeight: '500',&#10;  },&#10;  messagesContainer: {&#10;    flex: 1,&#10;  },&#10;  messagesContent: {&#10;    padding: 16,&#10;    paddingBottom: 20,&#10;  },&#10;  messageWrapper: {&#10;    marginBottom: 16,&#10;  },&#10;  userMessageWrapper: {&#10;    alignItems: 'flex-end',&#10;  },&#10;  aiMessageWrapper: {&#10;    alignItems: 'flex-start',&#10;  },&#10;  messageBubble: {&#10;    maxWidth: '80%',&#10;    padding: 16,&#10;    borderRadius: 20,&#10;    marginBottom: 4,&#10;  },&#10;  userMessage: {&#10;    backgroundColor: Colors.light.primary,&#10;    borderBottomRightRadius: 6,&#10;  },&#10;  aiMessage: {&#10;    backgroundColor: '#fff',&#10;    borderBottomLeftRadius: 6,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 4,&#10;    elevation: 2,&#10;  },&#10;  messageText: {&#10;    fontSize: 16,&#10;    lineHeight: 22,&#10;  },&#10;  userMessageText: {&#10;    color: '#fff',&#10;  },&#10;  aiMessageText: {&#10;    color: Colors.light.text,&#10;  },&#10;  messageTime: {&#10;    fontSize: 12,&#10;    opacity: 0.6,&#10;  },&#10;  userMessageTime: {&#10;    color: Colors.light.text,&#10;    textAlign: 'right',&#10;  },&#10;  aiMessageTime: {&#10;    color: Colors.light.mediumGray,&#10;    textAlign: 'left',&#10;  },&#10;  typingMessage: {&#10;    paddingVertical: 12,&#10;  },&#10;  typingIndicator: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    gap: 4,&#10;  },&#10;  typingDot: {&#10;    width: 8,&#10;    height: 8,&#10;    borderRadius: 4,&#10;    backgroundColor: Colors.light.mediumGray,&#10;    opacity: 0.4,&#10;  },&#10;  quickQuestionsContainer: {&#10;    padding: 16,&#10;    backgroundColor: '#fff',&#10;    marginHorizontal: 16,&#10;    marginBottom: 16,&#10;    borderRadius: 16,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 8,&#10;    elevation: 4,&#10;  },&#10;  quickQuestionsTitle: {&#10;    fontSize: 16,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 12,&#10;  },&#10;  quickQuestionButton: {&#10;    backgroundColor: Colors.light.primaryLight,&#10;    padding: 12,&#10;    borderRadius: 12,&#10;    marginBottom: 8,&#10;  },&#10;  quickQuestionText: {&#10;    fontSize: 14,&#10;    color: Colors.light.primary,&#10;    fontWeight: '500',&#10;  },&#10;  inputContainer: {&#10;    backgroundColor: '#fff',&#10;    borderTopWidth: 1,&#10;    borderTopColor: Colors.light.border,&#10;    paddingBottom: 100, // BottomNavigationBar 공간&#10;  },&#10;  inputWrapper: {&#10;    flexDirection: 'row',&#10;    alignItems: 'flex-end',&#10;    padding: 16,&#10;    gap: 12,&#10;  },&#10;  textInput: {&#10;    flex: 1,&#10;    backgroundColor: Colors.light.background,&#10;    borderRadius: 20,&#10;    paddingHorizontal: 16,&#10;    paddingVertical: 12,&#10;    fontSize: 16,&#10;    maxHeight: 100,&#10;    borderWidth: 1,&#10;    borderColor: Colors.light.border,&#10;  },&#10;  sendButton: {&#10;    paddingHorizontal: 20,&#10;    paddingVertical: 12,&#10;    borderRadius: 20,&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;  },&#10;  sendButtonText: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/index.tsx" />
              <option name="originalContent" value="import { Text, View, ScrollView, Image, StyleSheet } from &quot;react-native&quot;;&#10;import InteractionRiskGroups from &quot;../components/InteractionRiskGroups&quot;;&#10;import CircularGauge from &quot;../components/CircularGauge&quot;;&#10;import CalendarComponent from &quot;../components/CalendarComponent&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import BottomNavigationBar from &quot;../components/BottomNavigationBar&quot;;&#10;import SearchBar from '../components/SearchBar';&#10;&#10;export default function Index() {&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.light.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header with Status Bar */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;PillLink&lt;/Text&gt;&#10;          &lt;View style={styles.headerIcons}&gt;&#10;            {/* 알림, 설정 아이콘 등 추가 가능 */}&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Search Bar */}&#10;        &lt;SearchBar /&gt;&#10;&#10;        {/* Greeting Text - 더 친근하고 명확하게 */}&#10;        &lt;View style={styles.greetingContainer}&gt;&#10;          &lt;Text style={styles.greetingText}&gt;&#10;            안녕하세요, &lt;Text style={styles.greetingHighlight}&gt;유은정님!&lt;/Text&gt;&#10;          &lt;/Text&gt;&#10;          &lt;Text style={styles.greetingSubtext}&gt;&#10;            오늘도 건강한 하루 되세요 ✨&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Quick Actions - 빠른 액션 버튼들 */}&#10;        &lt;View style={styles.quickActionsContainer}&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;복용 기록&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;⏰&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;알림 설정&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;통계 보기&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Calendar Section */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;복용 캘린더&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;이번 달 복용 현황&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;CalendarComponent /&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Interaction Risk Section - 카드 형식 제거 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;상호작용 안전도&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;현재 복용 중인 약물들의 안전성&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskContent}&gt;&#10;            &lt;View style={styles.circularGaugeContainer}&gt;&#10;              &lt;CircularGauge percentage={79} size={100} /&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;              &lt;InteractionRiskGroups /&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Health News Section - 카드 디자인으로 개선 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;건강 뉴스&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;유은정님을 위한 맞춤 정보&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.newsCard}&gt;&#10;            &lt;View style={styles.newsImagePlaceholder}&gt;&#10;              &lt;Text style={styles.newsEmoji}&gt;&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.newsContent}&gt;&#10;              &lt;Text style={styles.newsTitle}&gt;겨울철 감기 예방을 위한 영양제 복용법&lt;/Text&gt;&#10;              &lt;Text style={styles.newsSubtitle}&gt;면역력 강화를 위한 비타민 D, C 섭취 가이드&lt;/Text&gt;&#10;              &lt;Text style={styles.newsDate}&gt;2시간 전&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingTop: 50,&#10;    paddingBottom: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.primary,&#10;  },&#10;  headerIcons: {&#10;    flexDirection: 'row',&#10;    gap: 12,&#10;  },&#10;  greetingContainer: {&#10;    marginVertical: 16,&#10;  },&#10;  greetingText: {&#10;    fontSize: 20,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  greetingHighlight: {&#10;    color: Colors.light.primary,&#10;    fontWeight: 'bold',&#10;  },&#10;  greetingSubtext: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  quickActionsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    marginBottom: 24,&#10;    gap: 12,&#10;  },&#10;  quickActionCard: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  quickActionIcon: {&#10;    fontSize: 24,&#10;    marginBottom: 8,&#10;  },&#10;  quickActionText: {&#10;    fontSize: 12,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    textAlign: 'center',&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  interactionRiskContent: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;  },&#10;  circularGaugeContainer: {&#10;    alignItems: 'center',&#10;    marginRight: 20,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    flex: 1,&#10;  },&#10;  newsCard: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    flexDirection: 'row',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  newsImagePlaceholder: {&#10;    width: 60,&#10;    height: 60,&#10;    borderRadius: 12,&#10;    backgroundColor: Colors.light.lightGray,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginRight: 16,&#10;  },&#10;  newsEmoji: {&#10;    fontSize: 24,&#10;  },&#10;  newsContent: {&#10;    flex: 1,&#10;    justifyContent: 'space-between',&#10;  },&#10;  newsTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  newsSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    lineHeight: 20,&#10;    marginBottom: 8,&#10;  },&#10;  newsDate: {&#10;    fontSize: 12,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '500',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import { Text, View, ScrollView, Image, StyleSheet } from &quot;react-native&quot;;&#10;import InteractionRiskGroups from &quot;../components/InteractionRiskGroups&quot;;&#10;import CircularGauge from &quot;../components/CircularGauge&quot;;&#10;import CalendarComponent from &quot;../components/CalendarComponent&quot;;&#10;import { Colors } from &quot;@/constants/Colors&quot;;&#10;import BottomNavigationBar from &quot;../components/BottomNavigationBar&quot;;&#10;import SearchBar from '../components/SearchBar';&#10;&#10;export default function Index() {&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.light.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Header with Status Bar */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;PillLink&lt;/Text&gt;&#10;          &lt;View style={styles.headerIcons}&gt;&#10;            {/* 알림, 설정 아이콘 등 추가 가능 */}&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Search Bar */}&#10;        &lt;SearchBar /&gt;&#10;&#10;        {/* Greeting Text - 더 친근하고 명확하게 */}&#10;        &lt;View style={styles.greetingContainer}&gt;&#10;          &lt;Text style={styles.greetingText}&gt;&#10;            안녕하세요, &lt;Text style={styles.greetingHighlight}&gt;유은정님!&lt;/Text&gt;&#10;          &lt;/Text&gt;&#10;          &lt;Text style={styles.greetingSubtext}&gt;&#10;            오늘도 건강한 하루 되세요 ✨&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Quick Actions - 빠른 액션 버튼들 */}&#10;        &lt;View style={styles.quickActionsContainer}&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;복용 기록&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;⏰&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;알림 설정&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.quickActionCard}&gt;&#10;            &lt;Text style={styles.quickActionIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.quickActionText}&gt;통계 보기&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Calendar Section */}&#10;        &lt;CalendarComponent /&gt;&#10;&#10;        {/* Interaction Risk Section - 카드 형식 제거 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;상호작용 안전도&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;현재 복용 중인 약물들의 안전성&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskContent}&gt;&#10;            &lt;View style={styles.circularGaugeContainer}&gt;&#10;              &lt;CircularGauge percentage={79} size={100} /&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;              &lt;InteractionRiskGroups /&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* Health News Section - 카드 디자인으로 개선 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.sectionHeader}&gt;&#10;            &lt;Text style={styles.sectionTitle}&gt;건강 뉴스&lt;/Text&gt;&#10;            &lt;Text style={styles.sectionSubtitle}&gt;유은정님을 위한 맞춤 정보&lt;/Text&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.newsCard}&gt;&#10;            &lt;View style={styles.newsImagePlaceholder}&gt;&#10;              &lt;Text style={styles.newsEmoji}&gt;&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.newsContent}&gt;&#10;              &lt;Text style={styles.newsTitle}&gt;겨울철 감기 예방을 위한 영양제 복용법&lt;/Text&gt;&#10;              &lt;Text style={styles.newsSubtitle}&gt;면역력 강화를 위한 비타민 D, C 섭취 가이드&lt;/Text&gt;&#10;              &lt;Text style={styles.newsDate}&gt;2시간 전&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/ScrollView&gt;&#10;      &lt;BottomNavigationBar /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    paddingTop: 50,&#10;    paddingBottom: 10,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.primary,&#10;  },&#10;  headerIcons: {&#10;    flexDirection: 'row',&#10;    gap: 12,&#10;  },&#10;  greetingContainer: {&#10;    marginVertical: 16,&#10;  },&#10;  greetingText: {&#10;    fontSize: 20,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  greetingHighlight: {&#10;    color: Colors.light.primary,&#10;    fontWeight: 'bold',&#10;  },&#10;  greetingSubtext: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  quickActionsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    marginBottom: 24,&#10;    gap: 12,&#10;  },&#10;  quickActionCard: {&#10;    flex: 1,&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  quickActionIcon: {&#10;    fontSize: 24,&#10;    marginBottom: 8,&#10;  },&#10;  quickActionText: {&#10;    fontSize: 12,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    textAlign: 'center',&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  interactionRiskContent: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;  },&#10;  circularGaugeContainer: {&#10;    alignItems: 'center',&#10;    marginRight: 20,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    flex: 1,&#10;  },&#10;  newsCard: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    padding: 16,&#10;    flexDirection: 'row',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  newsImagePlaceholder: {&#10;    width: 60,&#10;    height: 60,&#10;    borderRadius: 12,&#10;    backgroundColor: Colors.light.lightGray,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginRight: 16,&#10;  },&#10;  newsEmoji: {&#10;    fontSize: 24,&#10;  },&#10;  newsContent: {&#10;    flex: 1,&#10;    justifyContent: 'space-between',&#10;  },&#10;  newsTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  newsSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    lineHeight: 20,&#10;    marginBottom: 8,&#10;  },&#10;  newsDate: {&#10;    fontSize: 12,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '500',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/interaction.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/interaction.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Modal, Animated, Alert, Platform } from 'react-native';&#10;import { Colors } from '../constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;&#10;export default function InteractionScreen() {&#10;  const [modalVisible, setModalVisible] = useState(false);&#10;  const [selectedItem, setSelectedItem] = useState&lt;{type: string, title: string, description: string} | null&gt;(null);&#10;  const [selectedGroup, setSelectedGroup] = useState&lt;'duplicate' | 'risk' | 'safe' | null&gt;(null);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;&#10;  // 애니메이션 값들&#10;  const fadeAnim = new Animated.Value(1);&#10;  const slideAnim = new Animated.Value(0);&#10;&#10;  // 각 그룹별 데이터&#10;  const groupData = {&#10;    duplicate: [&#10;      { name: '아스피린 + 와파린', description: '혈액 응고 방지 효과 중복', type: '중복' },&#10;    ],&#10;    risk: [&#10;      { name: '메트포르민 + 알코올', description: '저혈당 위험 증가', type: '위험' },&#10;    ],&#10;    safe: [&#10;      { name: '비타민 D + 칼슘', description: '뼈 건강 증진 효과', type: '안전' },&#10;    ],&#10;  };&#10;&#10;  // 향상된 그룹 버튼 클릭 핸들러 - 애니메이션과 피드백 포함&#10;  const handleGroupPress = (groupType: 'duplicate' | 'risk' | 'safe') =&gt; {&#10;    const newSelection = selectedGroup === groupType ? null : groupType;&#10;    setSelectedGroup(newSelection);&#10;&#10;    // 부드러운 애니메이션 효과&#10;    Animated.sequence([&#10;      Animated.timing(fadeAnim, {&#10;        toValue: 0.7,&#10;        duration: 100,&#10;        useNativeDriver: true,&#10;      }),&#10;      Animated.timing(fadeAnim, {&#10;        toValue: 1,&#10;        duration: 100,&#10;        useNativeDriver: true,&#10;      }),&#10;    ]).start();&#10;  };&#10;&#10;  // 개선된 모달 열기 함수 - 애니메이션 포함&#10;  const handleItemPress = (type: string, title: string, description: string) =&gt; {&#10;    setSelectedItem({ type, title, description });&#10;    setModalVisible(true);&#10;&#10;    // 모달 애니메이션&#10;    Animated.timing(slideAnim, {&#10;      toValue: 1,&#10;      duration: 300,&#10;      useNativeDriver: true,&#10;    }).start();&#10;  };&#10;&#10;  // 의사 상담 버튼 핸들러&#10;  const handleConsultDoctor = () =&gt; {&#10;    Alert.alert(&#10;      '의사 상담',&#10;      '가까운 병원이나 약국을 찾아 전문의와 상담받으시기를 권장합니다.',&#10;      [&#10;        { text: '병원 찾기', onPress: () =&gt; { closeModal(); } },&#10;        { text: '약국 찾기', onPress: () =&gt; { closeModal(); } },&#10;        { text: '나중에', style: 'cancel', onPress: closeModal }&#10;      ]&#10;    );&#10;  };&#10;&#10;  // 개선된 모달 닫기 함수 - 애니메이션 포함&#10;  const closeModal = () =&gt; {&#10;    Animated.timing(slideAnim, {&#10;      toValue: 0,&#10;      duration: 200,&#10;      useNativeDriver: true,&#10;    }).start(() =&gt; {&#10;      setModalVisible(false);&#10;      setSelectedItem(null);&#10;    });&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.light.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Search Bar - 최상단으로 이동 */}&#10;        &lt;SearchBar placeholder=&quot;약물명을 검색하세요&quot; /&gt;&#10;&#10;        {/* Header */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;오말순님의 약물 복용 리포트&lt;/Text&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;복용 중인 약물들의 상호작용을 확인하세요&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 상호작용 안전도 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.gaugeSection}&gt;&#10;            &lt;CircularGauge percentage={79} size={180} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;            &lt;InteractionRiskGroups&#10;              interactable={true}&#10;              onGroupPress={handleGroupPress}&#10;              selectedGroup={selectedGroup}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 경고 문구 */}&#10;        &lt;View style={styles.warningContainer}&gt;&#10;          &lt;Text style={styles.warningText}&gt;&#10;            현재 약물 상호작용 위험 점수가 높습니다.{'\n'}반드시 의사, 약사와 상담하여 약물 변경 또는 사용 중단 여부를 결정하세요.&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 선택된 그룹의 상세 정보 */}&#10;        {selectedGroup ? (&#10;          &lt;Animated.View style={[styles.selectedGroupSection, { opacity: fadeAnim }]}&gt;&#10;            &lt;View style={styles.selectedGroupHeader}&gt;&#10;              &lt;Text style={styles.selectedGroupTitle}&gt;&#10;                {selectedGroup === 'duplicate' ? ' 중복 약물' :&#10;                 selectedGroup === 'risk' ? '⚠️ 위험한 상호작용' :&#10;                 '✅ 안전한 조합'}&#10;              &lt;/Text&gt;&#10;              &lt;Text style={styles.selectedGroupSubtitle}&gt;&#10;                {selectedGroup === 'duplicate' ? '동일한 효과를 가진 약물들' :&#10;                 selectedGroup === 'risk' ? '주의가 필요한 약물 조합' :&#10;                 '함께 복용해도 안전한 약물들'}&#10;              &lt;/Text&gt;&#10;            &lt;/View&gt;&#10;&#10;            {groupData[selectedGroup].map((item, index) =&gt; (&#10;              &lt;TouchableOpacity&#10;                key={index}&#10;                style={[styles.medicationItem, styles.medicationItemEnhanced]}&#10;                onPress={() =&gt; handleItemPress(item.type, item.name,&#10;                  selectedGroup === 'duplicate' ? '동일한 효과를 가진 약물이 중복 처방되었습니다.' :&#10;                  selectedGroup === 'risk' ? '이 약물 조합은 위험한 부작용을 일으킬 수 있습니다.' :&#10;                  '이 약물 조합은 안전하며 서로 효과를 증진시킵니다.'&#10;                )}&#10;                activeOpacity={0.7}&#10;              &gt;&#10;                &lt;View style={styles.medicationInfo}&gt;&#10;                  &lt;Text style={styles.medicationName}&gt;{item.name}&lt;/Text&gt;&#10;                  &lt;Text style={styles.medicationDescription}&gt;{item.description}&lt;/Text&gt;&#10;                  &lt;Text style={styles.tapHint}&gt;탭하여 자세히 보기&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={[&#10;                  styles.riskBadge,&#10;                  { backgroundColor:&#10;                    selectedGroup === 'duplicate' ? Colors.light.primaryLight :&#10;                    selectedGroup === 'risk' ? Colors.light.dangerLight :&#10;                    Colors.light.secondaryLight&#10;                  }&#10;                ]}&gt;&#10;                  &lt;Text style={[&#10;                    styles.riskBadgeText,&#10;                    { color:&#10;                      selectedGroup === 'duplicate' ? Colors.light.primary :&#10;                      selectedGroup === 'risk' ? Colors.light.danger :&#10;                      Colors.light.secondary&#10;                    }&#10;                  ]}&gt;&#10;                    {item.type}&#10;                  &lt;/Text&gt;&#10;                &lt;/View&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            ))}&#10;          &lt;/Animated.View&gt;&#10;        ) : (&#10;          &lt;View style={styles.emptyStateContainer}&gt;&#10;            &lt;Text style={styles.emptyStateIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.emptyStateTitle}&gt;카테고리를 선택하세요&lt;/Text&gt;&#10;            &lt;Text style={styles.emptyStateDescription}&gt;&#10;              위의 중복, 위험, 안전 카테고리 중 하나를 선택하여{'\n'}약물 상호작용 정보를 확인하세요&#10;            &lt;/Text&gt;&#10;          &lt;/View&gt;&#10;        )}&#10;      &lt;/ScrollView&gt;&#10;&#10;      {/* 모달 */}&#10;      &lt;Modal&#10;        animationType=&quot;slide&quot;&#10;        transparent={true}&#10;        visible={modalVisible}&#10;        onRequestClose={closeModal}&#10;      &gt;&#10;        &lt;View style={styles.modalOverlay}&gt;&#10;          &lt;View style={styles.modalContent}&gt;&#10;            &lt;View style={styles.modalHeader}&gt;&#10;              &lt;Text style={styles.modalTitle}&gt;{selectedItem?.title}&lt;/Text&gt;&#10;              &lt;TouchableOpacity onPress={closeModal} style={styles.closeButton}&gt;&#10;                &lt;Text style={styles.closeButtonText}&gt;✕&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;&#10;            &lt;View style={styles.modalBody}&gt;&#10;              &lt;View style={[&#10;                styles.modalBadge,&#10;                { backgroundColor:&#10;                  selectedItem?.type === '중복' ? Colors.light.primaryLight :&#10;                  selectedItem?.type === '위험' ? Colors.light.dangerLight :&#10;                  Colors.light.secondaryLight&#10;                }&#10;              ]}&gt;&#10;                &lt;Text style={[&#10;                  styles.modalBadgeText,&#10;                  { color:&#10;                    selectedItem?.type === '중복' ? Colors.light.primary :&#10;                    selectedItem?.type === '위험' ? Colors.light.danger :&#10;                    Colors.light.secondary&#10;                  }&#10;                ]}&gt;&#10;                  {selectedItem?.type}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;&#10;              &lt;Text style={styles.modalDescription}&gt;&#10;                {selectedItem?.description}&#10;              &lt;/Text&gt;&#10;&#10;              &lt;View style={styles.modalActions}&gt;&#10;                &lt;TouchableOpacity style={styles.actionButton} onPress={handleConsultDoctor}&gt;&#10;                  &lt;Text style={styles.actionButtonText}&gt;의사와 상담하기&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={[styles.actionButton, styles.secondaryButton]} onPress={closeModal}&gt;&#10;                  &lt;Text style={[styles.actionButtonText, styles.secondaryButtonText]}&gt;나중에 확인&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;              &lt;/View&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/Modal&gt;&#10;&#10;      &lt;BottomNavigationBar activeIndex={1} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  header: {&#10;    paddingTop: 50,&#10;    paddingBottom: 20,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  gaugeSection: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginBottom: 24,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    // flex: 1, // 제거&#10;  },&#10;  detailSection: {&#10;    marginBottom: 24,&#10;  },&#10;  detailSectionTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 12,&#10;  },&#10;  medicationItem: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 12,&#10;    padding: 16,&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;    marginBottom: 8,&#10;  },&#10;  medicationItemEnhanced: {&#10;    // 애니메이션을 위한 스타일 추가&#10;    transform: [{ scale: 1 }],&#10;  },&#10;  medicationInfo: {&#10;    flex: 1,&#10;  },&#10;  medicationName: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  medicationDescription: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  tapHint: {&#10;    fontSize: 12,&#10;    color: Colors.light.secondary,&#10;    marginTop: 4,&#10;  },&#10;  riskBadge: {&#10;    paddingHorizontal: 12,&#10;    paddingVertical: 4,&#10;    borderRadius: 12,&#10;  },&#10;  riskBadgeText: {&#10;    fontSize: 12,&#10;    fontWeight: 'bold',&#10;  },&#10;  modalOverlay: {&#10;    flex: 1,&#10;    backgroundColor: 'rgba(0, 0, 0, 0.5)',&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;  },&#10;  modalContent: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    margin: 20,&#10;    maxWidth: 340,&#10;    width: '90%',&#10;  },&#10;  modalHeader: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    padding: 20,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.light.border,&#10;  },&#10;  modalTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    flex: 1,&#10;  },&#10;  closeButton: {&#10;    padding: 4,&#10;  },&#10;  closeButtonText: {&#10;    fontSize: 18,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  modalBody: {&#10;    padding: 20,&#10;  },&#10;  modalBadge: {&#10;    alignSelf: 'flex-start',&#10;    paddingHorizontal: 12,&#10;    paddingVertical: 6,&#10;    borderRadius: 12,&#10;    marginBottom: 16,&#10;  },&#10;  modalBadgeText: {&#10;    fontSize: 14,&#10;    fontWeight: 'bold',&#10;  },&#10;  modalDescription: {&#10;    fontSize: 16,&#10;    color: Colors.light.text,&#10;    lineHeight: 24,&#10;    marginBottom: 24,&#10;  },&#10;  modalActions: {&#10;    gap: 12,&#10;  },&#10;  actionButton: {&#10;    backgroundColor: Colors.light.primary,&#10;    paddingVertical: 12,&#10;    paddingHorizontal: 24,&#10;    borderRadius: 8,&#10;    alignItems: 'center',&#10;  },&#10;  actionButtonText: {&#10;    color: '#fff',&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;  },&#10;  secondaryButton: {&#10;    backgroundColor: 'transparent',&#10;    borderWidth: 1,&#10;    borderColor: Colors.light.border,&#10;  },&#10;  secondaryButtonText: {&#10;    color: Colors.light.text,&#10;  },&#10;  selectedGroupSection: {&#10;    marginBottom: 32,&#10;  },&#10;  selectedGroupHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  selectedGroupTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  selectedGroupSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  warningContainer: {&#10;    backgroundColor: '#FFCCCC',&#10;    borderRadius: 10,&#10;    padding: 12,&#10;    marginBottom: 24,&#10;  },&#10;  warningText: {&#10;    color: '#D8000C',&#10;    fontSize: 14,&#10;    fontWeight: 'bold',&#10;    textAlign: 'center',&#10;  },&#10;  emptyStateContainer: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 40,&#10;  },&#10;  emptyStateIcon: {&#10;    fontSize: 48,&#10;    marginBottom: 16,&#10;  },&#10;  emptyStateTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 8,&#10;  },&#10;  emptyStateDescription: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    textAlign: 'center',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Modal, Animated, Alert, Platform } from 'react-native';&#10;import { Colors } from '../constants/Colors';&#10;import SearchBar from '../components/SearchBar';&#10;import CircularGauge from '../components/CircularGauge';&#10;import InteractionRiskGroups from '../components/InteractionRiskGroups';&#10;import BottomNavigationBar from '../components/BottomNavigationBar';&#10;&#10;export default function InteractionScreen() {&#10;  const [modalVisible, setModalVisible] = useState(false);&#10;  const [selectedItem, setSelectedItem] = useState&lt;{type: string, title: string, description: string} | null&gt;(null);&#10;  const [selectedGroup, setSelectedGroup] = useState&lt;'duplicate' | 'risk' | 'safe' | null&gt;(null);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;&#10;  // 애니메이션 값들&#10;  const fadeAnim = new Animated.Value(1);&#10;  const slideAnim = new Animated.Value(0);&#10;&#10;  // 각 그룹별 데이터&#10;  const groupData = {&#10;    duplicate: [&#10;      { name: '아스피린 + 와파린', description: '혈액 응고 방지 효과 중복', type: '중복' },&#10;    ],&#10;    risk: [&#10;      { name: '메트포르민 + 알코올', description: '저혈당 위험 증가', type: '위험' },&#10;    ],&#10;    safe: [&#10;      { name: '비타민 D + 칼슘', description: '뼈 건강 증진 효과', type: '안전' },&#10;    ],&#10;  };&#10;&#10;  // 향상된 그룹 버튼 클릭 핸들러 - 애니메이션과 피드백 포함&#10;  const handleGroupPress = (groupType: 'duplicate' | 'risk' | 'safe') =&gt; {&#10;    const newSelection = selectedGroup === groupType ? null : groupType;&#10;    setSelectedGroup(newSelection);&#10;&#10;    // 부드러운 애니메이션 효과&#10;    Animated.sequence([&#10;      Animated.timing(fadeAnim, {&#10;        toValue: 0.7,&#10;        duration: 100,&#10;        useNativeDriver: true,&#10;      }),&#10;      Animated.timing(fadeAnim, {&#10;        toValue: 1,&#10;        duration: 100,&#10;        useNativeDriver: true,&#10;      }),&#10;    ]).start();&#10;  };&#10;&#10;  // 개선된 모달 열기 함수 - 애니메이션 포함&#10;  const handleItemPress = (type: string, title: string, description: string) =&gt; {&#10;    setSelectedItem({ type, title, description });&#10;    setModalVisible(true);&#10;&#10;    // 모달 애니메이션&#10;    Animated.timing(slideAnim, {&#10;      toValue: 1,&#10;      duration: 300,&#10;      useNativeDriver: true,&#10;    }).start();&#10;  };&#10;&#10;  // 의사 상담 버튼 핸들러&#10;  const handleConsultDoctor = () =&gt; {&#10;    Alert.alert(&#10;      '의사 상담',&#10;      '가까운 병원이나 약국을 찾아 전문의와 상담받으시기를 권장합니다.',&#10;      [&#10;        { text: '병원 찾기', onPress: () =&gt; { closeModal(); } },&#10;        { text: '약국 찾기', onPress: () =&gt; { closeModal(); } },&#10;        { text: '나중에', style: 'cancel', onPress: closeModal }&#10;      ]&#10;    );&#10;  };&#10;&#10;  // 개선된 모달 닫기 함수 - 애니메이션 포함&#10;  const closeModal = () =&gt; {&#10;    Animated.timing(slideAnim, {&#10;      toValue: 0,&#10;      duration: 200,&#10;      useNativeDriver: true,&#10;    }).start(() =&gt; {&#10;      setModalVisible(false);&#10;      setSelectedItem(null);&#10;    });&#10;  };&#10;&#10;  return (&#10;    &lt;View style={{ flex: 1, backgroundColor: Colors.light.background }}&gt;&#10;      &lt;ScrollView&#10;        style={styles.container}&#10;        contentContainerStyle={{ paddingBottom: 100 }}&#10;        showsVerticalScrollIndicator={false}&#10;      &gt;&#10;        {/* Search Bar - 최상단으로 이동 */}&#10;        &lt;SearchBar placeholder=&quot;약물명을 검색하세요&quot; /&gt;&#10;&#10;        {/* Header */}&#10;        &lt;View style={styles.header}&gt;&#10;          &lt;Text style={styles.headerTitle}&gt;오말순님의 약물 복용 리포트&lt;/Text&gt;&#10;          &lt;Text style={styles.headerSubtitle}&gt;복용 중인 약물들의 상호작용을 확인하세요&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 상호작용 안전도 */}&#10;        &lt;View style={styles.sectionContainer}&gt;&#10;          &lt;View style={styles.gaugeSection}&gt;&#10;            &lt;CircularGauge percentage={79} size={180} /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={styles.interactionRiskGroupsWrapper}&gt;&#10;            &lt;InteractionRiskGroups&#10;              interactable={true}&#10;              onGroupPress={handleGroupPress}&#10;              selectedGroup={selectedGroup}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 경고 문구 - 접근성 개선 */}&#10;        &lt;View style={styles.warningContainer} accessible={true} accessibilityRole=&quot;alert&quot;&gt;&#10;          &lt;Text style={styles.warningIcon}&gt;⚠️&lt;/Text&gt;&#10;          &lt;Text style={styles.warningText}&gt;&#10;            현재 약물 상호작용 위험 점수가 높습니다.{'\n'}반드시 의사, 약사와 상담하여 약물 변경 또는 사용 중단 여부를 결정하세요.&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        {/* 선택된 그룹의 상세 정보 */}&#10;        {selectedGroup ? (&#10;          &lt;Animated.View style={[styles.selectedGroupSection, { opacity: fadeAnim }]}&gt;&#10;            &lt;View style={styles.selectedGroupHeader}&gt;&#10;              &lt;Text style={styles.selectedGroupTitle}&gt;&#10;                {selectedGroup === 'duplicate' ? ' 중복 약물' :&#10;                 selectedGroup === 'risk' ? '⚠️ 위험한 상호작용' :&#10;                 '✅ 안전한 조합'}&#10;              &lt;/Text&gt;&#10;              &lt;Text style={styles.selectedGroupSubtitle}&gt;&#10;                {selectedGroup === 'duplicate' ? '동일한 효과를 가진 약물들' :&#10;                 selectedGroup === 'risk' ? '주의가 필요한 약물 조합' :&#10;                 '함께 복용해도 안전한 약물들'}&#10;              &lt;/Text&gt;&#10;            &lt;/View&gt;&#10;&#10;            {groupData[selectedGroup].map((item, index) =&gt; (&#10;              &lt;TouchableOpacity&#10;                key={index}&#10;                style={[styles.medicationItem, styles.medicationItemEnhanced]}&#10;                onPress={() =&gt; handleItemPress(item.type, item.name,&#10;                  selectedGroup === 'duplicate' ? '동일한 효과를 가진 약물이 중복 처방되었습니다.' :&#10;                  selectedGroup === 'risk' ? '이 약물 조합은 위험한 부작용을 일으킬 수 있습니다.' :&#10;                  '이 약물 조합은 안전하며 서로 효과를 증진시킵니다.'&#10;                )}&#10;                activeOpacity={0.7}&#10;              &gt;&#10;                &lt;View style={styles.medicationInfo}&gt;&#10;                  &lt;Text style={styles.medicationName}&gt;{item.name}&lt;/Text&gt;&#10;                  &lt;Text style={styles.medicationDescription}&gt;{item.description}&lt;/Text&gt;&#10;                  &lt;Text style={styles.tapHint}&gt;탭하여 자세히 보기&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={[&#10;                  styles.riskBadge,&#10;                  { backgroundColor:&#10;                    selectedGroup === 'duplicate' ? Colors.light.primaryLight :&#10;                    selectedGroup === 'risk' ? Colors.light.dangerLight :&#10;                    Colors.light.secondaryLight&#10;                  }&#10;                ]}&gt;&#10;                  &lt;Text style={[&#10;                    styles.riskBadgeText,&#10;                    { color:&#10;                      selectedGroup === 'duplicate' ? Colors.light.primary :&#10;                      selectedGroup === 'risk' ? Colors.light.danger :&#10;                      Colors.light.secondary&#10;                    }&#10;                  ]}&gt;&#10;                    {item.type}&#10;                  &lt;/Text&gt;&#10;                &lt;/View&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            ))}&#10;          &lt;/Animated.View&gt;&#10;        ) : (&#10;          &lt;View style={styles.emptyStateContainer}&gt;&#10;            &lt;Text style={styles.emptyStateIcon}&gt;&lt;/Text&gt;&#10;            &lt;Text style={styles.emptyStateTitle}&gt;카테고리를 선택하세요&lt;/Text&gt;&#10;            &lt;Text style={styles.emptyStateDescription}&gt;&#10;              위의 중복, 위험, 안전 카테고리 중 하나를 선택하여{'\n'}약물 상호작용 정보를 확인하세요&#10;            &lt;/Text&gt;&#10;          &lt;/View&gt;&#10;        )}&#10;      &lt;/ScrollView&gt;&#10;&#10;      {/* 모달 */}&#10;      &lt;Modal&#10;        animationType=&quot;slide&quot;&#10;        transparent={true}&#10;        visible={modalVisible}&#10;        onRequestClose={closeModal}&#10;      &gt;&#10;        &lt;View style={styles.modalOverlay}&gt;&#10;          &lt;View style={styles.modalContent}&gt;&#10;            &lt;View style={styles.modalHeader}&gt;&#10;              &lt;Text style={styles.modalTitle}&gt;{selectedItem?.title}&lt;/Text&gt;&#10;              &lt;TouchableOpacity onPress={closeModal} style={styles.closeButton}&gt;&#10;                &lt;Text style={styles.closeButtonText}&gt;✕&lt;/Text&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;&#10;            &lt;View style={styles.modalBody}&gt;&#10;              &lt;View style={[&#10;                styles.modalBadge,&#10;                { backgroundColor:&#10;                  selectedItem?.type === '중복' ? Colors.light.primaryLight :&#10;                  selectedItem?.type === '위험' ? Colors.light.dangerLight :&#10;                  Colors.light.secondaryLight&#10;                }&#10;              ]}&gt;&#10;                &lt;Text style={[&#10;                  styles.modalBadgeText,&#10;                  { color:&#10;                    selectedItem?.type === '중복' ? Colors.light.primary :&#10;                    selectedItem?.type === '위험' ? Colors.light.danger :&#10;                    Colors.light.secondary&#10;                  }&#10;                ]}&gt;&#10;                  {selectedItem?.type}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;&#10;              &lt;Text style={styles.modalDescription}&gt;&#10;                {selectedItem?.description}&#10;              &lt;/Text&gt;&#10;&#10;              &lt;View style={styles.modalActions}&gt;&#10;                &lt;TouchableOpacity style={styles.actionButton} onPress={handleConsultDoctor}&gt;&#10;                  &lt;Text style={styles.actionButtonText}&gt;의사와 상담하기&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={[styles.actionButton, styles.secondaryButton]} onPress={closeModal}&gt;&#10;                  &lt;Text style={[styles.actionButtonText, styles.secondaryButtonText]}&gt;나중에 확인&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;              &lt;/View&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/Modal&gt;&#10;&#10;      &lt;BottomNavigationBar activeIndex={1} /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    paddingHorizontal: 16,&#10;    backgroundColor: Colors.light.background,&#10;  },&#10;  header: {&#10;    paddingTop: 50,&#10;    paddingBottom: 20,&#10;  },&#10;  headerTitle: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  headerSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  gaugeSection: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginBottom: 24,&#10;  },&#10;  interactionRiskGroupsWrapper: {&#10;    // flex: 1, // 제거&#10;  },&#10;  detailSection: {&#10;    marginBottom: 24,&#10;  },&#10;  detailSectionTitle: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 12,&#10;  },&#10;  medicationItem: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 12,&#10;    padding: 16,&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;    marginBottom: 8,&#10;  },&#10;  medicationItemEnhanced: {&#10;    // 애니메이션을 위한 스타일 추가&#10;    transform: [{ scale: 1 }],&#10;  },&#10;  medicationInfo: {&#10;    flex: 1,&#10;  },&#10;  medicationName: {&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  medicationDescription: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  tapHint: {&#10;    fontSize: 12,&#10;    color: Colors.light.secondary,&#10;    marginTop: 4,&#10;  },&#10;  riskBadge: {&#10;    paddingHorizontal: 12,&#10;    paddingVertical: 4,&#10;    borderRadius: 12,&#10;  },&#10;  riskBadgeText: {&#10;    fontSize: 12,&#10;    fontWeight: 'bold',&#10;  },&#10;  modalOverlay: {&#10;    flex: 1,&#10;    backgroundColor: 'rgba(0, 0, 0, 0.5)',&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;  },&#10;  modalContent: {&#10;    backgroundColor: '#fff',&#10;    borderRadius: 16,&#10;    margin: 20,&#10;    maxWidth: 340,&#10;    width: '90%',&#10;  },&#10;  modalHeader: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    padding: 20,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: Colors.light.border,&#10;  },&#10;  modalTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    flex: 1,&#10;  },&#10;  closeButton: {&#10;    padding: 4,&#10;  },&#10;  closeButtonText: {&#10;    fontSize: 18,&#10;    color: Colors.light.mediumGray,&#10;  },&#10;  modalBody: {&#10;    padding: 20,&#10;  },&#10;  modalBadge: {&#10;    alignSelf: 'flex-start',&#10;    paddingHorizontal: 12,&#10;    paddingVertical: 6,&#10;    borderRadius: 12,&#10;    marginBottom: 16,&#10;  },&#10;  modalBadgeText: {&#10;    fontSize: 14,&#10;    fontWeight: 'bold',&#10;  },&#10;  modalDescription: {&#10;    fontSize: 16,&#10;    color: Colors.light.text,&#10;    lineHeight: 24,&#10;    marginBottom: 24,&#10;  },&#10;  modalActions: {&#10;    gap: 12,&#10;  },&#10;  actionButton: {&#10;    backgroundColor: Colors.light.primary,&#10;    paddingVertical: 12,&#10;    paddingHorizontal: 24,&#10;    borderRadius: 8,&#10;    alignItems: 'center',&#10;  },&#10;  actionButtonText: {&#10;    color: '#fff',&#10;    fontSize: 16,&#10;    fontWeight: '600',&#10;  },&#10;  secondaryButton: {&#10;    backgroundColor: 'transparent',&#10;    borderWidth: 1,&#10;    borderColor: Colors.light.border,&#10;  },&#10;  secondaryButtonText: {&#10;    color: Colors.light.text,&#10;  },&#10;  selectedGroupSection: {&#10;    marginBottom: 32,&#10;  },&#10;  selectedGroupHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  selectedGroupTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  selectedGroupSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  warningContainer: {&#10;    backgroundColor: '#FFCCCC',&#10;    borderRadius: 10,&#10;    padding: 12,&#10;    marginBottom: 24,&#10;  },&#10;  warningIcon: {&#10;    fontSize: 16,&#10;    color: '#D8000C',&#10;    marginBottom: 4,&#10;  },&#10;  warningText: {&#10;    color: '#D8000C',&#10;    fontSize: 14,&#10;    fontWeight: 'bold',&#10;    textAlign: 'center',&#10;  },&#10;  emptyStateContainer: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 40,&#10;  },&#10;  emptyStateIcon: {&#10;    fontSize: 48,&#10;    marginBottom: 16,&#10;  },&#10;  emptyStateTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 8,&#10;  },&#10;  emptyStateDescription: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    textAlign: 'center',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/BottomNavigationBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/BottomNavigationBar.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, StyleSheet, TouchableOpacity, Haptics } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import { useRouter } from 'expo-router';&#10;import { Colors } from '../constants/Colors';&#10;&#10;// 더 직관적인 아이콘들로 변경&#10;const icons = [&#10;  'home',&#10;  'pill',&#10;  'plus',&#10;  'message-text',&#10;  'account-circle',&#10;];&#10;&#10;const labels = ['홈', '약물관리', '추가', '채팅', '내정보'];&#10;&#10;export default function BottomNavigationBar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;&#10;  const handleTabPress = async (idx: number) =&gt; {&#10;    // 햅틱 피드백 추가&#10;    try {&#10;      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);&#10;    } catch (error) {&#10;      // 햅틱 피드백이 지원되지 않는 환경에서는 무시&#10;    }&#10;&#10;    if (onTabPress) onTabPress(idx);&#10;&#10;    // 라우팅 로직&#10;    switch (idx) {&#10;      case 0:&#10;        router.push('/');&#10;        break;&#10;      case 1:&#10;        router.push('/interaction'); // 약물 상호작용 페이지로 이동&#10;        break;&#10;      case 2:&#10;        // router.push('/add');&#10;        break;&#10;      case 3:&#10;        // router.push('/chat');&#10;        break;&#10;      case 4:&#10;        router.push('/myinfo');&#10;        break;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; {&#10;        const isActive = activeIndex === idx;&#10;        const isCenter = idx === 2;&#10;&#10;        if (isCenter) {&#10;          return (&#10;            &lt;View key={idx} style={styles.centerCircleWrapper}&gt;&#10;              &lt;TouchableOpacity&#10;                style={[styles.centerCircle, isActive &amp;&amp; styles.centerCircleActive]}&#10;                onPress={() =&gt; handleTabPress(idx)}&#10;                activeOpacity={0.8}&#10;                accessibilityLabel={`${labels[idx]} 탭`}&#10;                accessibilityRole=&quot;button&quot;&#10;              &gt;&#10;                &lt;MaterialCommunityIcons&#10;                  name={icon}&#10;                  size={32}&#10;                  color={'#fff'}&#10;                /&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;          );&#10;        }&#10;&#10;        return (&#10;          &lt;TouchableOpacity&#10;            key={idx}&#10;            style={[styles.tab, isActive &amp;&amp; styles.activeTab]}&#10;            onPress={() =&gt; handleTabPress(idx)}&#10;            activeOpacity={0.6}&#10;            accessibilityLabel={`${labels[idx]} 탭`}&#10;            accessibilityRole=&quot;button&quot;&#10;          &gt;&#10;            &lt;MaterialCommunityIcons&#10;              name={icon}&#10;              size={26}&#10;              color={isActive ? Colors.light.navbarTabActive : Colors.light.navbarTabInactive}&#10;              style={[styles.icon, isActive &amp;&amp; styles.activeIcon]}&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        );&#10;      })}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: Colors.light.navbarBackground,&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: Colors.light.navbarShadow,&#10;    shadowOffset: { width: 0, height: -4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 12,&#10;    paddingBottom: 20,&#10;    paddingTop: 12,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-around',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 10,&#10;    paddingHorizontal: 8,&#10;    borderRadius: 20,&#10;    marginHorizontal: 2,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: Colors.light.navbarTabActiveBg,&#10;    transform: [{ scale: 1.02 }],&#10;  },&#10;  icon: {&#10;    marginBottom: 6,&#10;  },&#10;  activeIcon: {&#10;    // 추가 스타일 없음&#10;  },&#10;  centerCircleWrapper: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingHorizontal: 8,&#10;  },&#10;  centerCircle: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 32,&#10;    backgroundColor: Colors.light.navbarCenterButton,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    shadowColor: Colors.light.navbarCenterButton,&#10;    shadowOffset: { width: 0, height: 8 },&#10;    shadowOpacity: 0.3,&#10;    shadowRadius: 16,&#10;    elevation: 12,&#10;    position: 'absolute',&#10;    top: -48,&#10;  },&#10;  centerCircleActive: {&#10;    backgroundColor: Colors.light.navbarCenterButtonActive,&#10;    transform: [{ scale: 1.05 }],&#10;    shadowOpacity: 0.4,&#10;  },&#10;});" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, StyleSheet, TouchableOpacity, Haptics } from 'react-native';&#10;import { MaterialCommunityIcons } from '@expo/vector-icons';&#10;import { useRouter } from 'expo-router';&#10;import { Colors } from '../constants/Colors';&#10;&#10;// 더 직관적인 아이콘들로 변경&#10;const icons = [&#10;  'home',&#10;  'pill',&#10;  'plus',&#10;  'message-text',&#10;  'account-circle',&#10;];&#10;&#10;const labels = ['홈', '약물관리', '추가', '채팅', '내정보'];&#10;&#10;export default function BottomNavigationBar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;&#10;  const handleTabPress = async (idx: number) =&gt; {&#10;    // 햅틱 피드백 추가&#10;    try {&#10;      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);&#10;    } catch (error) {&#10;      // 햅틱 피드백이 지원되지 않는 환경에서는 무시&#10;    }&#10;&#10;    if (onTabPress) onTabPress(idx);&#10;&#10;    // 라우팅 로직&#10;    switch (idx) {&#10;      case 0:&#10;        router.push('/');&#10;        break;&#10;      case 1:&#10;        router.push('/interaction'); // 약물 상호작용 페이지로 이동&#10;        break;&#10;      case 2:&#10;        // router.push('/add');&#10;        break;&#10;      case 3:&#10;        router.push('/chat'); // AI 챗봇 화면으로 이동&#10;        break;&#10;      case 4:&#10;        router.push('/myinfo');&#10;        break;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; {&#10;        const isActive = activeIndex === idx;&#10;        const isCenter = idx === 2;&#10;&#10;        if (isCenter) {&#10;          return (&#10;            &lt;View key={idx} style={styles.centerCircleWrapper}&gt;&#10;              &lt;TouchableOpacity&#10;                style={[styles.centerCircle, isActive &amp;&amp; styles.centerCircleActive]}&#10;                onPress={() =&gt; handleTabPress(idx)}&#10;                activeOpacity={0.8}&#10;                accessibilityLabel={`${labels[idx]} 탭`}&#10;                accessibilityRole=&quot;button&quot;&#10;              &gt;&#10;                &lt;MaterialCommunityIcons&#10;                  name={icon}&#10;                  size={32}&#10;                  color={'#fff'}&#10;                /&gt;&#10;              &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;          );&#10;        }&#10;&#10;        return (&#10;          &lt;TouchableOpacity&#10;            key={idx}&#10;            style={[styles.tab, isActive &amp;&amp; styles.activeTab]}&#10;            onPress={() =&gt; handleTabPress(idx)}&#10;            activeOpacity={0.6}&#10;            accessibilityLabel={`${labels[idx]} 탭`}&#10;            accessibilityRole=&quot;button&quot;&#10;          &gt;&#10;            &lt;MaterialCommunityIcons&#10;              name={icon}&#10;              size={26}&#10;              color={isActive ? Colors.light.navbarTabActive : Colors.light.navbarTabInactive}&#10;              style={[styles.icon, isActive &amp;&amp; styles.activeIcon]}&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        );&#10;      })}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: Colors.light.navbarBackground,&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: Colors.light.navbarShadow,&#10;    shadowOffset: { width: 0, height: -4 },&#10;    shadowOpacity: 0.1,&#10;    shadowRadius: 12,&#10;    elevation: 12,&#10;    paddingBottom: 20,&#10;    paddingTop: 12,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-around',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 10,&#10;    paddingHorizontal: 8,&#10;    borderRadius: 20,&#10;    marginHorizontal: 2,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: Colors.light.navbarTabActiveBg,&#10;    transform: [{ scale: 1.02 }],&#10;  },&#10;  icon: {&#10;    marginBottom: 6,&#10;  },&#10;  activeIcon: {&#10;    // 추가 스타일 없음&#10;  },&#10;  centerCircleWrapper: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingHorizontal: 8,&#10;  },&#10;  centerCircle: {&#10;    width: 64,&#10;    height: 64,&#10;    borderRadius: 32,&#10;    backgroundColor: Colors.light.navbarCenterButton,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    shadowColor: Colors.light.navbarCenterButton,&#10;    shadowOffset: { width: 0, height: 8 },&#10;    shadowOpacity: 0.3,&#10;    shadowRadius: 16,&#10;    elevation: 12,&#10;    position: 'absolute',&#10;    top: -48,&#10;  },&#10;  centerCircleActive: {&#10;    backgroundColor: Colors.light.navbarCenterButtonActive,&#10;    transform: [{ scale: 1.05 }],&#10;    shadowOpacity: 0.4,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CalendarComponent.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CalendarComponent.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet } from 'react-native';&#10;import { Calendar, LocaleConfig } from 'react-native-calendars';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;// 한국어 로케일 설정&#10;LocaleConfig.locales['ko'] = {&#10;  monthNames: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  monthNamesShort: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],&#10;  dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'],&#10;  today: '오늘'&#10;};&#10;LocaleConfig.defaultLocale = 'ko';&#10;&#10;interface CalendarComponentProps {&#10;  markedDates?: any;&#10;  onDayPress?: (day: any) =&gt; void;&#10;}&#10;&#10;const CalendarComponent: React.FC&lt;CalendarComponentProps&gt; = ({&#10;  markedDates,&#10;  onDayPress&#10;}) =&gt; {&#10;  const defaultMarkedDates = {&#10;    &quot;2024-08-05&quot;: { selected: true, selectedColor: Colors.light.primary },&#10;    &quot;2024-08-06&quot;: { marked: true, dotColor: Colors.light.danger },&#10;    &quot;2024-08-07&quot;: { marked: true, dotColor: Colors.light.secondary },&#10;    &quot;2024-08-08&quot;: { marked: true, dotColor: Colors.light.warning },&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.sectionContainer}&gt;&#10;      &lt;View style={styles.sectionHeader}&gt;&#10;        &lt;Text style={styles.sectionTitle}&gt;복용 캘린더&lt;/Text&gt;&#10;        &lt;Text style={styles.sectionSubtitle}&gt;이번 달 복용 현황&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;Calendar&#10;        style={styles.calendar}&#10;        markedDates={markedDates || defaultMarkedDates}&#10;        theme={{&#10;          todayTextColor: Colors.light.primary,&#10;          arrowColor: Colors.light.primary,&#10;          selectedDayBackgroundColor: Colors.light.primary,&#10;          selectedDayTextColor: Colors.light.background,&#10;          monthTextColor: Colors.light.text,&#10;          textDayFontWeight: '500',&#10;          textMonthFontWeight: 'bold',&#10;          textDayHeaderFontWeight: '600',&#10;        }}&#10;        firstDay={1}&#10;        onDayPress={onDayPress}&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  calendar: {&#10;    borderRadius: 16,&#10;    backgroundColor: '#fff',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;});&#10;&#10;export default CalendarComponent;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet } from 'react-native';&#10;import { Calendar, LocaleConfig } from 'react-native-calendars';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;// 한국어 로케일 설정&#10;LocaleConfig.locales['ko'] = {&#10;  monthNames: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  monthNamesShort: [&#10;    '1월', '2월', '3월', '4월', '5월', '6월',&#10;    '7월', '8월', '9월', '10월', '11월', '12월'&#10;  ],&#10;  dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],&#10;  dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'],&#10;  today: '오늘'&#10;};&#10;LocaleConfig.defaultLocale = 'ko';&#10;&#10;interface CalendarComponentProps {&#10;  markedDates?: any;&#10;  onDayPress?: (day: any) =&gt; void;&#10;}&#10;&#10;const CalendarComponent: React.FC&lt;CalendarComponentProps&gt; = ({&#10;  markedDates,&#10;  onDayPress&#10;}) =&gt; {&#10;  const defaultMarkedDates = {&#10;    &quot;2024-08-05&quot;: { selected: true, selectedColor: Colors.light.primary },&#10;    &quot;2024-08-06&quot;: { marked: true, dotColor: Colors.light.danger },&#10;    &quot;2024-08-07&quot;: { marked: true, dotColor: Colors.light.secondary },&#10;    &quot;2024-08-08&quot;: { marked: true, dotColor: Colors.light.warning },&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.sectionContainer}&gt;&#10;      &lt;View style={styles.sectionHeader}&gt;&#10;        &lt;Text style={styles.sectionTitle}&gt;복용 캘린더&lt;/Text&gt;&#10;        &lt;Text style={styles.sectionSubtitle}&gt;이번 달 복용 현황&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;Calendar&#10;        style={styles.calendar}&#10;        markedDates={markedDates || defaultMarkedDates}&#10;        theme={{&#10;          todayTextColor: Colors.light.primary,&#10;          arrowColor: Colors.light.primary,&#10;          selectedDayBackgroundColor: Colors.light.primary,&#10;          selectedDayTextColor: Colors.light.background,&#10;          monthTextColor: Colors.light.text,&#10;          textDayFontWeight: '500',&#10;          textMonthFontWeight: 'bold',&#10;          textDayHeaderFontWeight: '600',&#10;        }}&#10;        firstDay={1}&#10;        monthFormat={'yyyy년 M월'}&#10;        onDayPress={onDayPress}&#10;      /&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  sectionContainer: {&#10;    marginBottom: 32,&#10;  },&#10;  sectionHeader: {&#10;    marginBottom: 16,&#10;  },&#10;  sectionTitle: {&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;    color: Colors.light.text,&#10;    marginBottom: 4,&#10;  },&#10;  sectionSubtitle: {&#10;    fontSize: 14,&#10;    color: Colors.light.mediumGray,&#10;    fontWeight: '400',&#10;  },&#10;  calendar: {&#10;    borderRadius: 16,&#10;    backgroundColor: '#fff',&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.06,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;});&#10;&#10;export default CalendarComponent;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/CustomNavbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/CustomNavbar.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { useRouter } from 'expo-router';&#10;&#10;// 네비바 아이콘 예시 (실제 경로에 맞게 수정 필요)&#10;const icons = [&#10;  require('../assets/images/home.png'),&#10;  require('../assets/images/search.png'),&#10;  require('../assets/images/plus.png'),&#10;  require('../assets/images/alert.png'),&#10;  require('../assets/images/user.png'),&#10;];&#10;&#10;const labels = ['홈', '검색', '추가', '알림', '내정보'];&#10;&#10;export default function CustomNavbar({ activeIndex = 0, onTabPress }: { activeIndex?: number; onTabPress?: (idx: number) =&gt; void }) {&#10;  const router = useRouter();&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {icons.map((icon, idx) =&gt; (&#10;        &lt;TouchableOpacity&#10;          key={idx}&#10;          style={[styles.tab, activeIndex === idx &amp;&amp; styles.activeTab]}&#10;          onPress={() =&gt; {&#10;            if (onTabPress) onTabPress(idx);&#10;            // router.push(...) 등 라우팅 처리 가능&#10;          }}&#10;          activeOpacity={0.7}&#10;        &gt;&#10;          &lt;Image source={icon} style={[styles.icon, activeIndex === idx &amp;&amp; styles.activeIcon]} /&gt;&#10;          &lt;Text style={[styles.label, activeIndex === idx &amp;&amp; styles.activeLabel]}&gt;{labels[idx]}&lt;/Text&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      ))}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flexDirection: 'row',&#10;    backgroundColor: '#fff',&#10;    borderTopLeftRadius: 24,&#10;    borderTopRightRadius: 24,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: -2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 8,&#10;    paddingBottom: 12,&#10;    paddingTop: 8,&#10;    paddingHorizontal: 8,&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;  },&#10;  tab: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    paddingVertical: 4,&#10;    borderRadius: 16,&#10;  },&#10;  activeTab: {&#10;    backgroundColor: '#F5F5F5',&#10;  },&#10;  icon: {&#10;    width: 28,&#10;    height: 28,&#10;    marginBottom: 2,&#10;    opacity: 0.7,&#10;  },&#10;  activeIcon: {&#10;    opacity: 1,&#10;  },&#10;  label: {&#10;    fontSize: 12,&#10;    color: '#888',&#10;    fontWeight: '500',&#10;  },&#10;  activeLabel: {&#10;    color: '#222',&#10;    fontWeight: 'bold',&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/InteractionRiskGroups.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/InteractionRiskGroups.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface InteractionRiskGroupsProps {&#10;  onGroupPress?: (groupType: 'duplicate' | 'risk' | 'safe') =&gt; void;&#10;  interactable?: boolean;&#10;  selectedGroup?: 'duplicate' | 'risk' | 'safe' | null;&#10;}&#10;&#10;const InteractionRiskGroups = ({ onGroupPress, interactable = false, selectedGroup = null }: InteractionRiskGroupsProps) =&gt; {&#10;  // Card data configuration&#10;  // Order: 중복, 위험, 안전&#10;  const groups = [&#10;    {&#10;      key: 'duplicate' as const,&#10;      title: '중복',&#10;      count: '0건',&#10;      pillBg: Colors.light.primaryLight,&#10;      pillColor: Colors.light.primary,&#10;      activeBg: '#6666FF',&#10;      activeTextColor: '#E6E6FF',&#10;    },&#10;    {&#10;      key: 'risk' as const,&#10;      title: '위험',&#10;      count: '1건',&#10;      pillBg: Colors.light.dangerLight,&#10;      pillColor: Colors.light.danger,&#10;      activeBg: '#FF5050',&#10;      activeTextColor: '#FFD9D9',&#10;    },&#10;    {&#10;      key: 'safe' as const,&#10;      title: '안전',&#10;      count: '1건',&#10;      pillBg: Colors.light.secondaryLight,&#10;      pillColor: Colors.light.secondary,&#10;      activeBg: '#2DB67D',&#10;      activeTextColor: '#D9F2E6',&#10;    },&#10;  ];&#10;&#10;  return (&#10;    &lt;View&gt;&#10;      &lt;View style={styles.groupsContainer}&gt;&#10;        {groups.map(({ key, title, count, pillBg, pillColor, activeBg, activeTextColor }) =&gt; {&#10;          const countValue = parseInt(count);&#10;          const isClickable = interactable &amp;&amp; countValue &gt; 0;&#10;          const isSelected = selectedGroup === key;&#10;          const isInactive = selectedGroup &amp;&amp; selectedGroup !== key;&#10;&#10;          const CardComponent = isClickable ? TouchableOpacity : View;&#10;&#10;          return (&#10;            &lt;CardComponent&#10;              key={key}&#10;              style={[&#10;                styles.groupCard,&#10;                isClickable &amp;&amp; styles.clickableCard,&#10;                isSelected &amp;&amp; { backgroundColor: activeBg },&#10;                isInactive &amp;&amp; { opacity: 0.4 },&#10;              ]}&#10;              onPress={isClickable ? () =&gt; onGroupPress?.(key) : undefined}&#10;              activeOpacity={isClickable ? 0.8 : 1}&#10;            &gt;&#10;              &lt;View style={[&#10;                styles.pill,&#10;                { backgroundColor: isSelected ? activeTextColor : pillBg }&#10;              ]}&gt;&#10;                &lt;Text style={[&#10;                  styles.pillText,&#10;                  { color: isSelected ? activeBg : pillColor }&#10;                ]}&gt;&#10;                  {title}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;              &lt;Text style={[&#10;                styles.groupCount,&#10;                !isClickable &amp;&amp; countValue === 0 &amp;&amp; styles.disabledCount,&#10;                { color: isSelected ? '#fff' : '#222' }&#10;              ]}&gt;&#10;                {count}&#10;              &lt;/Text&gt;&#10;            &lt;/CardComponent&gt;&#10;          );&#10;        })}&#10;      &lt;/View&gt;&#10;&#10;      &lt;View style={styles.warningContainer}&gt;&#10;        &lt;Text style={styles.warningText}&gt;&#10;          현재 약물 상호작용 위험 점수가 높습니다.{'\n'}반드시 의사, 약사와 상담하여 약물 변경 또는 사용 중단 여부를 결정하세요.&#10;        &lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  groupsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    gap: 12,&#10;    marginVertical: 8,&#10;  },&#10;  groupCard: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 20, // 더 둥글게&#10;    paddingVertical: 16,&#10;    marginHorizontal: 4,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  clickableCard: {&#10;    borderWidth: 1,&#10;    borderColor: 'transparent',&#10;  },&#10;  pill: {&#10;    borderRadius: 999,&#10;    paddingHorizontal: 16,&#10;    paddingVertical: 4,&#10;    marginBottom: 8,&#10;    minWidth: 48,&#10;    alignItems: 'center',&#10;  },&#10;  pillText: {&#10;    fontWeight: 'bold',&#10;    fontSize: 15,&#10;    letterSpacing: 0.5,&#10;  },&#10;  groupCount: {&#10;    fontWeight: 'bold',&#10;    fontSize: 18,&#10;    color: '#222',&#10;    marginTop: 2,&#10;  },&#10;  disabledCount: {&#10;    color: '#999',&#10;  },&#10;  warningContainer: {&#10;    backgroundColor: '#FFCCCC',&#10;    borderRadius: 10,&#10;    padding: 12,&#10;    marginTop: 16,&#10;  },&#10;  warningText: {&#10;    color: '#D8000C',&#10;    fontWeight: 'bold',&#10;    textAlign: 'center',&#10;  },&#10;});&#10;&#10;export default InteractionRiskGroups;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface InteractionRiskGroupsProps {&#10;  onGroupPress?: (groupType: 'duplicate' | 'risk' | 'safe') =&gt; void;&#10;  interactable?: boolean;&#10;  selectedGroup?: 'duplicate' | 'risk' | 'safe' | null;&#10;}&#10;&#10;const InteractionRiskGroups = ({ onGroupPress, interactable = false, selectedGroup = null }: InteractionRiskGroupsProps) =&gt; {&#10;  // Card data configuration&#10;  // Order: 중복, 위험, 안전&#10;  const groups = [&#10;    {&#10;      key: 'duplicate' as const,&#10;      title: '중복',&#10;      count: '0건',&#10;      pillBg: Colors.light.primaryLight,&#10;      pillColor: Colors.light.primary,&#10;      activeBg: '#6666FF',&#10;      activeTextColor: '#E6E6FF',&#10;    },&#10;    {&#10;      key: 'risk' as const,&#10;      title: '위험',&#10;      count: '1건',&#10;      pillBg: Colors.light.dangerLight,&#10;      pillColor: Colors.light.danger,&#10;      activeBg: '#FF5050',&#10;      activeTextColor: '#FFD9D9',&#10;    },&#10;    {&#10;      key: 'safe' as const,&#10;      title: '안전',&#10;      count: '1건',&#10;      pillBg: Colors.light.secondaryLight,&#10;      pillColor: Colors.light.secondary,&#10;      activeBg: '#2DB67D',&#10;      activeTextColor: '#D9F2E6',&#10;    },&#10;  ];&#10;&#10;  return (&#10;    &lt;View&gt;&#10;      &lt;View style={styles.groupsContainer}&gt;&#10;        {groups.map(({ key, title, count, pillBg, pillColor, activeBg, activeTextColor }) =&gt; {&#10;          const countValue = parseInt(count);&#10;          const isClickable = interactable &amp;&amp; countValue &gt; 0;&#10;          const isSelected = selectedGroup === key;&#10;          const isInactive = selectedGroup &amp;&amp; selectedGroup !== key;&#10;&#10;          const CardComponent = isClickable ? TouchableOpacity : View;&#10;&#10;          return (&#10;            &lt;CardComponent&#10;              key={key}&#10;              style={[&#10;                styles.groupCard,&#10;                isClickable &amp;&amp; styles.clickableCard,&#10;                isSelected &amp;&amp; { backgroundColor: activeBg },&#10;                isInactive &amp;&amp; { opacity: 0.4 },&#10;              ]}&#10;              onPress={isClickable ? () =&gt; onGroupPress?.(key) : undefined}&#10;              activeOpacity={isClickable ? 0.8 : 1}&#10;            &gt;&#10;              &lt;View style={[&#10;                styles.pill,&#10;                { backgroundColor: isSelected ? activeTextColor : pillBg }&#10;              ]}&gt;&#10;                &lt;Text style={[&#10;                  styles.pillText,&#10;                  { color: isSelected ? activeBg : pillColor }&#10;                ]}&gt;&#10;                  {title}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;              &lt;Text style={[&#10;                styles.groupCount,&#10;                !isClickable &amp;&amp; countValue === 0 &amp;&amp; styles.disabledCount,&#10;                { color: isSelected ? '#fff' : '#222' }&#10;              ]}&gt;&#10;                {count}&#10;              &lt;/Text&gt;&#10;            &lt;/CardComponent&gt;&#10;          );&#10;        })}&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  groupsContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    gap: 12,&#10;    marginVertical: 8,&#10;  },&#10;  groupCard: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    backgroundColor: '#fff',&#10;    borderRadius: 20, // 더 둥글게&#10;    paddingVertical: 16,&#10;    marginHorizontal: 4,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 2 },&#10;    shadowOpacity: 0.08,&#10;    shadowRadius: 8,&#10;    elevation: 2,&#10;  },&#10;  clickableCard: {&#10;    borderWidth: 1,&#10;    borderColor: 'transparent',&#10;  },&#10;  pill: {&#10;    borderRadius: 999,&#10;    paddingHorizontal: 16,&#10;    paddingVertical: 4,&#10;    marginBottom: 8,&#10;    minWidth: 48,&#10;    alignItems: 'center',&#10;  },&#10;  pillText: {&#10;    fontWeight: 'bold',&#10;    fontSize: 15,&#10;    letterSpacing: 0.5,&#10;  },&#10;  groupCount: {&#10;    fontWeight: 'bold',&#10;    fontSize: 18,&#10;    color: '#222',&#10;    marginTop: 2,&#10;  },&#10;  disabledCount: {&#10;    color: '#999',&#10;  },&#10;});&#10;&#10;export default InteractionRiskGroups;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>